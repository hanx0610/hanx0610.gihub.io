<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hanx の 碎片栈</title>
  
  <subtitle>Time waits for no one</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-12T10:04:56.826Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hanx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java性能调优随记</title>
    <link href="http://yoursite.com/2017/11/09/Java%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E9%9A%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/11/09/Java性能调优随记/</id>
    <published>2017-11-09T09:41:37.000Z</published>
    <updated>2017-11-12T10:04:56.826Z</updated>
    
    <content type="html"><![CDATA[<p>事情发生在16年了。当时系统beta版本进行上线前的性能压测时，发现进程的内存占用率会持续升高，与之而来的时，性能的接口性能的持续下降。最奇怪的是，停止压测后CPU和内存开销并没有恢复过来。记得之前发过博文，不知道怎么回事找不到了。 应其他同事的要求，回忆一下当时的定位过程，再做一个简单分享。<br>在讲述整个过程前，请大家自备两个梯子：<br>1)Java虚拟机的垃圾回收机制<br>2)jmeter的基本使用知识</p><p>首先下载jmeter工具，感觉是一个轻量级的性能检测工具，很好用。有基于windows 的GUI版本，也有在linux上运行的命令行版本。<br>下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="external">http://jmeter.apache.org/download_jmeter.cgi</a></p><p>怪象简述<br>刚开始压测时，一切指标都是正常的，也达到了预期水平。<br><img src="https://yqfile.alicdn.com/d68a2baf560215bcbf654489328695c3aca91d76.png" alt="Github"><br>8小时后，性能直线下降。<br><img src="https://yqfile.alicdn.com/2824338ce1f4e454c7e46d2edf22af7f7b1efbdc.png" alt="Github"><br>停止压测后，CPU和内存，仍然居高不下。 不要小看 2.4%的内存占用，这是200多G内存的物理服务器。（后面部署方式已切换为虚拟机的部署方式）<br><img src="https://yqfile.alicdn.com/7ec0340ae5296cc1f690656974add8ea82cc0a3c.png" alt="Github"><br>定位解决<br>1) 首先命令行，看下java堆的情况：jmap -heap 24442<br>看见年老区的内存被占满了<br><img src="https://yqfile.alicdn.com/44e00eddb0bbd82e988038652c3276a52da80be1.png" alt="Github"><br>2) 继续执行命令：jsat –gcutil 24442 1000 5，<br>看见年老区 使用率 100%，同时执行了12304次 FullGC<br><img src="https://yqfile.alicdn.com/27faf3175cf3f30ca3f04b21ef88a699f7851643.png" alt="Github"><br>3）查看进程24442的线程信息： ps –mp 24442 –o THREAD,tid,time<br>发现很多线程运行了好几个小时<br><img src="https://yqfile.alicdn.com/3e4e149b1563c6bc1aec5f10ec1efbc0e6faefbd.png" alt="Github"></p><p>这个时候，明显怀疑有内存泄露了。<br>再执行了两个命令（时间太久，没有找到截图了）：<br>jstat -printcompilation -h3 24442<br>jmap -histo 24442</p><p>进一步发现，内存中某个类的实例数量和String类的实例数量，异常的多。<br>最后在排查代码，找到了具体的类 及其使用逻辑。发现是由于队列的使用不当，造成了内存泄露</p><p>总结<br>本项目中，因为涉及频繁的小IO，所以开发同事期望通过生产者－队列－消费者的模型，用批量IO解决频繁小IO带来的资源开销。但在使用此模型时，忘计考虑了极限状态下，生产者的输入能力远大于消费者的消费能力时，会造成队列中的数据积压，进而造成内存泄露。但又因为常规情况下不会出现 此场景，所以很难发现这个bug。<br>这个案例告诉我们：<br>1) 对于一些关键接口，开发同事可以在完成开发后，自己用Jmeter压测一下，避免问题遗留到上线前期，造成巨大风险。<br>2) Java仍然会有内存泄露的情况，使用类似数组、队列、栈等数据结构时，需要格外小心。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事情发生在16年了。当时系统beta版本进行上线前的性能压测时，发现进程的内存占用率会持续升高，与之而来的时，性能的接口性能的持续下降。最奇怪的是，停止压测后CPU和内存开销并没有恢复过来。记得之前发过博文，不知道怎么回事找不到了。 应其他同事的要求，回忆一下当时的定位过程
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>前端需要了解的 SSO 与 CAS 知识</title>
    <link href="http://yoursite.com/2017/11/09/%E5%89%8D%E7%AB%AF%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84%20SSO%20%E4%B8%8E%20CAS%20%E7%9F%A5%E8%AF%86%20/"/>
    <id>http://yoursite.com/2017/11/09/前端需要了解的 SSO 与 CAS 知识 /</id>
    <published>2017-11-09T01:26:50.000Z</published>
    <updated>2017-11-12T12:08:43.658Z</updated>
    
    <content type="html"><![CDATA[<p>不管是什么公司，只要产品数量大于一个，那么单点登录势必是绕不过去的一个问题。作为前端程序员，我们对其虽然接触不多，但适当的了解还是必要的。本文就来谈谈单点登录相关的问题。<br>前置知识<br>了解 SSO，最好具备以下知识。当然，如果不是特别熟，也不影响阅读。</p><p>cookie及session<br>浏览器同源策略及跨域<br>了解登录系统的构成<br>什么是 SSO 与 CAS?</p><h3 id="SSO"><a href="#SSO" class="headerlink" title="SSO"></a>SSO</h3><p>SSO 是英文 Single Sign On 的缩写，翻译过来就是单点登录。顾名思义，它把两个及以上个产品中的用户登录逻辑抽离出来，达到只输入一次用户名密码，就能同时登录多个产品的效果。<br>使用 SSO 的优点很明显：<br>提升用户体验。就以我厂为例。我厂有两个产品，丁香人才网和丁香园论坛，假如你是我厂用户，肯定无法忍受登录丁香园论坛的时候输入一次用户名密码，登录人才网又要输入一次用户名密码吧？<br>避免重复开发。假如你是我厂后端，每天任务都饱和的不行，肯定无法忍受到人才网开发一套登录逻辑，到论坛又开发一套登录逻辑吧？<br>提升安全系数<br>假如你是我厂运维，发现了一个安全隐患需要紧急修复。你肯定无法忍受给茫茫多的产品后端都发一封邮件，责令修复吧？万一漏了一个呢？ </p><p>如果你想学习前端，可以来这个Q群，首先是291，中间是851，最后是189，里面可以学习和交流，也有资料可以下载。</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>SSO 仅仅是一种架构，一种设计，而 CAS 则是实现 SSO 的一种手段。两者是抽象与具体的关系。当然，除了 CAS 之外，实现 SSO 还有其他手段，比如简单的 cookie。CAS （Central Authentication Service）中心授权服务，本身是一个开源协议，分为 1.0 版本和 2.0 版本。1.0 称为基础模式，2.0称为代理模式，适用于存在非 Web 应用之间的单点登录。<br>同域 SSO如图，同域 SSO 是最简单的一种情况。此时，两个产品都是在一个域名下，单点登录是很自然的选择。我们来捋一捋步骤，搞清楚这里的步骤是理解后文的基础，千万不要跳过。<br>用户访问产品 a，向 后台服务器发送登录请求。<br>登录认证成功，服务器把用户的登录信息写入 session。<br>服务器为该用户生成一个 cookie，并加入到 response header 中，随着请求返回而写入浏览器。<br>该 cookie 的域设定为 dxy.cn。<br>下一次，当用户访问同域名的产品 b 时，由于 a 和 b 在同一域名下，也是 dxy.cn，浏览器会自动带上之前的 cookie。此时后台服务器就可以通过该 cookie 来验证登录状态了。<br>实际上，这种场景就是最简单最传统的登录操作。虽然我们把产品 a 和 b 人为分开了，但由于它们在同域上，就算看成是同一产品的不同类目也未尝不可。我们没有设置独立的 SSO 服务器，因为业务后台服务器本身就足以承担 SSO 的职能。<br>同父域 SSO<br>同父域 SSO 是同域 SSO 的简单升级，唯一的不同在于，服务器在返回 cookie 的时候，要把cookie 的 domain 设置为其父域。比如两个产品的地址分别为 a.dxy.cn 和 b.dxy.cn，那么 cookie 的域设置为 dxy.cn 即可。在访问 a 和 b 时，这个 cookie 都能发送到服务器，本质上和同域 SSO 没有区别。<br>.跨域 SSO<br>可以看到，在上面两种情况下，我们都没有专门设置 SSO 服务器。但是当两个产品不同域时，cookie 无法共享，所以我们必须设置独立的 SSO 服务器了。这个时候，我们就是通过标准的 CAS 方案来实现 SSO 的。<br>详解CAS</p><p>CAS 1.0 协议定义了一组术语，一组票据，一组接口。<br>术语：</p><p>Client：用户。<br>Server：中心服务器，也是 SSO 中负责单点登录的服务器。<br>Service：需要使用单点登录的各个服务，相当于上文中的产品 a/b。<br>/login：登录接口，用于登录到中心服务器。<br>/logout：登出接口，用于从中心服务器登出。<br>/validate：用于验证用户是否登录中心服务器。<br>/serviceValidate：用于让各个 service 验证用户是否登录中心服务器。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不管是什么公司，只要产品数量大于一个，那么单点登录势必是绕不过去的一个问题。作为前端程序员，我们对其虽然接触不多，但适当的了解还是必要的。本文就来谈谈单点登录相关的问题。&lt;br&gt;前置知识&lt;br&gt;了解 SSO，最好具备以下知识。当然，如果不是特别熟，也不影响阅读。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>那些年面试常见的排序算法(Java)</title>
    <link href="http://yoursite.com/2017/11/04/%E9%82%A3%E4%BA%9B%E5%B9%B4%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%20(Java)/"/>
    <id>http://yoursite.com/2017/11/04/那些年面试常见的排序算法 (Java)/</id>
    <published>2017-11-04T06:38:29.000Z</published>
    <updated>2017-11-12T12:05:43.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>排序就是将一组对象按照某种逻辑顺序重新排列的过程。比如信用卡账单中的交易是按照日期排序的——这种排序很可能使用了某种排序算法。在计算时代早期，大家普遍认为30%的计算周期都用在了排序上，今天这个比例可能降低了，大概是因为现在的排序算法更加高效。现在这个时代数据可以说是无处不在，而整理数据的第一步往往就是进行排序。所有的计算机系统都实现了各种排序算法以供系统和用户使用。<br>　　即使你只是使用标准库中的排序函数，学习排序算法仍然有很大的实际意义：</p><ul><li>排序算法往往是我们解决其他问题的第一步</li><li>排序算法有助于我们理解其他算法</li><li>算法在公司面试中占有很大比例，排序算法作为其中的重要组成部分，我们理所当然要学好了。<br>　　另外，更重的是下面介绍的这些算法都很经典，优雅而且高效，学习其中的精髓对自己提高自己的编程能力也有很大的帮助。<br>　　排序在商业数据处理和现代科学计算中有很重要的地位，它能够应用于事务处理,组合优化，天体物理学，分子动力学，语言学，基因组学，天气预报和很多其他领域。下面会介绍的一种排序算法（快速排序）甚至被誉为20世纪科学和工程领域的十大算法之一。后面我们会依次学习几种经典的排序算法，并高效地实现“优先队列”这种基础数据类型。我们将讨论比较排序算法的理论基础并中借若干排序算法和优先队列的应用。</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>1.原理：比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。针对所有的元素重复以上的步骤，除了最后一个。持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<br>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> size = numbers.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size - <span class="number">1</span> - i; j++) &#123;</div><div class="line">             <span class="comment">// 交换两数位置</span></div><div class="line">            <span class="keyword">if</span> (numbers[j] &gt; numbers[j + <span class="number">1</span>])</div><div class="line">            &#123;</div><div class="line">                temp = numbers[j];</div><div class="line">                numbers[j] = numbers[j + <span class="number">1</span>];</div><div class="line">                numbers[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>介绍：选择排序市一中很容易理解和实现的简单排序算法。学习它之前首先要知道它的两个很鲜明的特点。</p><ul><li>运行时间和输入无关。为了找出最小的元素而扫描一遍数组并不能为下一遍扫描提供任何实质性帮助的信息。因此使用这种排序的我们会惊讶的发现，一个已经有序的数组或者数组内元素全部相等的数组和一个元素随机排列的数组所用的排序时间竟然一样长！而其他算法会更善于利用输入的初始状态，选择排序则不然。</li><li>数据移动是最少的选择排序的交换次数和数组大小关系是线性关系。看下面的原理时可以很容易明白这一点。</li></ul><p>原理：在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。类似下图：</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/3/1b36a751c668b6c0fbb99fab8ad88a8f" alt="描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</div><div class="line">    <span class="comment">// 数组长度</span></div><div class="line">    <span class="keyword">int</span> size = numbers.length; </div><div class="line">    <span class="comment">// 中间变量</span></div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>; </div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">        <span class="comment">// 待确定的位置</span></div><div class="line">        <span class="keyword">int</span> k = i; </div><div class="line">        <span class="comment">// 选择出应该在第i个位置的数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = size - <span class="number">1</span>; j &gt; i; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (numbers[j] &lt; numbers[k]) &#123;</div><div class="line">                k = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 交换两个数</span></div><div class="line">        temp = numbers[i];</div><div class="line">        numbers[i] = numbers[k];</div><div class="line">        numbers[k] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>介绍：通常人们整理桥牌的方法是一张一张的来，将每一张牌插入到其他已经有序牌中的适当位置。在计算机的实现中，为了给要插入的元素腾出空间，我们需要将其余所有元素在插入之前都向右移动以为。这种算法就叫插入排序。<br>　**　与选择排序一样，当前索引左边的所有元素都是有序的，但他们的最终位置还不确定为了给更小的元素腾出空间，他们可能会被移动。但是当索引到达数组的右端时，数组排序就完成了。<br>　　和选择排序不同的是，插入排序所需的时间取决于输入中元素的初始顺序。也就是说对一个接近有序或有序的数组进行排序会比随机顺序或是逆序的数组进行排序要快的多。<br>原理：每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置（从后向前找到合适位置后），直到全部插入排序完为止。类似下图： </p><p><img src="https://user-gold-cdn.xitu.io/2017/11/3/e17136c994fbefa7e482a879bc4727bd" alt="描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 插入排序</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * 从第一个元素开始，该元素可以认为已经被排序 取出下一个元素，在已经排序的元素序列中从后向前扫描</span></div><div class="line"><span class="comment"> * 如果该元素（已排序）大于新元素，将该元素移到下一位置 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置 将新元素插入到该位置中 重复步骤2</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> numbers</span></div><div class="line"><span class="comment"> *            待排序数组</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> size = numbers.length;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">        temp = numbers[i];</div><div class="line">        <span class="comment">// 假如temp比前面的值小，则将前面的值后移</span></div><div class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; numbers[j - <span class="number">1</span>]; j--) &#123;</div><div class="line">            numbers[j] = numbers[j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        numbers[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>介绍:这个排序咋一看名字感觉很高大上，这是以D.L.shell名字命名的排序算法。为了展示初级排序算法性质的价值，我们来看一下基于插入排序的快速的排序算法——希尔排序。对于大规模乱序的数组插入排序很慢，因为它只会交换相邻的元素，因此元素只能一点一点地从数组的一端移动到另一端。如果最小的元素刚好在数组的尽头的话，那么要将它移动到正确的位置要N-1次移动。希尔排序为了加快速度简单地改进了插入排序，交换不相邻的元素以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。</p><p>原理：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 希尔排序的原理:根据需求，如果你想要结果从大到小排列，它会首先将数组进行分组，然后将较大值移到前面，较小值</span></div><div class="line"><span class="comment">    * 移到后面，最后将整个数组进行插入排序，这样比起一开始就用插入排序减少了数据交换和移动的次数，可以说希尔排序是加强 版的插入排序 拿数组5, 2,</span></div><div class="line"><span class="comment">    * 8, 9, 1, 3，4来说，数组长度为7，当increment为3时，数组分为两个序列</span></div><div class="line"><span class="comment">    * 5，2，8和9，1，3，4，第一次排序，9和5比较，1和2比较，3和8比较，4和比其下标值小increment的数组值相比较</span></div><div class="line"><span class="comment">    * 此例子是按照从大到小排列，所以大的会排在前面，第一次排序后数组为9, 2, 8, 5, 1, 3，4</span></div><div class="line"><span class="comment">    * 第一次后increment的值变为3/2=1,此时对数组进行插入排序， 实现数组从大到小排</span></div><div class="line"><span class="comment">    */</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">       <span class="comment">// 每次将步长缩短为原来的一半</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> increment = data.length / <span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = increment; i &lt; data.length; i++) &#123;</div><div class="line">               temp = data[i];</div><div class="line">               <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment) &#123;</div><div class="line">                  <span class="comment">// 如想从小到大排只需修改这里</span></div><div class="line">                   <span class="keyword">if</span> (temp &gt; data[j - increment])</div><div class="line">                   &#123;</div><div class="line">                       data[j] = data[j - increment];</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">               &#125;</div><div class="line">               data[j] = temp;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>介绍：归并即将两个有序的数组归并并成一个更大的有序数组。人们很快根据这个思路发明了一种简单的递归排序算法：归并排序。要将一个数组排序，可以先（递归地）将它分成两半分别排序，然后将结果归并起来。归并排序最吸引人的性质是它能保证任意长度为N的数组排序所需时间和NlogN成正比；它的主要缺点也显而易见就是它所需的额外空间和N成正比。简单的归并排序如下图：<br><img src="https://user-gold-cdn.xitu.io/2017/11/3/02047bb24ff43e5a7bc172793929a694" alt="描述"></p><p>原理：归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。合并方法：<br>设r[i…n]由两个有序子表r[i…m]和r[m+1…n]组成，两个子表长度分别为n-i +1、n-m。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1、j=m+1；k=i；i=i; //置两个子表的起始下标及辅助数组的起始下标</div><div class="line">2、若i&gt;m 或j&gt;n，转⑷ //其中一个子表已合并完，比较选取结束</div><div class="line">3、//选取r[i]和r[j]较小的存入辅助数组rf</div><div class="line">        如果r[i]&lt;r[j]，rf[k]=r[i]； i++； k++； 转⑵</div><div class="line">        否则，rf[k]=r[j]； j++； k++； 转⑵</div><div class="line">4、//将尚未处理完的子表中元素存入rf</div><div class="line">        如果i&lt;=m，将r[i…m]存入rf[k…n] //前一子表非空</div><div class="line">        如果j&lt;=n ,  将r[j…n] 存入rf[k…n] //后一子表非空</div><div class="line">5、合并结束。</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * 归并排序 简介:将两个（或两个以上）有序表合并成一个新的有序表</span></div><div class="line"><span class="comment">     * 即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列 时间复杂度为O(nlogn) 稳定排序方式</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></div><div class="line"><span class="comment">     *            待排序数组</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 输出有序数组</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</div><div class="line">            <span class="comment">// 左边</span></div><div class="line">            mergeSort(nums, low, mid);</div><div class="line">            <span class="comment">// 右边</span></div><div class="line">            mergeSort(nums, mid + <span class="number">1</span>, high);</div><div class="line">            <span class="comment">// 左右归并</span></div><div class="line">            merge(nums, low, mid, high);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将数组中low到high位置的数进行排序</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></div><div class="line"><span class="comment">     *            待排序数组</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> low</span></div><div class="line"><span class="comment">     *            待排的开始位置</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> mid</span></div><div class="line"><span class="comment">     *            待排中间位置</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> high</span></div><div class="line"><span class="comment">     *            待排结束位置</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> i = low;<span class="comment">// 左指针</span></div><div class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">// 右指针</span></div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 把较小的数先移到新数组中</span></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</div><div class="line">                temp[k++] = nums[i++];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp[k++] = nums[j++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把左边剩余的数移入数组</span></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123;</div><div class="line">            temp[k++] = nums[i++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把右边边剩余的数移入数组</span></div><div class="line">        <span class="keyword">while</span> (j &lt;= high) &#123;</div><div class="line">            temp[k++] = nums[j++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把新数组中的数覆盖nums数组</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; temp.length; k2++) &#123;</div><div class="line">            nums[k2 + low] = temp[k2];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>介绍：快速排序是一种分治的排序算法。它将一个数组分成两个字数组，将两部分独立地排序。快速排序和归并排序是互补的：归并排序将数组分成两个字数组分别排序，并将有序的字数组归并以将整个数组排序；而快速排序将数组排序的方式则是当两个字数组都有序时整个数组也就自然有序了。在第一种情况中，递归调用发生在处理整个数组之前；在第二种情况中，递归调用发生在处理整个数组之后。在归并排序中，一个数组被等分为两半；快速排序中，切分的位置取决于数组的内容。快速排序的过程大致如下： </p><p><img src="https://user-gold-cdn.xitu.io/2017/11/3/f0b0af75a81adfdab85ae28aba269d62" alt="描述"></p><p>原理：通过一趟排序将待排序记录分割成独立的两部分，一部分全小于选取的参考值，另一部分全大于选取的参考值。这样分别对两部分排序之后顺序就可以排好了。</p><ol><li>一趟排序的过程<br><img src="https://user-gold-cdn.xitu.io/2017/11/3/ee0a28c59d1fc0128fc89c5588d1e61a" alt="描述"></li><li>排序的全过程<br><img src="https://user-gold-cdn.xitu.io/2017/11/3/f1501296ffa100572468f4c73061f7d6" alt="描述"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">    * 查找出中轴（默认是最低位low）的在numbers数组排序后所在位置</span></div><div class="line"><span class="comment">    * </span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> numbers 带查找数组</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> low 开始位置</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> high 结束位置</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span> 中轴所在位置</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">       <span class="comment">// 数组的第一个作为中轴</span></div><div class="line">       <span class="keyword">int</span> temp = numbers[low]; </div><div class="line">       <span class="keyword">while</span> (low &lt; high) &#123;</div><div class="line">           <span class="keyword">while</span> (low &lt; high &amp;&amp; numbers[high] &gt; temp) &#123;</div><div class="line">               high--;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 比中轴小的记录移到低端</span></div><div class="line">           numbers[low] = numbers[high];</div><div class="line">           <span class="keyword">while</span> (low &lt; high &amp;&amp; numbers[low] &lt; temp) &#123;</div><div class="line">               low++;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 比中轴大的记录移到高端</span></div><div class="line">           numbers[high] = numbers[low]; </div><div class="line">       &#125;</div><div class="line">       numbers[low] = temp; <span class="comment">// 中轴记录到尾</span></div><div class="line">       <span class="keyword">return</span> low; <span class="comment">// 返回中轴的位置</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * </span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> numbers 带排序数组</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> low 开始位置</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> high 结束位置</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (low &lt; high) &#123;</div><div class="line">           <span class="keyword">int</span> middle = getMiddle(numbers, low, high); <span class="comment">// 将numbers数组进行一分为二</span></div><div class="line">           quick(numbers, low, middle - <span class="number">1</span>); <span class="comment">// 对低字段表进行递归排序</span></div><div class="line">           quick(numbers, middle + <span class="number">1</span>, high); <span class="comment">// 对高字段表进行递归排序</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * 快速排序</span></div><div class="line"><span class="comment">    * 快速排序提供方法调用</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> numbers 带排序数组</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</div><div class="line">       <span class="comment">// 查看数组是否为空</span></div><div class="line">       <span class="keyword">if</span> (numbers.length &gt; <span class="number">0</span>) </div><div class="line">       &#123;</div><div class="line">           quick(numbers, <span class="number">0</span>, numbers.length - <span class="number">1</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;排序就是将一组对象按照某种逻辑顺序重新排列的过程。比如信用卡账单中的交易是按照日期排序的——这种排序很可能使用了某种排序算法。在计算时代早期
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴Java开发规约插件使用</title>
    <link href="http://yoursite.com/2017/11/03/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E8%A7%84%E7%BA%A6%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/11/03/阿里巴巴Java开发规约插件使用/</id>
    <published>2017-11-02T16:00:20.000Z</published>
    <updated>2017-11-12T11:27:56.818Z</updated>
    
    <content type="html"><![CDATA[<p>就在今天 10月14日上午9：00 阿里巴巴于在杭州云栖大会《研发效能峰会》上，正式发布《阿里巴巴Java开发手册》扫描插件，该插件在扫描代码后，将不符合《手册》的代码按Blocker/Critical/Major三个等级显示在下方，甚至在IDEA上，还基于Inspection机制提供了实时检测功能，编写代码的同时也能快速发现问题所在。对于历史代码，部分规则实现了批量一键修复的功能。–两个字牛逼</p><p>git地址为这里写链接内容 <a href="https://github.com/alibaba/p3c" target="_blank" rel="external">https://github.com/alibaba/p3c</a></p><h3 id="IDea的安装方式："><a href="#IDea的安装方式：" class="headerlink" title="IDea的安装方式："></a>IDea的安装方式：</h3><p>IDEA版的插件发布到了IDEA官方仓库中(最低支持版本14.1.7，JDK1.7+)，<br>只需打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Settings &gt;&gt; Plugins &gt;&gt; Browse repositories</div></pre></td></tr></table></figure></p><p>输入 Alibaba 搜索一下便可以看到对应插件了，点击安装等待安装完成。</p><p><img src="http://upload-images.jianshu.io/upload_images/2830896-cfd331e6143be5ec?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDea"></p><h3 id="Eclipse的安装方式"><a href="#Eclipse的安装方式" class="headerlink" title="Eclipse的安装方式"></a>Eclipse的安装方式</h3><p>Eclipse版插件支持4.2（Juno，JDK1.8+）及以上版本，提供Update Site，通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Help &gt;&gt; Install New Software</div></pre></td></tr></table></figure><p>然后输入<a href="https://p3c.alibaba.com/plugin/eclipse/update" target="_blank" rel="external">https://p3c.alibaba.com/plugin/eclipse/update</a> 即可看到安装列表，安装即可。<br>插件的更新，可以通过 Help &gt;&gt; Check for Udates 进行新版本检测。</p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p><img src="http://upload-images.jianshu.io/upload_images/2830896-1911d3bf3eaaa16f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDea"><br><img src="http://upload-images.jianshu.io/upload_images/2830896-2debd0505d66e61b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDea"><br><img src="http://upload-images.jianshu.io/upload_images/2830896-59d3710547be75a7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDea"></p><p>还有自动提示的效果</p><p><img src="http://upload-images.jianshu.io/upload_images/2830896-9467b7a4d9073b0c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDea"><br>可以说是非常棒了</p><p><img src="http://upload-images.jianshu.io/upload_images/2830896-e4a8c0354cc62ff7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IDea"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;就在今天 10月14日上午9：00 阿里巴巴于在杭州云栖大会《研发效能峰会》上，正式发布《阿里巴巴Java开发手册》扫描插件，该插件在扫描代码后，将不符合《手册》的代码按Blocker/Critical/Major三个等级显示在下方，甚至在IDEA上，还基于Inspecti
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2017天猫双11，1682亿背后的阿里绝密50+技术</title>
    <link href="http://yoursite.com/2017/11/01/2017%E5%A4%A9%E7%8C%AB%E5%8F%8C11%EF%BC%8C1682%E4%BA%BF%E8%83%8C%E5%90%8E%E7%9A%84%E9%98%BF%E9%87%8C%E7%BB%9D%E5%AF%8650+%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/11/01/2017天猫双11，1682亿背后的阿里绝密50+技术/</id>
    <published>2017-11-01T14:43:56.000Z</published>
    <updated>2017-11-12T12:09:35.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Cloud概述"><a href="#Spring-Cloud概述" class="headerlink" title="Spring Cloud概述"></a>Spring Cloud概述</h3><h4 id="传统的应用"><a href="#传统的应用" class="headerlink" title="传统的应用"></a>传统的应用</h4><p>1.单体应用<br>在此之前，笔者所在公司开发Java程序，大都使用Struts、Spring、Hibernate（MyBatis）等技术框架，每一个项目都会发布一个单体应用。例如开发一个进销存系统，将会开发一个war包部署到Tomcat中，每一次需要开发新的模块或添加新功能时，都会在原来的基础上不断的添加。若干年后，这个war包不断的膨胀，程序员在进行调试时，服务器也可能需要启动半天，维护这个系统的效率极为低下。这样一个war包，涵盖了库存、销售、会员、报表等模块，如图1-1。<br><img src="https://static.oschina.net/uploads/space/2017/0924/095718_XMPj_3665821.png" alt="图1-1 单体应用"><br>这样的单体应用隐患非常多，任何的一个bug，都有可能导致整个系统宕机。笔者印象最深刻的是，曾经有一客户在高峰期，导出一张销售明细报表（数据量较大），最终造成整个系统瘫痪，前台的销售人员无法售卖。维护这样一个系统，不仅效率极低，而且充满风险，项目组的各个成员惶惶不可终日，我们需要本质上的改变。</p><p>2.架构演进<br>针对以上的单体应用的问题，我们参考SOA架构，将各个模块划分独立的服务模块（war），并且使用了数据库的读写分离，架构如图1-2。<br><img src="https://static.oschina.net/uploads/space/2017/0924/095730_JNIO_3665821.png" alt="图1-2 架构演进"><br>各个模块之间会存在相互调用的依赖关系，例如销售模块会调用会员模块的接口，为了减少各个模块之间的耦合，我们加入了企业服务总线（ESB），各模块与ESB之间的架构如图1-3所示。<br><img src="https://static.oschina.net/uploads/space/2017/0924/095740_2lFc_3665821.png" alt="图1-2 架构演进"><br>加入ESB后，各个模块将服务发布到ESB中，它们与ESB之间使用SOAP协议进行通信。图1-2与图1-3的架构实现后，整个系统的性能有了明显的提升，各个模块的耦合度也降低了。运行了一段日子后，又出现了新的问题，由于销售终端数量的增多，销售模块明显超过其承受能力，为了保证销售前端的正常运行，我们使用了Nginx做负载均衡，请见图1-4。<br><img src="https://static.oschina.net/uploads/space/2017/0924/095748_jOP0_3665821.png" alt="图1-3 ESB"><br>加入ESB后，各个模块将服务发布到ESB中，它们与ESB之间使用SOAP协议进行通信。图1-2与图1-3的架构实现后，整个系统的性能有了明显的提升，各个模块的耦合度也降低了。运行了一段日子后，又出现了新的问题，由于销售终端数量的增多，销售模块明显超过其承受能力，为了保证销售前端的正常运行，我们使用了Nginx做负载均衡，请见图1-4。<br><img src="https://static.oschina.net/uploads/space/2017/0924/095748_jOP0_3665821.png" alt="图1-4 使用Nginx"><br>随着销售模块的增多，带来了许多问题，例如管理这些模块，对于运维工程师来说，是一项艰巨的任务，一旦销售模块有所修改，他们将通宵达旦进行升级。另外，企业服务总线也有可能成为性能的瓶颈，虽然目前仍未出现该问题，但我们需要未雨绸缪。</p><p>3.架构要求<br>从前面的架构演进可知，应用中的每一个点，都有可能成为系统的问题点。随着互联网应用的普及，在大数据、高并发的环境下，我们的系统架构需要面对更为严苛的挑战，我们需要一套新的架构，它起码能满足以下要求<br>高性能：这是应用程序的基本要求。</p><ul><li>独立性：其中一个模块出现bug或者其他问题，不可以影响其他模块或者整个应用。</li><li>容易扩展：应用中的每一个节点，都可以根据实际需要进行扩展。</li><li>便于管理：对于各个模块的资源，可以轻松进行管理、升级，减少维护成本。</li><li>状态监控与警报：对整个应用程序进行监控，当某一个节点出现问题时，能及时发出警报。</li></ul><p>为了能解决遇到的问题、达到以上的架构要求，我们开始研究Spring Cloud。</p><h4 id="微服务与Spring-Cloud"><a href="#微服务与Spring-Cloud" class="headerlink" title="微服务与Spring Cloud"></a>微服务与Spring Cloud</h4><p>1.什么是微服务<br>微服务一词来源Martin Fowler的“Microservices”一文，微服务是一种架构风格，将单体应用划分为小型的服务单元，微服务之间使用HTTP的API进行资源访问与操作。</p><p>在对单体应用的划分上，微服务与前面的SOA架构有点类似，但是SOA架构侧重于将每个单体应用的服务集成到ESB上，而微服务做得更加彻底，强调将整个模块变成服务组件，微服务对模块的划分粒度可能会更细。以我们前面的销售、会员模块为例，在SOA架构中，只需要将相应的服务发布到ESB容器就可以了，而在微服务架构中，这两个模块本身，将会变为一个或多个的服务组件。SOA架构与微服务架构，请见图1-5与图1-6。</p><p><img src="https://static.oschina.net/uploads/space/2017/0924/095758_YXOu_3665821.png" alt="图1-5 SOA架构"></p><p><img src="https://static.oschina.net/uploads/space/2017/0924/095810_5ep4_3665821.png" alt="图1-6 微服务架构"></p><p>在微服务的架构上，Martin Fowler的文章肯定了Netflix的贡献，接下来，我们了解一下Netflix OSS。</p><ol><li>关于Netflix OSS<br>Netflix是一个互联网影片提供商，在几年前，Netflix公司成立了自己的开源中心，名称为Netflix Open Source Software Center，简称Netflix OSS。这个开源组织专注于大数据、云计算方面的技术，提供了多个开源框架，这些框架包括大数据工具、构建工具、基于云平台的服务工具等。Netflix所提供的这些框架，很好的遵循微服务所推崇的理念，实现了去中心化的服务管理、服务容错等机制。</li></ol><p>3.Spring Cloud与Netflix<br>Spring Cloud并不是一个具体的框架，大家可以把它理解为一个工具箱，它提供的各类工具，可以帮助我们快速的构建分布式系统。</p><p>Spring Cloud的各个项目基于Spring Boot，将Netflix的多个框架进行封装，并且通过自动配置的方式将这些框架绑定到Spring的环境中，从而简化了这些框架的使用。由于Spring Boot的简便，使得我们在使用Spring Cloud时，很容易的将Netflix各个框架整合进我们的项目中。Spring Cloud下的“Spring Cloud Netflix”模块，主要封装了Netflix的以下项目：<br>Eureka：基于REST服务的分布式中间件，主要用于服务管理。</p><ul><li>Hystrix：容错框架，通过添加延迟阀值以及容错的逻辑，来帮助我们控制分布式系统间组件的交互。</li><li>Feign：一个REST客户端，目的是为了简化Web Service客户端的开发</li><li>Ribbon：负载均衡框架，在微服务集群中为各个客户端的通信提供支持，它主要实现中间层应用程序的负载均衡</li><li>Zuul：为微服务集群提供过代理、过滤、路由等功能。</li></ul><p>4.Spring Cloud的主要模块</p><p>除了Spring Cloud Netflix模块外，Spring Cloud还包括以下几个重要的模块：</p><ul><li>Spring Cloud Config：为分布式系统提供了配置服务器和配置客户端，通过对它们的配置，可以很好的管理集群中的配置文件。</li><li>Spring Cloud Sleuth：服务跟踪框架，可以与Zipkin、Apache HTrace和ELK等数据分析、服务跟踪系统进行整合，为服务跟踪、解决问题提供了便利。</li><li>Spring Cloud Stream：用于构建消息驱动微服务的框架，该框架在Spring Boot的基础上，整合了“Spring Integration”来连接消息代理中间件。</li><li>Spring Cloud Bus：连接RabbitMQ、Kafka等消息代理的集群消息总线。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-Cloud概述&quot;&gt;&lt;a href=&quot;#Spring-Cloud概述&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud概述&quot;&gt;&lt;/a&gt;Spring Cloud概述&lt;/h3&gt;&lt;h4 id=&quot;传统的应用&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Github 安全类Repo收集整理</title>
    <link href="http://yoursite.com/2017/06/10/Github%20%E5%AE%89%E5%85%A8%E7%B1%BBRepo%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2017/06/10/Github 安全类Repo收集整理/</id>
    <published>2017-06-10T02:12:00.000Z</published>
    <updated>2017-10-24T15:17:45.327Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="http://www.uedbox.com/github-security-repo-collection/" target="_blank" rel="external">http://www.uedbox.com/github-security-repo-collection/</a></p><p>刚好这两天对之前github上关注的一些比较有意思的项目进行了一下分类整理，在这里列出来分享给大家，希望能对大家寻找工具或者资源有所帮助。<br>大部分Repo是关于<a href="http://www.uedbox.com/" target="_blank">网络安全</a>以及Python的，也有一些其他主题的项目，有很多我都没有用过，关于项目的功能概括如果写的有不对的地方，还请大家多多包涵，给予指正。<br>欢迎组团欢迎一起学习交流！转载请注明出处。</p><h3 id="漏洞及渗透练习平台"><a href="#漏洞及渗透练习平台" class="headerlink" title="漏洞及渗透练习平台"></a>漏洞及渗透练习平台</h3><ul><li><strong>WebGoat漏洞练习环境</strong><ul><li><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="external">https://github.com/WebGoat/WebGoat</a></li><li><a href="https://github.com/WebGoat/WebGoat-Legacy" target="_blank" rel="external">https://github.com/WebGoat/WebGoat-Legacy</a></li></ul></li><li><strong>Damn Vulnerable Web Application(漏洞练习平台)</strong><ul><li><a href="https://github.com/RandomStorm/DVWA" target="_blank" rel="external">https://github.com/RandomStorm/DVWA</a></li></ul></li><li><strong>数据库注入练习平台</strong><ul><li><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">https://github.com/Audi-1/sqli-labs</a></li></ul></li><li><strong>用node编写的漏洞练习平台，like OWASP Node Goat</strong><ul><li><a href="https://github.com/cr0hn/vulnerable-node" target="_blank" rel="external">https://github.com/cr0hn/vulnerable-node</a></li></ul></li></ul><h3 id="花式扫描器"><a href="#花式扫描器" class="headerlink" title="花式扫描器"></a>花式扫描器</h3><ul><li><strong>端口扫描器Nmap</strong><ul><li><a href="https://github.com/nmap/nmap" target="_blank" rel="external">https://github.com/nmap/nmap</a></li></ul></li><li><strong>本地网络扫描器</strong><ul><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="external">https://github.com/SkyLined/LocalNetworkScanner</a></li></ul></li><li><strong>子域名扫描器</strong><ul><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="external">https://github.com/lijiejie/subDomainsBrute</a></li></ul></li><li><strong>漏洞路由扫描器</strong><ul><li><a href="https://github.com/jh00nbr/Routerhunter-2.0" target="_blank" rel="external">https://github.com/jh00nbr/Routerhunter-2.0</a></li></ul></li><li><strong>迷你批量信息泄漏扫描脚本</strong><ul><li><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="external">https://github.com/lijiejie/BBScan</a></li></ul></li><li><strong>Waf类型检测工具</strong><ul><li><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="external">https://github.com/EnableSecurity/wafw00f</a></li></ul></li></ul><h3 id="信息搜集工具"><a href="#信息搜集工具" class="headerlink" title="信息搜集工具"></a>信息搜集工具</h3><ul><li><strong>社工插件，可查找以email、phone、username的注册的所有网站账号信息</strong><ul><li><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="external">https://github.com/n0tr00t/Sreg</a></li></ul></li><li><strong>Github信息搜集，可实时扫描查询git最新上传有关邮箱账号密码信息</strong><ul><li><a href="https://github.com/sea-god/gitscan" target="_blank" rel="external">https://github.com/sea-god/gitscan</a></li></ul></li><li><strong>github Repo信息搜集工具</strong><ul><li><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="external">https://github.com/metac0rtex/GitHarvester</a></li></ul></li></ul><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><ul><li><strong>webshell大合集</strong><ul><li><a href="https://github.com/tennc/webshell" target="_blank" rel="external">https://github.com/tennc/webshell</a></li></ul></li><li><strong>渗透以及web攻击脚本</strong><ul><li><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="external">https://github.com/brianwrf/hackUtils</a></li></ul></li><li><strong>web渗透小工具大合集</strong><ul><li><a href="https://github.com/rootphantomer/hack_tools_for_me" target="_blank" rel="external">https://github.com/rootphantomer/hack_tools_for_me</a></li></ul></li><li><strong>XSS数据接收平台</strong><ul><li><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="external">https://github.com/firesunCN/BlueLotus_XSSReceiver</a></li></ul></li><li><strong>XSS与CSRF工具</strong><ul><li><a href="https://github.com/evilcos/xssor" target="_blank" rel="external">https://github.com/evilcos/xssor</a></li></ul></li><li><strong>Short for command injection exploiter，web向命令注入检测工具</strong><ul><li><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="external">https://github.com/stasinopoulos/commix</a></li></ul></li><li><strong>数据库注入工具</strong><ul><li><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="external">https://github.com/sqlmapproject/sqlmap</a></li></ul></li><li><strong>Web代理，通过加载sqlmap api进行sqli实时检测</strong><ul><li><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="external">https://github.com/zt2/sqli-hunter</a></li></ul></li><li><strong>新版中国菜刀</strong><ul><li><a href="https://github.com/Chora10/Cknife" target="_blank" rel="external">https://github.com/Chora10/Cknife</a></li></ul></li><li><strong>.git泄露利用EXP</strong><ul><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">https://github.com/lijiejie/GitHack</a></li></ul></li><li><strong>浏览器攻击框架</strong><ul><li><a href="https://github.com/beefproject/beef" target="_blank" rel="external">https://github.com/beefproject/beef</a></li></ul></li><li><strong>自动化绕过WAF脚本</strong><ul><li><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="external">https://github.com/khalilbijjou/WAFNinja</a></li></ul></li><li><strong>http命令行客户端，可以从命令行构造发送各种http请求（类似于Curl）</strong><ul><li><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">https://github.com/jkbrzt/httpie</a></li></ul></li><li><strong>浏览器调试利器</strong><ul><li><a href="https://github.com/firebug/firebug" target="_blank" rel="external">https://github.com/firebug/firebug</a></li></ul></li><li><strong>一款开源WAF</strong><ul><li><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="external">https://github.com/SpiderLabs/ModSecurity</a></li></ul></li></ul><h3 id="windows域渗透工具"><a href="#windows域渗透工具" class="headerlink" title="windows域渗透工具"></a>windows域渗透工具</h3><ul><li><strong>windows渗透神器</strong><ul><li><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="external">https://github.com/gentilkiwi/mimikatz</a></li></ul></li><li><strong>Powershell渗透库合集</strong><ul><li><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="external">https://github.com/PowerShellMafia/PowerSploit</a></li></ul></li><li><strong>Powershell tools合集</strong><ul><li><a href="https://github.com/clymb3r/PowerShell" target="_blank" rel="external">https://github.com/clymb3r/PowerShell</a></li></ul></li></ul><h3 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h3><ul><li><strong>Web向Fuzz工具</strong><ul><li><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="external">https://github.com/xmendez/wfuzz</a></li></ul></li><li><strong>HTTP暴力破解，撞库攻击脚本</strong><ul><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="external">https://github.com/lijiejie/htpwdScan</a></li></ul></li></ul><h3 id="漏洞利用及攻击框架"><a href="#漏洞利用及攻击框架" class="headerlink" title="漏洞利用及攻击框架"></a>漏洞利用及攻击框架</h3><ul><li><strong>msf</strong><ul><li><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="external">https://github.com/rapid7/metasploit-framework</a></li></ul></li><li><strong>Poc调用框架，可加载Pocsuite,Tangscan，Beebeeto等</strong><ul><li><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="external">https://github.com/erevus-cn/pocscan</a></li></ul></li><li><strong>Pocsuite</strong><ul><li><a href="https://github.com/knownsec/Pocsuite" target="_blank" rel="external">https://github.com/knownsec/Pocsuite</a></li></ul></li><li><strong>Beebeeto</strong><ul><li><a href="https://github.com/n0tr00t/Beebeeto-framework" target="_blank" rel="external">https://github.com/n0tr00t/Beebeeto-framework</a></li></ul></li></ul><h3 id="漏洞POC-amp-EXP"><a href="#漏洞POC-amp-EXP" class="headerlink" title="漏洞POC&amp;EXP"></a>漏洞POC&amp;EXP</h3><ul><li><strong>ExploitDB官方git版本</strong><ul><li><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="external">https://github.com/offensive-security/exploit-database</a></li></ul></li><li><strong>php漏洞代码分析</strong><ul><li><a href="https://github.com/80vul/phpcodz" target="_blank" rel="external">https://github.com/80vul/phpcodz</a></li></ul></li><li><strong>Simple test for CVE-2016-2107</strong><ul><li><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="external">https://github.com/FiloSottile/CVE-2016-2107</a></li></ul></li><li><strong>CVE-2015-7547 POC</strong><ul><li><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="external">https://github.com/fjserna/CVE-2015-7547</a></li></ul></li><li><strong>JAVA反序列化POC生成工具</strong><ul><li><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="external">https://github.com/frohoff/ysoserial</a></li></ul></li><li><strong>JAVA反序列化EXP</strong><ul><li><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="external">https://github.com/foxglovesec/JavaUnserializeExploits</a></li></ul></li><li><strong>Jenkins CommonCollections EXP</strong><ul><li><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="external">https://github.com/CaledoniaProject/jenkins-cli-exploit</a></li></ul></li><li><strong>CVE-2015-2426 EXP (windows内核提权)</strong><ul><li><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="external">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a></li></ul></li><li><strong>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示)</strong><ul><li><a href="https://github.com/hxer/vulnapp" target="_blank" rel="external">https://github.com/hxer/vulnapp</a></li></ul></li><li><strong>php7缓存覆写漏洞Demo及相关工具</strong><ul><li><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="external">https://github.com/GoSecure/php7-opcache-override</a></li></ul></li><li><strong>XcodeGhost木马样本</strong><ul><li><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="external">https://github.com/XcodeGhostSource/XcodeGhost</a></li></ul></li></ul><h3 id="中间人攻击及钓鱼"><a href="#中间人攻击及钓鱼" class="headerlink" title="中间人攻击及钓鱼"></a>中间人攻击及钓鱼</h3><ul><li><strong>中间人攻击框架</strong><ul><li><a href="https://github.com/secretsquirrel/the-backdoor-factory" target="_blank" rel="external">https://github.com/secretsquirrel/the-backdoor-factory</a></li><li><a href="https://github.com/secretsquirrel/BDFProxy" target="_blank" rel="external">https://github.com/secretsquirrel/BDFProxy</a></li><li><a href="https://github.com/byt3bl33d3r/MITMf" target="_blank" rel="external">https://github.com/byt3bl33d3r/MITMf</a></li></ul></li><li><strong>Inject code, jam wifi, and spy on wifi users</strong><ul><li><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="external">https://github.com/DanMcInerney/LANs.py</a></li></ul></li><li><strong>可扩展的中间人代理工具</strong><ul><li><a href="https://github.com/intrepidusgroup/mallory" target="_blank" rel="external">https://github.com/intrepidusgroup/mallory</a></li></ul></li><li><strong>wifi钓鱼</strong><ul><li><a href="https://github.com/sophron/wifiphisher" target="_blank" rel="external">https://github.com/sophron/wifiphisher</a></li></ul></li></ul><h3 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h3><ul><li><strong>密码破解工具</strong><ul><li><a href="https://github.com/shinnok/johnny" target="_blank" rel="external">https://github.com/shinnok/johnny</a></li></ul></li><li><strong>本地存储的各类密码提取利器</strong><ul><li><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="external">https://github.com/AlessandroZ/LaZagne</a></li></ul></li></ul><h3 id="二进制及代码分析工具"><a href="#二进制及代码分析工具" class="headerlink" title="二进制及代码分析工具"></a>二进制及代码分析工具</h3><ul><li><strong>二进制分析工具</strong><ul><li><a href="https://github.com/devttys0/binwalk" target="_blank" rel="external">https://github.com/devttys0/binwalk</a></li></ul></li><li><strong>系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息</strong><ul><li><a href="https://github.com/quarkslab/binmap" target="_blank" rel="external">https://github.com/quarkslab/binmap</a></li></ul></li><li><strong>rp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn’t support the FAT binaries) x86/x64 binaries.</strong><ul><li><a href="https://github.com/0vercl0k/rp" target="_blank" rel="external">https://github.com/0vercl0k/rp</a></li></ul></li><li><strong>Windows Exploit Development工具</strong><ul><li><a href="https://github.com/lillypad/badger" target="_blank" rel="external">https://github.com/lillypad/badger</a></li></ul></li><li><strong>二进制静态分析工具（python）</strong><ul><li><a href="https://github.com/bdcht/amoco" target="_blank" rel="external">https://github.com/bdcht/amoco</a></li></ul></li><li><strong>Python Exploit Development Assistance for GDB</strong><ul><li><a href="https://github.com/longld/peda" target="_blank" rel="external">https://github.com/longld/peda</a></li></ul></li><li><strong>对BillGates Linux Botnet系木马活动的监控工具</strong><ul><li><a href="https://github.com/ValdikSS/billgates-botnet-tracker" target="_blank" rel="external">https://github.com/ValdikSS/billgates-botnet-tracker</a></li></ul></li><li><strong>木马配置参数提取工具</strong><ul><li><a href="https://github.com/kevthehermit/RATDecoders" target="_blank" rel="external">https://github.com/kevthehermit/RATDecoders</a></li></ul></li><li><strong>Shellphish编写的二进制分析工具（CTF向）</strong><ul><li><a href="https://github.com/angr/angr" target="_blank" rel="external">https://github.com/angr/angr</a></li></ul></li><li><strong>针对python的静态代码分析工具</strong><ul><li><a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="external">https://github.com/yinwang0/pysonar2</a></li></ul></li><li><strong>一个自动化的脚本（shell）分析工具，用来给出警告和建议</strong><ul><li><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="external">https://github.com/koalaman/shellcheck</a></li></ul></li><li><strong>基于AST变换的简易Javascript反混淆辅助工具</strong><ul><li><a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="external">https://github.com/ChiChou/etacsufbo</a></li></ul></li></ul><h3 id="EXP编写框架及工具"><a href="#EXP编写框架及工具" class="headerlink" title="EXP编写框架及工具"></a>EXP编写框架及工具</h3><ul><li><strong>二进制EXP编写工具</strong><ul><li><a href="https://github.com/t00sh/rop-tool" target="_blank" rel="external">https://github.com/t00sh/rop-tool</a></li></ul></li><li><strong>CTF Pwn 类题目脚本编写框架</strong><ul><li><a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="external">https://github.com/Gallopsled/pwntools</a></li></ul></li><li><strong>an easy-to-use io library for pwning development</strong><ul><li><a href="https://github.com/zTrix/zio" target="_blank" rel="external">https://github.com/zTrix/zio</a></li></ul></li><li><strong>跨平台注入工具（ Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android.）</strong><ul><li><a href="https://github.com/frida/frida" target="_blank" rel="external">https://github.com/frida/frida</a></li></ul></li></ul><h3 id="隐写"><a href="#隐写" class="headerlink" title="隐写"></a>隐写</h3><ul><li><strong>隐写检测工具</strong><ul><li><a href="https://github.com/abeluck/stegdetect" target="_blank" rel="external">https://github.com/abeluck/stegdetect</a></li></ul></li></ul><h3 id="各类安全资料"><a href="#各类安全资料" class="headerlink" title="各类安全资料"></a>各类安全资料</h3><ul><li><strong>域渗透教程</strong><ul><li><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="external">https://github.com/l3m0n/pentest_study</a></li></ul></li><li><strong>python security教程（原文链接<a href="http://www.primalsecurity.net/tutorials/python-tutorials/）" target="_blank" rel="external">http://www.primalsecurity.net/tutorials/python-tutorials/）</a></strong><ul><li><a href="https://github.com/smartFlash/pySecurity" target="_blank" rel="external">https://github.com/smartFlash/pySecurity</a></li></ul></li><li><strong>data_hacking合集</strong><ul><li><a href="https://github.com/ClickSecurity/data_hacking" target="_blank" rel="external">https://github.com/ClickSecurity/data_hacking</a></li></ul></li><li><strong>mobile-security-wiki</strong><ul><li><a href="https://github.com/exploitprotocol/mobile-security-wiki" target="_blank" rel="external">https://github.com/exploitprotocol/mobile-security-wiki</a></li></ul></li><li><strong>书籍《reverse-engineering-for-beginners》</strong><ul><li><a href="https://github.com/veficos/reverse-engineering-for-beginners" target="_blank" rel="external">https://github.com/veficos/reverse-engineering-for-beginners</a></li></ul></li><li><strong>一些信息安全标准及设备配置</strong><ul><li><a href="https://github.com/luyg24/IT_security" target="_blank" rel="external">https://github.com/luyg24/IT_security</a></li></ul></li><li><strong>APT相关笔记</strong><ul><li><a href="https://github.com/kbandla/APTnotes" target="_blank" rel="external">https://github.com/kbandla/APTnotes</a></li></ul></li><li><strong>Kcon资料</strong><ul><li><a href="https://github.com/knownsec/KCon" target="_blank" rel="external">https://github.com/knownsec/KCon</a></li></ul></li><li><strong>ctf及黑客资源合集</strong><ul><li><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources" target="_blank" rel="external">https://github.com/bt3gl/My-Gray-Hacker-Resources</a></li></ul></li><li><strong>ctf和安全工具大合集</strong><ul><li><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="external">https://github.com/zardus/ctf-tools</a></li></ul></li><li><strong>《DO NOT FUCK WITH A HACKER》</strong><ul><li><a href="https://github.com/citypw/DNFWAH" target="_blank" rel="external">https://github.com/citypw/DNFWAH</a></li></ul></li></ul><h3 id="各类CTF资源"><a href="#各类CTF资源" class="headerlink" title="各类CTF资源"></a>各类CTF资源</h3><ul><li><strong>近年ctf writeup大全</strong><ul><li><a href="https://github.com/ctfs/write-ups-2016" target="_blank" rel="external">https://github.com/ctfs/write-ups-2016</a></li><li><a href="https://github.com/ctfs/write-ups-2015" target="_blank" rel="external">https://github.com/ctfs/write-ups-2015</a></li><li><a href="https://github.com/ctfs/write-ups-2014" target="_blank" rel="external">https://github.com/ctfs/write-ups-2014</a></li></ul></li><li><strong>fbctf竞赛平台Demo</strong><ul><li><a href="https://github.com/facebook/fbctf" target="_blank" rel="external">https://github.com/facebook/fbctf</a></li></ul></li><li><strong>ctf Resources</strong><ul><li><a href="https://github.com/ctfs/resources" target="_blank" rel="external">https://github.com/ctfs/resources</a></li></ul></li></ul><h3 id="各类编程资源"><a href="#各类编程资源" class="headerlink" title="各类编程资源"></a>各类编程资源</h3><ul><li><strong>大礼包（什么都有）</strong><ul><li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="external">https://github.com/bayandin/awesome-awesomeness</a></li></ul></li><li><strong>bash-handbook</strong><ul><li><a href="https://github.com/denysdovhan/bash-handbook" target="_blank" rel="external">https://github.com/denysdovhan/bash-handbook</a></li></ul></li><li><strong>python资源大全</strong><ul><li><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="external">https://github.com/jobbole/awesome-python-cn</a></li></ul></li><li><strong>git学习资料</strong><ul><li><a href="https://github.com/xirong/my-git" target="_blank" rel="external">https://github.com/xirong/my-git</a></li></ul></li><li><strong>安卓开源代码解析</strong><ul><li><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="external">https://github.com/android-cn/android-open-project-analysis</a></li></ul></li><li><strong>python框架，库，资源大合集</strong><ul><li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">https://github.com/vinta/awesome-python</a></li></ul></li><li><strong>JS 正则表达式库（用于简化构造复杂的JS正则表达式）</strong></li><li><a href="https://github.com/VerbalExpressions/JSVerbalExpressions" target="_blank" rel="external">https://github.com/VerbalExpressions/JSVerbalExpressions</a></li></ul><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><strong>python 正则表达式库（用于简化构造复杂的python正则表达式）</strong><ul><li><a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" target="_blank" rel="external">https://github.com/VerbalExpressions/PythonVerbalExpressions</a></li></ul></li><li><strong>python任务管理以及命令执行库</strong><ul><li><a href="https://github.com/pyinvoke/invoke" target="_blank" rel="external">https://github.com/pyinvoke/invoke</a></li></ul></li><li><strong>python exe打包库</strong><ul><li><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="external">https://github.com/pyinstaller/pyinstaller</a></li></ul></li><li><strong>py3 爬虫框架</strong><ul><li><a href="https://github.com/orf/cyborg" target="_blank" rel="external">https://github.com/orf/cyborg</a></li></ul></li><li><strong>一个提供底层接口数据包编程和网络协议支持的python库</strong><ul><li><a href="https://github.com/CoreSecurity/impacket" target="_blank" rel="external">https://github.com/CoreSecurity/impacket</a></li></ul></li><li><strong>python requests 库</strong><ul><li><a href="https://github.com/kennethreitz/requests" target="_blank" rel="external">https://github.com/kennethreitz/requests</a></li></ul></li><li><strong>python 实用工具合集</strong><ul><li><a href="https://github.com/mahmoud/boltons" target="_blank" rel="external">https://github.com/mahmoud/boltons</a></li></ul></li><li><strong>python爬虫系统</strong><ul><li><a href="https://github.com/binux/pyspider" target="_blank" rel="external">https://github.com/binux/pyspider</a></li></ul></li><li><strong>ctf向 python工具包</strong><ul><li><a href="https://github.com/P1kachu/v0lt" target="_blank" rel="external">https://github.com/P1kachu/v0lt</a></li></ul></li></ul><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><ul><li><strong>科学上网工具</strong><ul><li><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="external">https://github.com/XX-net/XX-Net</a></li></ul></li></ul><h3 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h3><ul><li><strong>微信自动抢红包动态库</strong><ul><li><a href="https://github.com/east520/AutoGetRedEnv" target="_blank" rel="external">https://github.com/east520/AutoGetRedEnv</a></li></ul></li><li><strong>微信抢红包插件（安卓版）</strong><ul><li><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney" target="_blank" rel="external">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a></li></ul></li><li><strong>神器</strong><ul><li><a href="https://github.com/yangyangwithgnu/hardseed" target="_blank" rel="external">https://github.com/yangyangwithgnu/hardseed</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自：&lt;a href=&quot;http://www.uedbox.com/github-security-repo-collection/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.uedbox.com/github-security-
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>AMD与CMD</title>
    <link href="http://yoursite.com/2017/02/10/AMD%E4%B8%8ECMD/"/>
    <id>http://yoursite.com/2017/02/10/AMD与CMD/</id>
    <published>2017-02-10T10:45:31.000Z</published>
    <updated>2017-11-07T14:17:08.406Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://link.zhihu.com/?target=https%3A//github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD 规范</a><br><a href="https://link.zhihu.com/?target=https%3A//github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD 规范</a></p><p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>类似的还有 CommonJS Modules/2.0 规范，是 BravoJS 在推广过程中对模块定义的规范化产出。<br>还有不少</p><p>这些规范的目的都是为了 JavaScript 的模块化开发，特别是在浏览器端的。<br>目前这些规范的实现都能达成浏览器端模块化开发的目的。</p><h3 id="相同之处"><a href="#相同之处" class="headerlink" title="相同之处"></a>相同之处</h3><p>RequireJS 和 Sea.js 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。</p><h3 id="不同之处"><a href="#不同之处" class="headerlink" title="不同之处"></a>不同之处</h3><p>两者的主要区别如下：</p><ul><li>定位有差异。RequireJS 想成为浏览器端的模块加载器，同时也想成为 Rhino / Node 等环境的模块加载器。Sea.js 则专注于 Web 浏览器端，同时通过 Node 扩展的方式可以很方便跑在 Node 环境中。</li><li>遵循的规范不同。RequireJS 遵循 AMD（异步模块定义）规范，Sea.js 遵循 CMD （通用模块定义）规范。规范的不同，导致了两者 API 不同。Sea.js 更贴近 CommonJS Modules/1.1 和 Node Modules 规范。</li><li>推广理念有差异。RequireJS 在尝试让第三方类库修改自身来支持 RequireJS，目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。</li><li>对开发调试的支持有差异。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持。</li><li>插件机制不同。RequireJS 采取的是在源码中预留接口的形式，插件类型比较单一。Sea.js 采取的是通用事件机制，插件类型更丰富。</li><li>执行模块的机制大不一样，SeaJS对模块的态度是懒执行, 而RequireJS对模块的态度是预执行<br>还有不少差异，涉及具体使用方式和源码实现，欢迎有兴趣者研究并发表看法。</li></ul><p>总之，如果说 RequireJS 是 Prototype 类库的话，则 Sea.js 致力于成为 jQuery 类库。</p><ul><li>CMD推崇依赖就近，可以把依赖写进你的代码中的任意一行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</div><div class="line">  a.doSomething()</div><div class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>)</div><div class="line">  b.doSomething()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul><p>代码在运行时，首先是不知道依赖的，需要遍历所有的require关键字，找出后面的依赖。具体做法是将function toString后，用正则匹配出require关键字后面的依赖。显然，这是一种牺牲性能来换取更多开发便利的方法。</p><ul><li>而AMD是依赖前置的，换句话说，在解析和执行当前模块之前，模块作者必须指明当前模块所依赖的模块<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'./a'</span>,<span class="string">'./b'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">   a.doSomething()</div><div class="line">   b.doSomething()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul><p>代码在一旦运行到此处，能立即知晓依赖。而无需遍历整个函数体找到它的依赖，因此性能有所提升，缺点就是开发者必须显式得指明依赖——这会使得开发工作量变大，比如：当你写到函数体内部几百上千行的时候，忽然发现需要增加一个依赖，你不得不回到函数顶端来将这个依赖添加进数组。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>至此可以对由commonJS衍生出来的方案做出总结了。在浏览器端来设计模块加载机制，需要考虑依赖的问题。<br>我们先把依赖分为两种，“强依赖” —— 肯定需要 和“弱依赖” —— 可能需要。<br>对于强依赖，如果要性能优先，则考虑参照依赖前置的思想设计你的模块加载器，我个人也更推崇这个方案一些；如果考虑开发成本优先，则考虑按照依赖就近的思想设计你的模块加载器。<br>对于弱依赖，只需要将弱依赖的部分改写到回调函数内即可。<br>如果现在我要实现一个模块加载器，我会将强依赖前置，弱依赖采用异步回调函数的形式，其它的方法我认为都只是语法糖而已，仅此就够了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/amdjs/amdjs-api/wiki/AMD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AMD 规范&lt;/a&gt;&lt;br&gt;&lt;a hr
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署到Github完整步骤</title>
    <link href="http://yoursite.com/2017/01/17/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2017/01/17/Hexo部署到Github完整步骤/</id>
    <published>2017-01-17T09:53:50.000Z</published>
    <updated>2017-11-06T14:50:28.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><a href="https://nodejs.org/en/" target="_blank">安装Node.js</a></li><li><a href="https://git-scm.com/" target="_blank">安装Git官网</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank">安装Hexo</a></li><li><a href="https://github.com/" target="_blank">注册Github账户</a></li></ol><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li>创建一个文件夹  <code>CD</code>  到当前目录</li><li><p>安装hexo到该文件夹。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g hexo</div></pre></td></tr></table></figure></li><li><p>安装完成后，将会看到如下目录结构<br><img src="http://img.blog.csdn.net/20171018203605199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="hexo目录结构"></p></li><li><p>测试是否安装成功，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure></li><li><p>打开页面 </p><pre><code>http://localhost:4000</code></pre></li></ol><h3 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h3><ol><li>登录Github，选择New repositor<br><img src="http://img.blog.csdn.net/20171018204044621?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Github"></li><li>填写Repositor 名`你的Github名称.github.io <strong>（注意！前缀必须是你的Github名称）</strong><br><img src="http://img.blog.csdn.net/20171018204401956?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ol><h3 id="创建SSH"><a href="#创建SSH" class="headerlink" title="创建SSH"></a>创建SSH</h3><ol><li>打开<strong>git-bash.exe</strong>，配置Github账户信息</li><li><p>在gitbash执行如下命令：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;你的电子邮箱&quot;</div></pre></td></tr></table></figure><p>接下来会提示你输入一个文件名来保存你的SSH key ，如果不输入直接回车，则会保存在默认的文件里<br>然后会提示你输入passphrases 会要求你输入两次密码</p></li><li>找到id_rsa.pub文件打开依次：<code>Ctrl+A</code>  <code>Ctrl+C</code> 复制信息</li></ol><h3 id="Github-添加-SSH"><a href="#Github-添加-SSH" class="headerlink" title="Github 添加 SSH"></a>Github 添加 SSH</h3><ol><li>点击<strong>Settings</strong><br><img src="http://img.blog.csdn.net/20171018205844760?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>依次点击左侧<strong>SSH and GPG keys</strong> 右侧 <strong>New SSH key</strong><br><img src="http://img.blog.csdn.net/20171018205805406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>Title随便填写，把刚才<strong>id_rsa.pub</strong>文件复制的信息粘贴到<strong>key</strong>中，然后点击<strong>Add SSH key</strong></li><li>在<strong>gitbash</strong>中验证是否添加成功，执行如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></li></ol><h3 id="配置Bolog"><a href="#配置Bolog" class="headerlink" title="配置Bolog"></a>配置Bolog</h3><ol><li>打开你博客文件夹找到<strong>_config.yml</strong>文件并打开</li><li>在最下面添加<div class="note default"><p>deploy:<br>type: git<br>      repo: git@github.com:hanx0610/hanx0610.github.io<br>      branch: master</p></div>（注意分号后有个空格）</li></ol><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><ol><li><p>安装组件，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></li><li><p>回到gitbash中，进入你的blog目录，分别依次执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>会提示你输入密码</p></li><li>打开页面<pre><code>http://Github用户名.github.io</code></pre></li></ol><h3 id="绑定到个人域名"><a href="#绑定到个人域名" class="headerlink" title="绑定到个人域名"></a>绑定到个人域名</h3><ol><li><p>执行如下命令得到 <code>IP</code> 地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ping http://Github用户名.github.io</div></pre></td></tr></table></figure></li><li><p>注册购买域名</p></li><li>解析DNS，<br> 添加解析记录 A (记录值为<code>IP</code>)<br> 添加解析记录 CNAME (记录值为<code>Github用户名.github.io</code>)<br><img src="http://img.blog.csdn.net/20171021215158539?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>打开博客文件夹下source目录创建一个txt文件写入你的域名，命名CNAME，保存<strong>去掉文件后缀名</strong><br> <img src="http://img.blog.csdn.net/20171021215116416?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;安装Node.
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用estools辅助反混淆Javascript</title>
    <link href="http://yoursite.com/2017/01/06/%E4%BD%BF%E7%94%A8estools%E8%BE%85%E5%8A%A9%E5%8F%8D%E6%B7%B7%E6%B7%86Javascript/"/>
    <id>http://yoursite.com/2017/01/06/使用estools辅助反混淆Javascript/</id>
    <published>2017-01-06T05:14:22.000Z</published>
    <updated>2017-10-24T14:21:18.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Javascript 作为一种运行在客户端的脚本语言，其源代码对用户来说是完全可见的。但不是每一个 js 开发者都希望自己的代码能被直接阅读，比如恶意软件的制造者们。为了增加代码分析的难度，混淆（obfuscate）工具被应用到了许多恶意软件（如 0day 挂马、跨站攻击等）当中。分析人员为了掀开恶意软件的面纱，首先就得对脚本进行反混淆（deobfuscate）处理。<br>本文将介绍一些常见的混淆手段和 estools 进行静态代码分析的入门。</p><h3 id="常见混淆手段"><a href="#常见混淆手段" class="headerlink" title="常见混淆手段"></a>常见混淆手段</h3><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>这类混淆的关键思想在于将需要执行的代码进行一次编码，在执行的时候还原出浏览器可执行的合法的脚本，然后执行之。看上去和可执行文件的加壳有那么点类似。Javascript 提供了将字符串当做代码执行（evaluate）的能力，可以通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="external">Function 构造器</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="external">eval</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="external">setTimeout</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setInterval" target="_blank" rel="external">setInterval&nbsp;</a>将字符串传递给 js 引擎进行解析执行。最常见的是 <a href="http://dean.edwards.name/packer/" target="_blank" rel="external">base62 编码</a>——其最明显的特征是生成的代码以<code>eval(function(p,a,c,k,e,r))</code> 开头。</p><p><img src="/img/1-base62-1024x281.png" alt="hexo目录结构"></p><p>无论代码如何进行变形，其最终都要调用一次 eval 等函数。解密的方法不需要对其算法做任何分析，只需要简单地找到这个最终的调用，改为 <code>console.log</code> 或者其他方式，将程序解码后的结果按照字符串输出即可。自动化的实现方式已经有许多文章介绍过，此处就不再赘述。</p><h4 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h4><p>严格说这不能称之为混淆，只是将 js 代码隐藏到了特定的介质当中。如通过最低有效位（LSB）算法嵌入到图片的 RGB 通道、隐藏在图片 EXIF 元数据、隐藏在 HTML 空白字符等。</p><p>比如这个耸人听闻的议题：<a href="http://www.freebuf.com/news/69106.html" target="_blank" rel="external">一张图片黑掉你</a>：在图片中嵌入恶意程序，PPT（ <a href="https://conference.hitb.org/hitbsecconf2015ams/wp-content/uploads/2015/02/D1T1-Saumil-Shah-Stegosploit-Hacking-with-Pictures.pdf" target="_blank" rel="external">https://conference.hitb.org/hitbsecconf2015ams/wp-content/uploads/2015/02/D1T1-Saumil-Shah-Stegosploit-Hacking-with-Pictures.pdf</a> ）放出来一看，正是使用了最低有效位平面算法。结合 HTML5 的 canvas 或者处理二进制数据的 TypeArray，脚本可以抽取出载体中隐藏的数据（如代码）。<br><img src="/img/2-lsb-steg.png" alt="hexo目录结构"><br>隐写的方式同样需要解码程序和动态执行，所以破解的方式和前者相同，在浏览器上下文中劫持替换关键函数调用的行为，改为文本输出即可得到载体中隐藏的代码。</p><h4 id="复杂化表达式"><a href="#复杂化表达式" class="headerlink" title="复杂化表达式"></a>复杂化表达式</h4><p>代码混淆不一定会调用 eval，也可以通过在代码中填充无效的指令来增加代码复杂度，极大地降低可读性。Javascript 中存在许多称得上丧心病狂的特性，这些特性组合起来，可以把原本简单的字面量（Literal）、成员访问（MemberExpression）、函数调用（CallExpression）等代码片段变得难以阅读。<br>Js 中的字面量有字符串、数字、正则表达式</p><p>下面简单举一个例子:</p><ol><li>访问一个对象的成员有两种方法——点运算符和下标运算符。调用 window 的 eval 方法，既可以写成 <code>window.eval()</code>，也可以 <code>window[&#39;eval&#39;]</code>；</li><li>为了让代码更变态一些，混淆器选用第二种写法，然后再在字符串字面量上做文章。先把字符串拆成几个部分：<code>&#39;e&#39; + &#39;v&#39; + &#39;al&#39;</code>；</li><li>这样看上去还是很明显，再利用一个数字进制转换的技巧：<code>14..toString(15)+31..toString(32)+0xf1.toString(22)</code>；</li><li>一不做二不休，把数字也展开：<code>(0b1110).toString(4&lt;&lt;2)+(&#39; &#39;.charCodeAt() - 1).toString(Math.log(0x100000000) / Math.log(2)) + 0xf1.toString(11 &lt;&lt; 1)</code>；</li><li>最后的效果：<code>window[(2*7).toString(4&lt;&lt;2)+(&#39; &#39;.charCodeAt() - 1).toString(Math.log(0x100000000) / Math.log(2)) + 0xf1.toString(11 &lt;&lt; 1)](&#39;alert(1)&#39;)</code><br>在 js 中可以找到许多这样互逆的运算，通过使用随机生成的方式将其组合使用，可以把简单的表达式无限复杂化。</li></ol><h3 id="静态分析实现"><a href="#静态分析实现" class="headerlink" title="静态分析实现"></a>静态分析实现</h3><h4 id="解析和变换代码"><a href="#解析和变换代码" class="headerlink" title="解析和变换代码"></a>解析和变换代码</h4><p>本文对 Javascript 实现反混淆的思路是模拟执行代码中可预测结果的部分，编写一个简单的脚本执行引擎，只执行符合某些预定规则的代码块，最后将计算结果替换掉原本冗长的代码，实现表达式的简化。</p><p>果对脚本引擎解释器的原理有初步了解的话，可以知道解释器在为了“读懂”代码，会对源代码进行词法分析、语法分析，将代码的字符串转换为抽象语法树（ <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="external">Abstract Syntax Tree</a>, AST）的数据形式。</p><p>如这段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addA</span>(<span class="params">d</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> a + d;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = addA(<span class="number">2</span>) + b;</div></pre></td></tr></table></figure></p><p>对应的语法树如图：<br><img src="/img/3-ast-1024x491.png" alt="hexo目录结构"><br>（由 <a href="http://jointjs.com/demos/javascript-ast" target="_blank" rel="external">JointJS</a> 的在线工具生成）<br>不考虑 JIT 技术，解释器可以从语法树的根节点开始，使用深度优先遍历整棵树的所有节点，根据节点上分析出来的指令逐个执行，直到脚本结束返回结果。</p><p>通过 js 代码生成抽象语法树的工具很多，如压缩器 <a href="https://github.com/mishoo/UglifyJS" target="_blank" rel="external">UglifyJS</a> 带的 parser，还有本文使用的 <a href="http://esprima.org/" target="_blank" rel="external">esprima</a>。</p><p>esprima 提供的接口很简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ast = <span class="built_in">require</span>(<span class="string">'esprima'</span>).parse(code)</div></pre></td></tr></table></figure></p><p>另外 Esprima 提供了一个在线工具，可以把任意（合法的）Javascript 代码解析成为 AST 并输出：<a href="http://esprima.org/demo/parse.html" target="_blank" rel="external">http://esprima.org/demo/parse.html</a></p><p>再结合 estools 的几个辅助库即可对 js 进行静态代码分析：</p><ul><li><a href="https://github.com/estools/escope" target="_blank" rel="external">escope</a> Javascript 作用域分析工具</li><li><a href="https://github.com/estools/esutils" target="_blank" rel="external">esutil</a> 辅助函数库，检查语法树节点是否满足某些条件</li><li><a href="http://github.com/estools/estraverse" target="_blank" rel="external">estraverse</a> 语法树遍历辅助库，接口有一点类似 SAX 方式解析 XML</li><li><a href="http://github.com/estools/esrecurse" target="_blank" rel="external">esrecurse</a> 另一个语法树遍历工具，使用递归</li><li><a href="https://github.com/estools/esquery" target="_blank" rel="external">esquery</a> 使用 css 选择器的语法从语法树中提取符合条件的节点</li><li><a href="http://github.com/estools/escodegen" target="_blank" rel="external">escodegen</a> 与 esprima 功能互逆，将语法树还原为代码</li></ul><p>项目中使用的遍历工具是 estraverse。其提供了两个静态方法，<code>estraverse.traverse</code> 和 <code>estraverse.replace</code>。前者单纯遍历 AST 的节点，通过返回值控制是否继续遍历到叶子节点；而 replace 方法则可以在遍历的过程中直接修改 AST，实现代码重构功能。具体的用法可以参考其官方文档，或者本文附带的示例代码。</p><h4 id="规则设计"><a href="#规则设计" class="headerlink" title="规则设计"></a>规则设计</h4><p>从实际遇到的代码入手。最近在研究一些 XSS 蠕虫的时候遇到了类似如下代码混淆：<br><img src="/img/4-obfuscated-js.png" alt="hexo目录结构"></p><p>观察其代码风格，发现这个混淆器做了这几件事：</p><ol><li>字符串字面量混淆：首先提取全部的字符串，在全局作用域创建一个字符串数组，同时转义字符增大阅读难度，然后将字符串出现的地方替换成为数组元素的引用</li><li>变量名混淆：不同于压缩器的缩短命名，此处使用了下划线加数字的格式，变量之间区分度很低，相比单个字母更难以阅读</li><li>成员运算符混淆：将点运算符替换为字符串下标形式，然后对字符串进行混淆</li><li>删除多余的空白字符：减小文件体积，这是所有压缩器都会做的事</li></ol><p>经过搜索，这样的代码很有可能是通过<a href="http://javascriptobfuscator.com/Javascript-Obfuscator.aspx" target="_blank" rel="external">javascriptobfuscator.com</a>的免费版生成的。其中免费版可以使用的三个选项（Encode Strings / Strings / Replace Names）也印证了前面观察到的现象。</p><p>这些变换中，变量名混淆是不可逆的。要是可以智能给变量命名的工具也不错，比如这个 <a href="http://jsnice.org/" target="_blank" rel="external">jsnice</a> 网站提供了一个在线工具，可以分析变量具体作用自动重命名。就算不能做到十全十美，实在不行就用人工的方式，使用 IDE（如 WebStorm）的代码重构功能，结合代码行为分析进行手工重命名还原。</p><p>再看字符串的处理。由于字符串将会被提取到一个全局的数组，在语法树中可以观察到这样的特征： 在全局作用域下，出现一个 VariableDeclarator，其 init 属性为 ArrayExpression，而且所有元素都是 Literal ——这说明这个数组所有元素都是常量。简单地将其求值，与变量名（标识符）关联起来。注意，此处为了简化处理，并没有考虑变量名作用域链的问题。在 js 中，作用域链上存在变量名的优先级，比如全局上的变量名是可以被局部变量重新定义的。如果混淆器再变态一点，在不同的作用域上使用相同的变量名，反混淆器又没有处理作用域的情况，将会导致解出来的代码出错。</p><p>在测试程序中我设置了如下的替换规则：</p><ol><li>全局变量声明的字符串数组，在代码中直接使用数字下标引用其值</li><li>结果确定的一连串二元运算，如 <code>1 * 2 + 3 / 4 - 6 % 5</code></li><li>正则表达式字面量的 source，字符串字面量的 length</li><li>完全由字符串常量组成的数组，其 join / reverse / slice 等方法的返回值</li><li>字符串常量的 substr / charAt 等方法的返回值</li><li>decodeURIComponent 等全局函数，其所有参数为常量的，替换为其返回值</li><li>结果为常数的数学函数调用，如 <code>Math.sin(3.14)</code></li></ol><p>至于缩进的还原，这是 escodegen 自带的功能。在调用 <code>escodegen.generate</code> 方法生成代码的时候使用默认的配置（忽略第二个参数）即可。</p><h3 id="DEMO程序"><a href="#DEMO程序" class="headerlink" title="DEMO程序"></a>DEMO程序</h3><p>这个反混淆器的原型放在 GitHub 上：<a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="external">https://github.com/ChiChou/etacsufbo</a></p><p>运行环境和使用方法参考仓库的 README。</p><p>从<a href="http://youmightnotneedjquery.com/" target="_blank" rel="external">YOU MIGHT NOT NEED JQUERY</a>上摘抄了一段代码，放入<a href="https://javascriptobfuscator.com/Javascript-Obfuscator.aspx" target="_blank" rel="external">javascriptobfuscator.com</a>测试混淆：<br><img src="/img/5-online-obfuscate-1024x266.png" alt="hexo目录结构"><br>将混淆结果（ <a href="https://github.com/ChiChou/etacsufbo/blob/master/tests/cases/jsobfuscator.com.js" target="_blank" rel="external">https://github.com/ChiChou/etacsufbo/blob/master/tests/cases/jsobfuscator.com.js</a> ）进行解开，结果如下：<br><img src="/img/6-deobfuscated.png" alt="hexo目录结构"><br>虽然变量名可读性依旧很差，但已经可以大体看出代码的行为了。</p><p>演示程序目前存在大量局限性，只能算一个半自动的辅助工具，还有许多没有实现的功能。</p><p>一些混淆器会对字符串字面量进行更复杂的保护，将字符串转换为 f(x) 的形式，其中 f 函数为一个解密函数，参数 x 为密文的字符串。也有原地生成一个匿名函数，返回值为字符串的。这种方式通常使用的函数表达式具有上下文无关的特性——其返回值只与函数的输入有关，与当前代码所处的上下文（比如类的成员、DOM 中取到的值）无关。如以下代码片段中的 xor 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xor = <span class="function"><span class="keyword">function</span>(<span class="params">str, a, b</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, str.split(<span class="string">''</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">c, i</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> ascii = c.charCodeAt(<span class="number">0</span>);</div><div class="line"><span class="keyword">return</span> ascii ^ (i % <span class="number">2</span> ? a : b);</div><div class="line">&#125;));</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>如何判断某个函数是否具有这样的特性呢？<br>首先一些库函数可以确定符合，如 btoa，escape，String.fromCharCode 等，只要输入值是常量，返回值就是固定的。建立一个这样的内置函数白名单，接着遍历函数表达式的 AST，若该函数参与计算的参数均没有来自外部上下文，且其所有 CallExpression 的 callee 在函数白名单内，那么通过递归的方式可以确认一个函数是否满足条件。还有的混淆器会给变量创建大量的引用实例，也就是给同一个对象使用了多个别名，阅读起来非常具有干扰性。可以派出 escope 工具对变量标识符进行数据流分析，替换为所指向的正确值。还有利用数学的恒等式进行混淆的。如声明一个变量 a，若 a 为 Number，则表达式 <code>a-a</code>、<code>a * 0</code> 均恒为 0。但如果 a 满足 <code>isNaN(a)</code>，则表达式返回 <code>NaN</code>。要清理这类代码，同样需要借助数据流分析的方法。<br>目前还没有见到使用扁平化流程跳转实现的 js 混淆样本，笔者认为可能跟 js 语言本身的使用场景和特点有关。一般 js 的代都是偏业务型的，不会有太复杂的流程控制或者算法，混淆起来效果不一定理想。</p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>Javascript 的确是一门神奇的语言，经常可以遇到一些让人惊讶的奇技淫巧。解密保护过的代码也是有趣的事情。据说几大科技巨头在酝酿给浏览器应用设计一款通用的字节码标准——<a href="https://github.com/WebAssembly" target="_blank" rel="external">WebAssembly</a>。一旦这个设想得以实现，代码保护将可以引入真正意义上的“加壳”或者虚拟机保护，对抗技术又将提升到一个新的台阶。</p><p>演示项目代码托管在 GitHub：<a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="external">https://github.com/ChiChou/etacsufbo</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="http://tobyho.com/2013/12/02/fun-with-esprima/" target="_blank" rel="external">http://tobyho.com/2013/12/02/fun-with-esprima/</a></li><li><a href="https://github.com/estree/estree/blob/master/spec.md" target="_blank" rel="external">https://github.com/estree/estree/blob/master/spec.md</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API</a></li><li><a href="http://jointjs.com/demos/javascript-ast" target="_blank" rel="external">http://jointjs.com/demos/javascript-ast</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Javascript 作为一种运行在客户端的脚本语言，其源代码对用户来说是完全可见的。但不是每一个 js 开发者都希望自己的代码能被直接阅读
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常见设计模式</title>
    <link href="http://yoursite.com/2016/10/10/JavaScript%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/10/10/JavaScript常见设计模式/</id>
    <published>2016-10-10T10:20:20.000Z</published>
    <updated>2017-11-12T09:25:58.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS工厂模式"><a href="#JS工厂模式" class="headerlink" title="JS工厂模式"></a>JS工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> lev=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">       <span class="keyword">return</span> <span class="string">"啊打"</span>;  </div><div class="line">    &#125;;  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">           <span class="keyword">var</span>  Child = <span class="keyword">new</span> <span class="built_in">Object</span>();  </div><div class="line">           Child.name=<span class="string">"李小龙"</span>;  </div><div class="line">           Child.age=<span class="string">"30"</span>;  </div><div class="line">           Child.lev=lev;  </div><div class="line">         <span class="keyword">return</span> Child;  </div><div class="line">    &#125;;  </div><div class="line">      </div><div class="line">    <span class="keyword">var</span>  x = Parent();  </div><div class="line">    alert(x.name);  </div><div class="line">    alert(x.lev()); </div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">说明：</span></div><div class="line"><span class="string">1.在函数中定义对象,并定义对象的各种属性，,虽然属性可以为方法，但是建议将属性为方法的属性定义到函数之外，这样可以避免重复创建该方法</span></div><div class="line"><span class="string">2.引用该对象的时候，这里使用的是 var x = Parent()而不是 var x = new Parent();因为后者会可能出现很多问题（前者也成为工厂经典方式,后者称之为混合工厂方式），不推荐使用new的方式使用该对象</span></div><div class="line"><span class="string">3.在函数的最后返回该对象</span></div><div class="line"><span class="string">4.不推荐使用这种方式创建对象，但应该了解</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">### JS构造函数模式</span></div><div class="line"><span class="string">`</span><span class="string">``</span> JavaScript</div><div class="line"><span class="keyword">var</span> lev=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">   <span class="keyword">return</span> <span class="string">"啊打"</span>;  </div><div class="line">&#125;;  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">   <span class="keyword">this</span>.name=<span class="string">"李小龙"</span>;  </div><div class="line">   <span class="keyword">this</span>.age=<span class="string">"30"</span>;  </div><div class="line">   <span class="keyword">this</span>.lev=lev; </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="keyword">var</span>  x =<span class="keyword">new</span>  Parent();  </div><div class="line">alert(x.name);  </div><div class="line">alert(x.lev());</div></pre></td></tr></table></figure><p>说明：<br>1.与工厂方式相比，使用构造函数方式创建对象，无需再函数内部重建创建对象，而使用this指代，并而函数无需明确return<br>2.同工厂模式一样，虽然属性的值可以为方法，扔建议将该方法定义在函数之外<br>3.同样的，不推荐使用这种方式创建对象，但仍需要了解</p><h3 id="js原型模式"><a href="#js原型模式" class="headerlink" title="js原型模式"></a>js原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lev=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">   <span class="keyword">return</span> <span class="string">"啊打"</span>;  </div><div class="line">&#125;;  </div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;   &#125;;  </div><div class="line">     Parent.prototype.name=<span class="string">"李小龙"</span>;  </div><div class="line">     Parent.prototype.age=<span class="string">"30"</span>;  </div><div class="line">     Parent.prototype.lev=lev;  </div><div class="line">     </div><div class="line">   <span class="keyword">var</span>  x =<span class="keyword">new</span>  Parent();  </div><div class="line">   alert(x.name);  </div><div class="line">   alert(x.lev());</div></pre></td></tr></table></figure><p>1.函数中不对属性进行定义<br>2.利用prototype属性对属性进行定义<br>3.同样的，不推荐使用这样方式创建对象</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先申明一个奶茶妹对象</span></div><div class="line"><span class="keyword">var</span> TeaAndMilkGirl = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 这是京东ceo先生</span></div><div class="line"><span class="keyword">var</span> Ceo = <span class="function"><span class="keyword">function</span>(<span class="params">girl</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.girl = girl;</div><div class="line">    <span class="comment">// 送结婚礼物 给奶茶妹</span></div><div class="line">    <span class="keyword">this</span>.sendMarriageRing = <span class="function"><span class="keyword">function</span>(<span class="params">ring</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Hi "</span> + <span class="keyword">this</span>.girl.name + <span class="string">", ceo送你一个礼物："</span> + ring);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 京东ceo的经纪人是代理，来代替送</span></div><div class="line"><span class="keyword">var</span> ProxyObj = <span class="function"><span class="keyword">function</span>(<span class="params">girl</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.girl = girl;</div><div class="line">    <span class="comment">// 经纪人代理送礼物给奶茶妹</span></div><div class="line">    <span class="keyword">this</span>.sendGift = <span class="function"><span class="keyword">function</span>(<span class="params">gift</span>) </span>&#123;</div><div class="line">        <span class="comment">// 代理模式负责本体对象实例化</span></div><div class="line">        (<span class="keyword">new</span> Ceo(<span class="keyword">this</span>.girl)).sendMarriageRing(gift);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 初始化</span></div><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> ProxyObj(<span class="keyword">new</span> TeaAndMilkGirl(<span class="string">"奶茶妹"</span>));</div><div class="line">proxy.sendGift(<span class="string">"结婚戒"</span>); <span class="comment">// Hi 奶茶妹, ceo送你一个礼物：结婚戒</span></div></pre></td></tr></table></figure><p>代理是一个对象，它可以用来控制对本体对象的访问，它与本体对象实现了同样的接口，代理对象会把所有的调用方法传递给本体对象的；代理模式最基本的形式是对访问进行控制，而本体对象则负责执行所分派的那个对象的函数或者类，简单的来讲本地对象注重的去执行页面上的代码，代理则控制本地对象何时被实例化，何时被使用；我们在上面的单体模式中使用过一些代理模式，就是使用代理模式实现单体模式的实例化，其他的事情就交给本体对象去处理</p><p>1.代理对象可以代替本体被实例化，并使其可以被远程访问；<br>2.它还可以把本体实例化推迟到真正需要的时候；对于实例化比较费时的本体对象，或者因为尺寸比较大以至于不用时不适于保存在内存中的本体，我们可以推迟实例化该对象；</p><h3 id="模块模式"><a href="#模块模式" class="headerlink" title="模块模式"></a>模块模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"xin"</span>;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">22</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        getName: getName,</div><div class="line">        getAge: getAge</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 报错:age未定义</span></div><div class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 报错:name未定义</span></div><div class="line"><span class="built_in">console</span>.log(Person.age); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(Person.name); <span class="comment">// undefined</span></div><div class="line">只能通过Person提供的接口访问相应的变量</div><div class="line"><span class="built_in">console</span>.log(Person.getName()); <span class="comment">// xin</span></div><div class="line"><span class="built_in">console</span>.log(Person.getAge()); <span class="comment">// 22</span></div></pre></td></tr></table></figure><p>说明：<br>在立即执行函数表达式中定义的变量和方法在外界是访问不到的,只能通过其向外部提供的接口,”有限制”地访问.通过函数作用域解决了属性和方法的封装问题<br>模块模式的思路是为单体模式添加私有变量和私有方法能够减少全局变量的使用<br>如果我们必须创建一个对象并以某些数据进行初始化，同时还要公开一些能够访问这些私有数据的方法，那么我们这个时候就可以使用模块模式了。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> instance;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line"></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        getInstance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!instance)&#123;</div><div class="line">                instace = init();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> instance;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><h3 id="构造函数-原型的js混合的模式"><a href="#构造函数-原型的js混合的模式" class="headerlink" title="构造函数+原型的js混合的模式"></a>构造函数+原型的js混合的模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">     <span class="keyword">this</span>.name=<span class="string">"李小龙"</span>;  </div><div class="line">     <span class="keyword">this</span>.age=<span class="number">32</span>; </div><div class="line">   &#125;;</div><div class="line">   Parent.prototype.lev=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;  </div><div class="line">   &#125;;</div><div class="line">     </div><div class="line">   <span class="keyword">var</span>  x =<span class="keyword">new</span>  Parent();</div><div class="line">   alert(x.lev());</div></pre></td></tr></table></figure><p>说明：</p><p>1.该模式是指混合搭配使用构造函数方式和原型方式<br>2.将所有属性不是方法的属性定义在函数中（构造函数方式）将所有属性值为方法的属性利用prototype在函数之外定义（原型方式）<br>3.推荐使用这样方式创建对象,这样做有好处和为什么不单独使用构造函数方式和原型方式，由于篇幅问题这里不予讨论</p><h3 id="构造函数-原型的动态原型模式"><a href="#构造函数-原型的动态原型模式" class="headerlink" title="构造函数+原型的动态原型模式"></a>构造函数+原型的动态原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">     <span class="keyword">this</span>.name=<span class="string">"李小龙"</span>;  </div><div class="line">    <span class="keyword">this</span>.age=<span class="number">32</span>; </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> Parent._lev==<span class="string">"undefined"</span>)&#123;    </div><div class="line">        Parent.prototype.lev=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">                  <span class="keyword">return</span> <span class="keyword">this</span>.name;  </div><div class="line">        &#125;  </div><div class="line">        Parent._lev=<span class="literal">true</span>;  </div><div class="line">    &#125;  </div><div class="line">        </div><div class="line">   &#125;;   </div><div class="line">    </div><div class="line">   <span class="keyword">var</span>  x =<span class="keyword">new</span>  Parent(); </div><div class="line">   alert(x.lev());</div></pre></td></tr></table></figure><p>说明：</p><p>1.动态原型方式可以理解为混合构造函数，原型方式的一个特例<br>2.该模式中,属性为方法的属性直接在函数中进行了定义，但是因为</p><p>if(typeof Parent._lev==”undefined”){<br>           Parent._lev=true;<br>    }<br>从而保证创建该对象的实例时，属性的方法不会被重复创建</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS工厂模式&quot;&gt;&lt;a href=&quot;#JS工厂模式&quot; class=&quot;headerlink&quot; title=&quot;JS工厂模式&quot;&gt;&lt;/a&gt;JS工厂模式&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Cookie安全</title>
    <link href="http://yoursite.com/2016/07/20/Cookie%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2016/07/20/Cookie安全/</id>
    <published>2016-07-20T15:49:11.000Z</published>
    <updated>2017-11-07T14:53:34.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h3><p>该属性值的作用就是防止Cookie值被页面脚本读取。一个没有设置HttpOnly的Cookie：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setcookie(<span class="string">'name'</span>,<span class="string">'lf'</span>);</div></pre></td></tr></table></figure></p><p>这段代码就可能被攻击者用脚本来获取，所以我们应该为Cookie添加HttpOnly属性如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setcookie(<span class="string">'name'</span>,<span class="string">'lf'</span>);</div><div class="line">setcookie(<span class="string">'age'</span>,<span class="string">'23'</span>,NULL,NULL,NULL,NULL,TRUE);<span class="comment">//HttpOnly属性为true</span></div></pre></td></tr></table></figure><p>HttpOnly属性只是增加了攻击者的难度，不能达到完全防御XSS攻击。</p><h3 id="Secure"><a href="#Secure" class="headerlink" title="Secure"></a>Secure</h3><p>接下来要介绍的就是Secure属性了。给Cookie设置该属性时，只有在https协议下访问的时候，浏览器才会发送该Cookie。</p><p>还是刚才的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setcookie(<span class="string">'age'</span>,<span class="string">'23'</span>,NULL,NULL,NULL,NULL,TRUE);<span class="comment">//HttpOnly属性为true</span></div></pre></td></tr></table></figure></p><p>如果我们仅仅设置了HttpOnly属性，只能防止Cookie不被脚本获取，却不能防止Cookie被攻击者通过抓包来读取，如果加上了Secure属性，就算攻击者窃听网络，也无法获取用户明文Cookie了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setcookie(<span class="string">'gf'</span>,<span class="string">'tyq'</span>,Null,Null,Null,TRUE,Null);<span class="comment">//Secure属性为true</span></div></pre></td></tr></table></figure></p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>https下的cookie在传输过是安全的，但在客户端上是不安全的，使用客户端的有用户还有黑客<br>无论有没有使用SSL，Cookie值都一定要经过高强度难破解的加密算法进行处理。<br>所有的密文都要使用没有明显特征，不易被破解的算法进行加密处理，推荐使用AES加密算法（修正：加上与哈希结合</p><h3 id="有效期"><a href="#有效期" class="headerlink" title="有效期"></a>有效期</h3><p>最后来说说Cookie的有效期，刚才的代码并没有在服务器中设置强制超时时间，所以万一用户获取到用户的Cookie后，就可以一直使用用户身份登录。<br>我们在设置Cookie认证的时候，需要加入两个时间，一个是“即使一直在活动，也要失效”的时间，一个是“长时间不活动的失效时间”。并在Web应用中，首先判断两个时间是否已超时，再执行其他操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断会员的cookie是否过期</span></div><div class="line"><span class="keyword">if</span> (isLogin) &#123;</div><div class="line"><span class="built_in">String</span> timeStampStr = (<span class="built_in">String</span>) map.get(UserAuthenticationContext.TIMESTAMP);</div><div class="line">long loginTime = <span class="number">0</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">loginTime = Long.parseLong(timeStampStr);</div><div class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">logger.info(<span class="string">" loginId: "</span> + usr.getLoginId() + <span class="string">" timestamp has exception "</span> + timeStampStr);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">long now = System.currentTimeMillis() / <span class="number">1000</span>;</div><div class="line"><span class="keyword">if</span> (now - loginTime &gt; UserAuthenticationContext.COOKIE_VALIDITY) &#123;</div><div class="line">usr.setAuthenticated(<span class="literal">false</span>, <span class="literal">true</span>);</div><div class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">logger.info(<span class="string">"loginId: "</span> + usr.getLoginId() + <span class="string">" loginTime: "</span> + loginTime + <span class="string">" nowTime: "</span> + now);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HttpOnly&quot;&gt;&lt;a href=&quot;#HttpOnly&quot; class=&quot;headerlink&quot; title=&quot;HttpOnly&quot;&gt;&lt;/a&gt;HttpOnly&lt;/h3&gt;&lt;p&gt;该属性值的作用就是防止Cookie值被页面脚本读取。一个没有设置HttpOnly的Cooki
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6/ES2015核心内容</title>
    <link href="http://yoursite.com/2016/05/20/ES6%20ES2015%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9/"/>
    <id>http://yoursite.com/2016/05/20/ES6 ES2015核心内容/</id>
    <published>2016-05-20T14:00:00.000Z</published>
    <updated>2017-10-22T11:30:54.002Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。也就是说，ES6就是ES2015。<br>虽然目前并不是所有浏览器都能兼容ES6全部特性，但越来越多的程序员在实际项目当中已经开始使用ES6了。所以就算你现在不打算使用ES6，但为了看懂别人的你也该懂点ES6的语法了…</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>在我们正式讲解ES6语法之前，我们得先了解下Babel。 <a style="color:#09F" href="https://babeljs.io/" target="_blank" rel="external">Babel官网</a><br>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看</p><h3 id="let-const"><a href="#let-const" class="headerlink" title="let, const"></a>let, const</h3><p>这两个的用途与var类似，都是用来声明变量的，但在实际运用中他俩都有各自的特殊用途。<br>首先来看下面这个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'zach'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'obama'</span></div><div class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//obama</span></div><div class="line">    <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//obama</span></div></pre></td></tr></table></figure></p><p>使用var两次输出都是obama，这是因为ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。第一种场景就是你现在看到的内层变量覆盖外层变量。而let则实际上为JavaScript新增了块级作用域。用它所声明的变量，只在let命令所在的代码块内有效。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">'zach'</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">'obama'</span></div><div class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//obama</span></div><div class="line">    <span class="keyword">break</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//zach</span></div></pre></td></tr></table></figure></p><p>另外一个var带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></div></pre></td></tr></table></figure></p><p>上面代码中，变量i是var声明的，在全局范围内都有效。所以每一次循环，新的i值都会覆盖旧值，导致最后输出的是最后一轮的i的值。而使用let则不会出现这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure><p>再来看一个更常见的例子，了解下如果不用ES6，而用闭包如何解决这个问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clickBoxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.clickBox'</span>)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; clickBoxs.length; i++)&#123;</div><div class="line">    clickBoxs[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们本来希望的是点击不同的clickBox，显示不同的i，但事实是无论我们点击哪个clickBox，输出的都是5。下面我们来看下，如何用闭包搞定它。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iteratorFactory</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> onclick;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> clickBoxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.clickBox'</span>)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; clickBoxs.length; i++)&#123;</div><div class="line">    clickBoxs[i].onclick = iteratorFactory(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="built_in">Math</span>.PI</div><div class="line">PI = <span class="number">23</span> <span class="comment">//Module build failed: SyntaxError: /es6/app.js: "PI" is read-only</span></div></pre></td></tr></table></figure></p><p>当我们尝试去改变用const声明的常量时，浏览器就会报错。<br>const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> monent = <span class="built_in">require</span>(<span class="string">'moment'</span>)</div></pre></td></tr></table></figure></p><h3 id="class-extends-super"><a href="#class-extends-super" class="headerlink" title="class, extends, super"></a>class, extends, super</h3><p>这三个特性涉及了ES5中最令人头疼的的几个部分：原型、构造函数，继承…你还在为它们复杂难懂的语法而烦恼吗？你还在为指针到底指向哪里而纠结万分吗？</p><p>有了ES6我们不再烦恼！</p><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></div><div class="line">    &#125;</div><div class="line">    says(say)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal()</div><div class="line">animal.says(<span class="string">'hello'</span>) <span class="comment">//animal says hello</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="keyword">this</span>.type = <span class="string">'cat'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat()</div><div class="line">cat.says(<span class="string">'hello'</span>) <span class="comment">//cat says hello</span></div></pre></td></tr></table></figure></p><p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实力对象可以共享的。</p><p>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。</p><p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</p><p>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p><p>P.S 如果你写react的话，就会发现以上三个东西在最新版React中出现得很多。创建的每个component都是一个继承React.Component的类。详见react文档</p><h3 id="arrow-function"><a href="#arrow-function" class="headerlink" title="arrow function"></a>arrow function</h3><p>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; <span class="comment">//ES5</span></div><div class="line">(i) =&gt; i + <span class="number">1</span> <span class="comment">//ES6</span></div></pre></td></tr></table></figure></p><p>简直是简单的不像话对吧…<br>如果方程比较复杂，则需要用{}把代码包起来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; </div><div class="line">    x++;</div><div class="line">    y--;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">(x, y) =&gt; &#123;x++; y--; <span class="keyword">return</span> x+y&#125;</div></pre></td></tr></table></figure></p><p>除了看上去更简洁以外，arrow function还有一项超级无敌的功能！<br>长期以来，JavaScript语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></div><div class="line">    &#125;</div><div class="line">    says(say)&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</div><div class="line">animal.says(<span class="string">'hi'</span>)  <span class="comment">//undefined says hi</span></div></pre></td></tr></table></figure></p><p>运行上面的代码会报错，这是因为setTimeout中的this指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p><ol><li><p>第一种是将this传给self,再用self来指代this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">says(say)&#123;</div><div class="line"> <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(self.type + <span class="string">' says '</span> + say)</div><div class="line"> &#125;, <span class="number">1000</span>)</div></pre></td></tr></table></figure></li><li><p>第二种方法是用bind(this),即</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">says(say)&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(self.type + <span class="string">' says '</span> + say)</div><div class="line">    &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</div></pre></td></tr></table></figure><p>但现在我们有了箭头函数，就不需要这么麻烦了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></div><div class="line">    &#125;</div><div class="line">    says(say)&#123;</div><div class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</div><div class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//animal says hi</span></div></pre></td></tr></table></figure></li></ol><p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p><h3 id="template-string"><a href="#template-string" class="headerlink" title="template string"></a>template string</h3><p>这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如mustache等等。</p><p>大家可以先看下面一段代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#result"</span>).append(</div><div class="line">  <span class="string">"There are &lt;b&gt;"</span> + basket.count + <span class="string">"&lt;/b&gt; "</span> +</div><div class="line">  <span class="string">"items in your basket, "</span> +</div><div class="line">  <span class="string">"&lt;em&gt;"</span> + basket.onSale +</div><div class="line">  <span class="string">"&lt;/em&gt; are on sale!"</span></div><div class="line">);</div></pre></td></tr></table></figure></p><p>我们要用一堆的’+’号来连接文本与变量，而使用ES6的新特性模板字符串``后，我们可以直接这么来写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#result"</span>).append(<span class="string">`</span></div><div class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></div><div class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></div><div class="line"><span class="string">  are on sale!</span></div><div class="line"><span class="string">`</span>);</div></pre></td></tr></table></figure></p><p>用反引号（`）来标识起始，用${}来引用变量，而且所有的空格和缩进都会被保留在输出之中，是不是非常爽？！</p><p>React Router从第1.0.3版开始也使用ES6语法了，比如这个例子：</p><p><link to="{`/taco/${taco.name}`}">{taco.name}<br>React Router</p><h3 id="destructuring"><a href="#destructuring" class="headerlink" title="destructuring"></a>destructuring</h3><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><p>看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></div><div class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></div><div class="line"><span class="keyword">let</span> zoo = &#123;<span class="attr">cat</span>: cat, <span class="attr">dog</span>: dog&#125;</div><div class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></div></pre></td></tr></table></figure></p><p>用ES6完全可以像下面这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> cat = <span class="string">'ken'</span></div><div class="line"><span class="keyword">let</span> dog = <span class="string">'lili'</span></div><div class="line"><span class="keyword">let</span> zoo = &#123;cat, dog&#125;</div><div class="line"><span class="built_in">console</span>.log(zoo)  <span class="comment">//Object &#123;cat: "ken", dog: "lili"&#125;</span></div></pre></td></tr></table></figure></p><p>反过来可以这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dog = &#123;<span class="attr">type</span>: <span class="string">'animal'</span>, <span class="attr">many</span>: <span class="number">2</span>&#125;</div><div class="line"><span class="keyword">let</span> &#123; type, many&#125; = dog</div><div class="line"><span class="built_in">console</span>.log(type, many)   <span class="comment">//animal 2</span></div></pre></td></tr></table></figure></p><h3 id="default-rest"><a href="#default-rest" class="headerlink" title="default, rest"></a>default, rest</h3><p>default很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句type = type || ‘cat’来指定默认值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</div><div class="line">    type = type || <span class="string">'cat'</span>  </div><div class="line">    <span class="built_in">console</span>.log(type)</div><div class="line">&#125;</div><div class="line">animal()</div></pre></td></tr></table></figure></p><p>如果用ES6我们而已直接这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(type)</div><div class="line">&#125;</div><div class="line">animal()</div></pre></td></tr></table></figure></p><p>最后一个rest语法也很简单，直接看例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span>(<span class="params">...types</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(types)</div><div class="line">&#125;</div><div class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></div></pre></td></tr></table></figure></p><p>而如果不用ES6的话，我们则得使用ES5的arguments。<br>总结</p><p>以上就是ES6最常用的一些语法，可以说这20%的语法，在ES6的日常使用中占了80%…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。也就是说，ES6就是ES2015。&lt;br&gt;虽然目前并不是所有浏览器都能兼容ES6全部特性，但越来越多的程序员在
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的闭包</title>
    <link href="http://yoursite.com/2016/05/10/JavaScript%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2016/05/10/JavaScript的闭包/</id>
    <published>2016-05-10T12:30:00.000Z</published>
    <updated>2017-11-06T15:01:04.838Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>要理解闭包，首先要理解javascript的特殊的变量作用域。</p><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>javascript语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p><p>注意点：在函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明的是一个全局变量！</p><h3 id="如何从外部读取函数内部的局部变量？"><a href="#如何从外部读取函数内部的局部变量？" class="headerlink" title="如何从外部读取函数内部的局部变量？"></a>如何从外部读取函数内部的局部变量？</h3><p>出于种种原因，我们有时候需要获取到函数内部的局部变量。但是，上面已经说过了，正常情况下，这是办不到的！只有通过变通的方法才能实现。</p><p>那就是在函数内部，再定义一个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n); <span class="comment">// 999</span></div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p><p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。</p><p>这就是Javascript语言特有的”链式作用域”结构（chain scope），</p><p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><h3 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h3><p>上面代码中的f2函数，就是闭包。</p><p>各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。</p><p>由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。</p><p>所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。</p><h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个：</p><ul><li>一个是前面提到的可以读取函数内部的变量</li><li>另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。</li></ul><p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p><h3 id="闭包的优点"><a href="#闭包的优点" class="headerlink" title="闭包的优点"></a>闭包的优点</h3><p>（1）逻辑连续，当闭包作为另一个函数调用参数时，避免脱离当前逻辑而单独编写额外逻辑。</p><p>（2）方便调用上下文的局部变量。</p><p>（3）加强封装性，是第2点的延伸，可以达到对变量的保护作用。</p><h3 id="使用闭包的注意点（缺点）"><a href="#使用闭包的注意点（缺点）" class="headerlink" title="使用闭包的注意点（缺点）"></a>使用闭包的注意点（缺点）</h3><p>（1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>（2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><h3 id="闭包的特性"><a href="#闭包的特性" class="headerlink" title="闭包的特性"></a>闭包的特性</h3><p>（1）作为函数变量的一个引用。当函数返回时，其处于激活状态。</p><p>（2）闭包就是当一个函数返回时，并没有释放资源的栈区。</p><h3 id="闭包对页面的影响"><a href="#闭包对页面的影响" class="headerlink" title="闭包对页面的影响"></a>闭包对页面的影响</h3><p>通过使用闭包，我们可以做很多事情。比如模拟面向对象的代码风格；更优雅、更简洁的表达出代码；在某些方面提升代码的执行效率。</p><h3 id="闭包的工作原理"><a href="#闭包的工作原理" class="headerlink" title="闭包的工作原理"></a>闭包的工作原理</h3><p>因为闭包只有在被调用时才执行操作，所以它可以被用来定义控制结构。多个函数可以使用同一个环境，这使得他们可以通过改变那个环境相互交流。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>（1）采用函数引用方式的setTimeout调用。 例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">param</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">alert(param);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = func(<span class="number">1</span>)</div><div class="line">setTimeout(f, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p><p>（2）将函数关联到对象的实例方法。</p><p>（3）封装相关的功能集。</p><h3 id="列子"><a href="#列子" class="headerlink" title="列子"></a>列子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Get_Number = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> number = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        plus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            number ++;</div><div class="line">        &#125;,</div><div class="line">        out: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">return</span> number;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> r = Get_Number();</div><div class="line">r.plus();</div><div class="line">r.out();</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Get_Number = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> number = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        plus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            number ++;</div><div class="line">        &#125;,</div><div class="line">        out: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">return</span> number;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> r = Get_Number();</div><div class="line">r.change = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    number = <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line">r.change();</div><div class="line">r.plus();</div><div class="line">r.out();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h3&gt;&lt;p&gt;要理解闭包，首先要理解javascript的特殊的变量作用域。&lt;/p&gt;
&lt;p&gt;变量的作用域无非就两种：全局变量和局部
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端 Q &amp; A</title>
    <link href="http://yoursite.com/2016/05/06/%E5%89%8D%E7%AB%AFQ&amp;A/"/>
    <id>http://yoursite.com/2016/05/06/前端Q&amp;A/</id>
    <published>2016-05-06T14:15:00.000Z</published>
    <updated>2017-11-12T09:59:11.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul><li><strong> Q：http码，url输入后发生些什么</strong></li><li><strong> A：<br>1、用户输入URL地址，浏览器会去解析URL地址，得到请求服务器地址，请求页面文件路径，以及请求参数，<br>2、DNS解析：从浏览器DNS缓存，找域名相对应的IP没有找到，则从系统缓存寻找没有找到，从系统的host文件里面找没有找到，从路由器上找DNS服务器找<br>3、浏览器发送HTTP请求找到域名对应的IP地址<br>浏览器发出一个 HTTP协议的请求，组织了一个请求的数据包（走OSI七层模型，从应用层 到 最低层的数据链路层 的数据包层层封装，然后传到服务器在 层层解开）<br>4、响应消息</strong></li></ul><hr><ul><li><strong> Q：HTML优化 </strong></li><li><strong> A： <a href="../../../../2015/07/13/HTML优化">HTML优化</a></strong></li></ul><hr><ul><li><strong> Q：浏览器的渲染 </strong></li><li><strong> A：<br>在DOM树和CSS对象模型树构建完毕后,渲染就开始了,它会把DOM树和CSS对象模型树合并在一起,在此,display:none的元素并不会出现在渲染树上,计算各个元素在屏幕的位置,然后渲染像素。<br>1、首先获取html，然后构建dom树<br>2、其次根据css构建render树，render树中不包含定位和几何信息<br>3、最后构建布局数，布局是含有元素的定位和几何信息</strong></li></ul><hr><ul><li><strong> Q：缓存</strong></li><li><strong> A：html5允许我们自己控制哪些文件需要缓存，哪些不需要，具体的做法如下：</strong></li></ul><hr><ul><li><strong> Q：websocket</strong></li><li><strong> A：websocket是一种协议，可以让我们建立客户端到服务器端的全双工通信，这就意味着服务器端可以主动推送数据到客户端，</strong></li></ul><hr><ul><li><strong> Q：XHTML和HTML有什么区别</strong></li><li><strong> A：<br>HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言<br>最主要的不同：<br>XHTML 元素必须被正确地嵌套。<br>XHTML 元素必须被关闭。<br>标签名必须用小写字母。<br>XHTML 文档必须拥有根元素。</strong></li></ul><hr><ul><li><strong> Q：什么是语义化的HTML?</strong></li><li><strong> A：<br>直观的认识标签 对于搜索引擎的抓取有好处，用正确的标签做正确的事情！<br>html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；<br>在没有样式CCS情况下也以一种文档格式显示，并且是容易阅读的。搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。<br>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</strong></li></ul><hr><ul><li><strong> Q：常见的浏览器内核有哪些？</strong></li><li><strong> A：Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等<br>Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</strong></li></ul><hr><ul><li><strong> Q：HTML5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和HTML5？</strong></li><li><strong> A：<br>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。<br>绘画 canvas<br>用于媒介回放的 video 和 audio 元素<br>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；<br>sessionStorage 的数据在浏览器关闭后自动删除<br>语意化更好的内容元素，比如 article、footer、header、nav、section<br>表单控件，calendar、date、time、email、url、search<br>新的技术webworker, websockt, Geolocation<br>移除的元素<br>纯表现的元素：basefont，big，center，font, s，strike，tt，u；<br>对可用性产生负面影响的元素：frame，frameset，noframes；<br>支持HTML5新标签：<br>IE8/IE7/IE6支持通过document.createElement方法产生的标签，<br>可以利用这一特性让这些浏览器支持HTML5新标签，<br>浏览器支持新标签后，还需要添加标签默认的样式：</strong></li></ul><hr><ul><li><strong> Q：请描述一下 cookies，sessionStorage 和 localStorage 的区别？</strong></li><li><strong> A：<br>cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage不会<br>sessionStorage和localStorage的存储空间更大；<br>sessionStorage和localStorage有更多丰富易用的接口；<br>sessionStorage和localStorage各自独立的存储空间；</strong></li></ul><hr><ul><li><strong> Q：如何实现浏览器内多个标签页之间的通信?</strong></li><li><strong> A:调用localstorge、cookies等本地存储方式</strong></li></ul><hr><ul><li><strong> Q：HTML5 为什么只需要写 !DOCTYPE HTML？</strong></li><li><strong> A：HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</strong></li></ul><hr><ul><li><strong> Q：Doctype作用？标准模式与兼容模式各有什么区别?</strong></li><li><strong> A：<br>!DOCTYPE声明位于位于HTML文档中的第一行，处于html 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。<br>标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</strong></li></ul><hr><ul><li><strong> Q：Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义?</strong></li><li><strong> A：用于声明文档使用那种规范（html/Xhtml）一般为 严格 过度 基于框架的html文档。加入XMl声明可触发，解析方式更改为IE5.5 拥有IE5.5的Bug。</strong></li></ul><hr><ul><li><strong> Q：请描述一下 cookies，sessionStorage 和 localStorage 的区别？</strong></li><li><strong> A：<br>cookie在浏览器和服务器间来回传递。 sessionStorage和localStorage不会<br>sessionStorage和localStorage的存储空间更大；<br>sessionStorage和localStorage有更多丰富易用的接口；<br>sessionStorage和localStorage各自独立的存储空间；</strong></li></ul><hr><ul><li><strong> Q：iframe有那些缺点问题</strong></li><li><strong>A：<br>缺点：1、Iframes 阻塞页面加载 2、样式/脚本需要额外链入，会增加请求。3、会被盗链4、影响搜索引擎排名5、浏览器的后退按钮失效 6、必须正确设定链接导航<br>现在使用场景<br>1、沙箱隔离。 2、引用第三方内容。3、独立的带有交互的内容，比如幻灯片。4、需要保持独立焦点和历史管理的子窗口，如复杂的Web应用。</strong></li></ul><hr><ul><li><strong> Q：HTML5的离线储存怎么使用，工作原理能不能解释一下？问题</strong></li><li><strong>A：<br>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。<br>HTML5的离线存储是基于一个新建的.appcache文件的缓存机制，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。<br>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根 据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的 资源并进行离线存储。<br>离线的情况下，浏览器就直接使用离线存储的资源。<br>这个过程中有几个问题需要注意。<br>如果服务器对离线的资源进行了更新，那么必须更新manifest文件之后这些资源才能被浏览器重新下载，如果只是更新了资源而没有更新manifest文件的话，浏览器并不会重新下载资源，也就是说还是使用原来离线存储的资源。<br>对于manifest文件进行缓存的时候需要十分小心，因为可能出现一种情况就是你对manifest文件进行了更新，但是http的缓存 规则告诉浏览器本地缓存的manifest文件还没过期，这个情况下浏览器还是使用原来的manifest文件，所以对于manifest文件最好不要设置缓存。<br>浏览器在下载manifest文件中的资源的时候，它会一次性下载所有资源，如果某个资源由于某种原因下载失败，那么这次的所有更新就算是失败的，浏览器还是会使用原来的资源。<br>在更新了资源之后，新的资源需要到下次再打开app才会生效，如果需要资源马上就能生效，那么可以使用window.applicationCache.swapCache()方法来使之生效，出现这种现象的原因是浏览器会先使用离线资源加载页面，然后再去检查manifest是否有更新，所以需要到下次打开页面才能生效。</strong></li></ul><hr><ul><li><strong> Q：cookie安全方面</strong></li><li>**A：<br>1.cookie 值通过算法加密 推荐 AES + Hash结合；<br>2.使用使用SSL，使表单信息在传输过程中为密文状态，被截获时仍然难以破解利用；<br>3.使用SSL也应该设置HTTPS提高安全性；<br>4.使用安全控件，比如银行的网页和一些大型电商的网页，在客户端加密了再传输；<br>5.cookie包含用户验证的原始信息如，用户ID，浏览器信息，MAC地址&amp;手机序列号；<br>6.业务cookie都应该设置为httpOnly；<br>7.设置有效期一个是“即使一直在活动，也要失效”的时间，一个是“长时间不活动的失效时间”<br>8.和钱有关的不使用cookie；</li></ul><p>**</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ul><li><strong> Q：css中的性能</strong></li><li><strong>A：<a href="../../../../2014/07/11/css中的性能">css中的性能</a> </strong></li></ul><hr><ul><li><strong> Q：hack</strong></li><li><strong>A：不同的浏览器商对CSS支持解析不一致，导致呈现效果不同，为了获取一致的效果，需要针对不同浏览器写相应CSS 这个过程叫做CSS hack。大致有3种表现形式，CSS属性前缀法、选择器前缀法以及IE条件注释法。</strong></li></ul><hr><ul><li><strong> Q：自适应布局问题</strong></li><li><strong>A：<a href="../../../../2016/03/06/CSS自适应布局">CSS自适应布局</a> </strong></li></ul><hr><ul><li><strong> Q：CSS实现垂直水平居中</strong></li><li><strong> A：</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">CSS：</div><div class="line">.wrapper&#123;position:relative;&#125;</div><div class="line">    .content&#123;</div><div class="line">        background-color:#6699FF;</div><div class="line">        width:200px;</div><div class="line">        height:200px;</div><div class="line">        position: absolute;        //父元素需要相对定位</div><div class="line">        top: 50%;</div><div class="line">        left: 50%;</div><div class="line">        margin-top:-100px ;   //二分之一的height，width</div><div class="line">        margin-left: -100px;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：display有哪些值？说明他们的作用。</strong></li><li><strong> A：<br>block         块类型。默认宽度为父元素宽度，可设置宽高，换行显示。<br>none          缺省值。象行内元素类型一样显示。<br>inline        行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。<br>inline-block  默认宽度为内容宽度，可以设置宽高，同行显示。<br>list-item     象块类型元素一样显示，并添加样式列表标记。<br>table         此元素会作为块级表格来显示。<br>inherit       规定应该从父元素继承 display 属性的值。</strong></li></ul><hr><ul><li><strong> Q：行内元素有哪些?块级元素有哪些?CSS的盒模型?</strong></li><li><strong> A：块级元素：div,p,h1,form,ul,li;行内元素 : span&gt;,a,label,input,img,strong,em;CSS盒模型:内容，border ,margin，padding</strong></li></ul><hr><ul><li><strong> Q：CSS引入的方式有哪些? link和@import的区别是?</strong></li><li><strong> A：内联、内嵌、外链、导入。区别 ：同时加载前者无兼容性，后者CSS2.1以下浏览器不支持Link 支持使用javascript改变样式，后者不可</strong></li></ul><hr><ul><li><strong> Q：CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?</strong></li><li><strong> A:标签选择符 类选择符 id选择符继承不如指定 Id&gt;class&gt;标签选择后者优先级高</strong></li></ul><hr><ul><li><strong> Q：CSS清除浮动的几种方法（至少两种）</strong></li><li><strong> A：使用带clear属性的空元素,使用CSS的overflow属性；使用CSS的:after伪元素；使用邻接元素处理；</strong></li></ul><hr><ul><li><strong> Q：CSS居中（包括水平居中和垂直居中）</strong></li><li><strong> A：<br>1、内联元素居中方案、水平居中设置：行内元素设置 text-align:center，Flex布局设置display:flex;justify-content:center;(灵活运用,支持Chroime，Firefox，IE9+)<br>2、垂直居中设置：父元素高度确定的单行文本（内联元素）设置 height = line-height；父元素高度确定的多行文本（内联元素）a:插入 table （插入方法和水平居中一样），然后设置 vertical-align:middle；b:先设置 display:table-cell 再设置 vertical-align:middle；<br>3、块级元素居中方案水平居中设置：定宽块状元素设置 左右 margin 值为 auto；不定宽块状元素 a:在元素外加入 table 标签（完整的，包括 table、tbody、tr、td），该元素写在 td 内，然后设置 margin 的值为 auto； b:给该元素设置 displa:inine 方法； c:父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left:50%；<br>4、垂直居中设置：使用position:absolute（fixed）,设置left、top、margin-left、margin-top的属性;利用position:fixed（absolute）属性，margin:auto这个必须不要忘记了;利用display:table-cell属性使内容垂直居中;使用css3的新属性transform:translate(x,y)属性;使用:before元素;</strong></li></ul><hr><ul><li><strong> Q：在书写高效 CSS 时会有哪些问题需要考虑？</strong></li><li><strong> A：reset。参照上题“描述下 “reset” CSS 文件的作用和使用它的好处”的答案。规范命名。尤其对于没有语义化的html标签，例如div，所赋予的class值要特别注意。抽取可重用的部件，注意层叠样式表的“优先级”。</strong></li></ul><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><ul><li><strong> Q：手写事件模型及事件代理/委托问题</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：Function.bind函数问题</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：手写数组快速排序/去重问题</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：JS的变量提升</strong></li><li><strong>A：变量声明提升的作用，在一个函数体内声明的变量，JS解析器都会将其移动到函数体的顶部 </strong></li></ul><hr><ul><li><strong> Q：跨域问题</strong></li><li><strong>A： 跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。解决方法：JSONP、服务器代理、document.domain、window.postMessage、window.name </strong></li></ul><hr><ul><li><strong> Q：JSONP原理</strong></li><li><strong>A：ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</strong></li></ul><hr><ul><li><strong> Q：么是window对象? 什么是document对象</strong></li><li><strong> A：window它是一个顶层对象,而不是另一个对象的属性，即浏览器的窗口，document对象代表整个HTML 文档,可用来访问页面中的所有元素对象属性 </strong></li></ul><hr><ul><li><strong> Q：null，undefined的区别问题</strong></li><li><strong>A：null表示”没有对象”，即该处不应该有值（作为对象原型链的终点，作为函数的参数，表示该函数的参数不是对象）；undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义（例如变量被声明了，但没有赋值时，调用函数时，应该提供的参数没有提供） </strong></li></ul><hr><ul><li><strong> Q：将url的查询参数解析成字典对象</strong></li><li><strong> A：使用正则 </strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getQueryObject</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    url = url == <span class="literal">null</span> ? <span class="built_in">window</span>.location.href : url;</div><div class="line">    <span class="keyword">var</span> search = url.substring(url.lastIndexOf(<span class="string">"?"</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=]*)/g</span>;</div><div class="line">    search.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">rs, $<span class="number">1</span>, $<span class="number">2</span></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> name = <span class="built_in">decodeURIComponent</span>($<span class="number">1</span>);</div><div class="line">        <span class="keyword">var</span> val = <span class="built_in">decodeURIComponent</span>($<span class="number">2</span>);               </div><div class="line">        val = <span class="built_in">String</span>(val);</div><div class="line">        obj[name] = val;</div><div class="line">        <span class="keyword">return</span> rs;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：函数节流问题</strong></li><li><strong>A：函数节流基本思想是：某些代码不可以在没有间断的情况下连续重复执行 </strong></li></ul><hr><ul><li><strong> Q：JS设计模式问题</strong></li><li><strong>A：<a href="../../../../2016/10/10/JavaScript常见设计模式">JS常见设计模式</a> </strong></li></ul><hr><ul><li><strong> Q：谈谈对前端模块化的理解问题</strong></li><li><strong>A：所谓的模块化开发就是封装细节，提供使用接口，彼此之间互不影响，每个模块都是实现某一特定的功能。模块化开发的基础就是函数<br>1、使用函数封装 2、使用对象封装 3、立即执行函数写法 4、放大模式5、宽放大模式6、输入全局变量<br>通行的JavaScript模块规范共有两种：CommonJS和AMD</strong></li></ul><hr><ul><li><strong> Q：异步和同步问题</strong></li><li><strong>A：同步指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行<br>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。<br>（4）主线程不断重复上面的第三步。<br>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。  </strong></li></ul><hr><ul><li><strong> Q：js监听css3动画怎么实现，具体到每一帧（gg）</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：如何应对双边距的兼容问题</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：CMD，AMD应用场景，原理，区别</strong></li><li><strong>A：<a href="../../../../2017/02/10/AMD与CMD">AMD与CMD</a> </strong></li></ul><hr><ul><li><strong> Q：闭包原理，优势</strong></li><li><strong>A：<a href="../../../05/10/JavaScript的闭包">JavaScript的闭包</a> </strong></li></ul><hr><ul><li><strong> Q：es6箭头函数，promise</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：简述XXS，如何防范呢？</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：简述JQ实现原理</strong></li><li><p>**A：<br>jQuery是为了改变javascript的编码方式而设计的,<br>1、查找(创建)jQuery对象：$(“selector”);<br>2、调用jQuery对象的方法完成我们需要完成的工作：$(“selector”).doOurWork();<br>jQuery给我们带来了一个简洁方便的编码模型(1&gt;创建jQuery对象;2&gt;直接使用jQuery对象的属性/方法/事件),一个强悍的dom元素查找器($),插件式编程接口(jQuery.fn),以及插件初始化的”配置”对象思想.</p><p>**</p></li></ul><hr><ul><li><strong> Q：安全加密</strong></li><li><strong>A：1、base64 2、md5加密、3、sha1加密</strong></li></ul><hr><ul><li><strong> Q：如何判断自己的页面被iframe引用</strong></li><li><strong>A：方法一 设置http请求头的X-Frame-Options，可以设置三个值1、DENY  代表页面不会能被嵌入到iframe或者frame里 2、SAMEORIGIN 页面只能被本站页面嵌入到iframe或者frame中 3、ALLOW-FROM uri 页面只能被制定的uri嵌入到iframe 或 frame中 方法二JS判断父级存在则在父级跳转</strong></li></ul><hr><ul><li><strong> Q：红黑树</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：队列，栈存</strong></li><li>**A：</li></ul><p>队列:是一种支持先进先出(FIFO)的集合,即先被插入的数据,先被取出!<br>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><p>堆栈:是一种支持后进先出(LIFO)的集合,即后被插入的数据,先被取出!<br>栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">队列：</div><div class="line"></div><div class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">a.unshift(<span class="number">1</span>);</div><div class="line">a.unshift(<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"先进先出"</span>)</div><div class="line">a.pop()</div><div class="line"></div><div class="line">栈：</div><div class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">a.push(<span class="number">1</span>);</div><div class="line">a.push(<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"后进先出"</span>)</div><div class="line">a.pop()</div></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="**"></a>**</h2><ul><li><strong> Q：希尔排序</strong></li><li><strong>A：xxxxxxxxxx </strong></li></ul><hr><ul><li><strong> Q：谈一谈JavaScript作用域链</strong></li><li><strong> A：<br>当执行一段JavaScript代码（全局代码或函数）时，JavaScript引擎会创建为其创建一个作用域又称为执行上下文（Execution Context），在页面加载后会首先创建一个全局的作用域，然后每执行一个函数，会建立一个对应的作用域，从而形成了一条作用域链。每个作用域都有一条对应的作用域链，链头是全局作用域，链尾是当前函数作用域。<br>作用域链的作用是用于解析标识符，当函数被创建时（不是执行），会将this、arguments、命名参数和该函数中的所有局部变量添加到该当前作用域中，当JavaScript需要查找变量X的时候（这个过程称为变量解析），它首先会从作用域链中的链尾也就是当前作用域进行查找是否有X属性，如果没有找到就顺着作用域链继续查找，直到查找到链头，也就是全局作用域链，仍未找到该变量的话，就认为这段代码的作用域链上不存在x变量，并抛出一个引用错误（ReferenceError）的异常。</strong></li></ul><hr><ul><li><strong> Q：如何理解JavaScript原型链</strong></li><li><strong> A：<br>JavaScript中的每个对象都有一个prototype属性，我们称之为原型，而原型的值也是一个对象，因此它也有自己的原型，这样就串联起来了一条原型链，原型链的链头是object,它的prototype比较特殊，值为null。<br>原型链的作用是用于对象继承，函数A的原型属性(prototype property)是一个对象，当这个函数被用作构造函数来创建实例时，该函数的原型属性将被作为原型赋值给所有对象实例，比如我们新建一个数组，数组的方法便从数组的原型上继承而来。<br>当访问对象的一个属性时, 首先查找对象本身, 找到则返回; 若未找到, 则继续查找其原型对象的属性(如果还找不到实际上还会沿着原型链向上查找, 直至到根). 只要没有被覆盖的话, 对象原型的属性就能在所有的实例中找到，若整个原型链未找到则返回undefined</strong></li></ul><hr><ul><li><strong> Q：JavaScript如何实现继承？</strong></li><li><strong> A：构造继承、原型继承、实例继承、拷贝继承，原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.name = <span class="string">'wang'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">this</span>.age = <span class="number">28</span>;</div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</div><div class="line">alert(demo.age);</div><div class="line">alert(demo.name);<span class="comment">//得到被继承的属性</span></div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：JavaScript的typeof返回哪些数据类型</strong></li><li><strong> A：Ｏbject number function boolean underfind;</strong></li></ul><hr><ul><li><strong> Q：例举3种强制类型转换和2种隐式类型转换?</strong></li><li><strong> A：强制（parseInt,parseFloat,number）隐式（== – ===）；</strong></li></ul><hr><ul><li><strong> Q：split() join() 的区别</strong></li><li><strong> A：前者是切割成数组的形式，后者是将数组转换成字符串</strong></li></ul><hr><ul><li><strong> Q：数组方法pop() push() unshift() shift()</strong></li><li><strong> A：Push()尾部添加 pop()尾部删除 Unshift()头部添加 shift()头部删除</strong></li></ul><hr><ul><li><strong> Q：IE和DOM事件流的区别</strong></li><li><strong> A：执行顺序不一样、参数不一样事件加不加on，this指向问题</strong></li></ul><hr><ul><li><strong> Q：ajax请求的时候get 和post方式的区别</strong></li><li><strong> A：<br>一个在url后面 一个放在虚拟载体里面<br>有大小限制<br>安全问题<br>应用不同 一个是论坛等只需要请求的，一个是类似修改密码的</strong></li></ul><hr><ul><li><strong> Q：IE和标准下有哪些兼容性的写法</strong></li><li><strong> A：<br>Var ev = ev || window.event<br>document.documentElement.clientWidth || document.body.clientWidth<br>Var target = ev.srcElement||ev.target</strong></li></ul><hr><ul><li><strong> Q：ajax请求时，如何解释json数据</strong></li><li><strong> A：使用eval parse,鉴于安全性考虑 使用parse更靠谱;</strong></li></ul><hr><ul><li><strong> Q：事件委托是什么</strong></li><li><strong> A：让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</strong></li></ul><hr><ul><li><strong> Q：闭包是什么，有什么特性，对页面有什么影响?简要介绍你理解的闭包</strong></li><li><strong> A：闭包就是能够读取其他函数内部变量的函数。</strong></li></ul><hr><ul><li><strong> Q：添加 删除 替换 插入到某个接点的方法</strong></li><li><strong> A： </strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">obj.appendChidl()</div><div class="line">obj.innersetBefore()</div><div class="line">obj.replaceChild()</div><div class="line">obj.removeChild()</div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：”==”和“===”的不同</strong></li><li><strong> A：前者会自动转换类型，后者不会</strong></li></ul><hr><ul><li><strong> Q：编写一个b继承a的方法</strong></li><li><strong> A：</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="keyword">this</span>.name+” say Hello!”);&#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">name,id</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.temp = A;</div><div class="line">    <span class="keyword">this</span>.temp(name);        <span class="comment">//相当于new A();</span></div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.temp;      </div><div class="line">     <span class="keyword">this</span>.id = id;   </div><div class="line">    <span class="keyword">this</span>.checkId = <span class="function"><span class="keyword">function</span>(<span class="params">ID</span>)</span>&#123;alert(<span class="keyword">this</span>.id==ID)&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：如何阻止事件冒泡和默认事件</strong></li><li><strong> A：</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (e &amp;&amp; e.stopPropagation)</div><div class="line">        e.stopPropagation()</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">window</span>.event.cancelBubble=<span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：下面程序执行后弹出什么样的结果?</strong></li><li><strong> A：</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.a)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">fn.prototype = &#123;</div><div class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.a = <span class="number">20</span>;</div><div class="line">        alert(<span class="keyword">this</span>.a);</div><div class="line">    &#125;,</div><div class="line">    c: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.a = <span class="number">30</span>;</div><div class="line">        alert(<span class="keyword">this</span>.a);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myfn = <span class="keyword">new</span> fn();</div><div class="line">myfn.b();</div><div class="line">myfn.c();</div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：谈谈This对象的理解。</strong></li><li><strong> A：this是js的一个关键字，随着函数使用场合不同，this的值会发生变化。但是有一个总原则，那就是this指的是调用函数的那个对象。this一般情况下：是全局对象Global。 作为方法调用，那么this就是指这个对象</strong></li></ul><hr><ul><li><strong> Q：下面程序的结果</strong></li><li><strong> A：</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(o)</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> fun(m,n);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>);  a.fun(<span class="number">1</span>);  a.fun(<span class="number">2</span>);  a.fun(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>);  c.fun(<span class="number">2</span>);  c.fun(<span class="number">3</span>);</div><div class="line"><span class="comment">//答案：</span></div><div class="line"><span class="comment">//a: undefined,0,0,0</span></div><div class="line"><span class="comment">//b: undefined,0,1,2</span></div><div class="line"><span class="comment">//c: undefined,0,1,1</span></div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：下面程序的输出结果</strong></li><li><strong> A：</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'World!'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'undefined'</span>) &#123;</div><div class="line">        <span class="keyword">var</span> name = <span class="string">'Jack'</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Goodbye '</span> + name);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></li></ul><hr><ul><li><strong> Q：了解Node么？Node的使用场景都有哪些？</strong></li><li><strong> A：高并发、聊天、实时消息推送</strong></li></ul><hr><ul><li><strong> Q：说一下什么是JavaScript的同源策略？</strong></li><li><strong> A：一段脚本只能读取来自于同一来源的窗口和文档的属性，所谓同源是指，域名，协议，端口号完全相同</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; Q：http码，url输入后发生些什么&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; 
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Css" scheme="http://yoursite.com/tags/Css/"/>
    
      <category term="Html" scheme="http://yoursite.com/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的设计java异常</title>
    <link href="http://yoursite.com/2016/04/28/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%AE%BE%E8%AE%A1java%E5%BC%82%E5%B8%B8%20/"/>
    <id>http://yoursite.com/2016/04/28/如何优雅的设计java异常 /</id>
    <published>2016-04-28T09:53:50.000Z</published>
    <updated>2017-10-22T08:29:54.593Z</updated>
    
    <content type="html"><![CDATA[<p>转自 <a href="http://lrwinx.github.io" target="_blank" rel="external">http://lrwinx.github.io</a></p><h3 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h3><div class="note default"><p>异常处理是程序开发中必不可少操作之一，但如何正确优雅的对异常进行处理确是一门学问，笔者根据自己的开发经验来谈一谈我是如何对异常进行处理的。<br>由于本文只作一些经验之谈，不涉及到基础知识部分，如果读者对异常的概念还很模糊，请先查看基础知识。</p></div><h3 id="如何选择异常类型"><a href="#如何选择异常类型" class="headerlink" title="如何选择异常类型"></a>如何选择异常类型</h3><h4 id="异常的类别"><a href="#异常的类别" class="headerlink" title="异常的类别"></a>异常的类别</h4><p>正如我们所知道的，java中的异常的超类是java.lang.Throwable(后文省略为Throwable),它有两个比较重要的子类,java.lang.Exception(后文省略为Exception)和java.lang.Error(后文省略为Error)，其中Error由JVM虚拟机进行管理,如我们所熟知的OutOfMemoryError异常等，所以我们本文不关注Error异常，那么我们细说一下Exception异常。<br>Exception异常有个比较重要的子类，叫做RuntimeException。我们将RuntimeException或其他继承自RuntimeException的子类称为非受检异常(unchecked Exception)，其他继承自Exception异常的子类称为受检异常(checked Exception)。本文重点来关注一下受检异常和非受检异常这两种异常。</p><h4 id="如何选择异常"><a href="#如何选择异常" class="headerlink" title="如何选择异常"></a>如何选择异常</h4><p>从笔者的开发经验来看，如果在一个应用中，需要开发一个方法(如某个功能的service方法)，这个方法如果中间可能出现异常，那么你需要考虑这个异常出现之后是否调用者可以处理，并且你是否希望调用者进行处理，如果调用者可以处理，并且你也希望调用者进行处理，那么就要抛出受检异常，提醒调用者在使用你的方法时，考虑到如果抛出异常时如果进行处理，相似的，如果在写某个方法时，你认为这是个偶然异常，理论上说，你觉得运行时可能会碰到什么问题，而这些问题也许不是必然发生的，也不需要调用者显示的通过异常来判断业务流程操作的，那么这时就可以使用一个RuntimeException这样的非受检异常.<br>好了，估计我上边说的这段话，你读了很多遍也依然觉得晦涩了。<br>那么，请跟着我的思路，在慢慢领会一下。</p><h4 id="什么时候才需要抛异常"><a href="#什么时候才需要抛异常" class="headerlink" title="什么时候才需要抛异常"></a>什么时候才需要抛异常</h4><p>首先我们需要了解一个问题，什么时候才需要抛异常？异常的设计是方便给开发者使用的，但不是乱用的，笔者对于什么时候抛异常这个问题也问了很多朋友，能给出准确答案的确实不多。其实这个问题很简单，如果你觉得某些”问题”解决不了了，那么你就可以抛出异常了。比如，你在写一个service,其中在写到某段代码处,你发现可能会产生问题，那么就请抛出异常吧，相信我，你此时抛出异常将是一个最佳时机。</p><h4 id="应该抛出怎样的异常"><a href="#应该抛出怎样的异常" class="headerlink" title="应该抛出怎样的异常"></a>应该抛出怎样的异常</h4><p>了解完了什么时候才需要抛出异常后，我们再思考一个问题，真的当我们抛出异常时，我们应该选用怎样的异常呢？究竟是受检异常还是非受检异常呢(RuntimeException)呢？我来举例说明一下这个问题，先从受检异常说起,比如说有这样一个业务逻辑，需要从某文件中读取某个数据，这个读取操作可能是由于文件被删除等其他问题导致无法获取从而出现读取错误，那么就要从redis或mysql数据库中再去获取此数据,参考如下代码，getKey(Integer)为入口程序. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">(Integer key)</span></span>&#123;</div><div class="line">    String  value;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        InputStream inputStream = getFiles(<span class="string">"/file/nofile"</span>);</div><div class="line">        <span class="comment">//接下来从流中读取key的value指</span></div><div class="line">        value = ...;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="comment">//如果抛出异常将从mysql或者redis进行取之</span></div><div class="line">        value = ...;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getFiles</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line">    InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        inputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"I/O读取错误"</span>,e.getCause());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inputStream;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">ok，看了以上代码以后，你也许心中有一些想法，原来受检异常可以控制义务逻辑，对，没错，通过受检异常真的可以控制业务逻辑，但是切记不要这样使用，我们应该合理的抛出异常，因为程序本身才是流程，异常的作用仅仅是当你进行不下去的时候找到的一个借口而已，它并不能当成控制程序流程的入口或出口，如果这样使用的话，是在将异常的作用扩大化，这样将会导致代码复杂程度的增加，耦合性会提高，代码可读性降低等问题。那么就一定不要使用这样的异常吗？其实也不是，在真的有这样的需求的时候，我们可以这样使用，只是切记，不要把它真的当成控制流程的工具或手段。那么究竟什么时候才要抛出这样的异常呢？要考虑，如果调用者调用出错后，一定要让调用者对此错误进行处理才可以，满足这样的要求时，我们才会考虑使用受检异常。</div><div class="line">接下来，我们来看一下非受检异常呢(RuntimeException)，对于RuntimeException这种异常，我们其实很多见，比如java.lang.NullPointerException／java.lang.IllegalArgumentException等，那么这种异常我们时候抛出呢？当我们在写某个方法的时候，可能会偶然遇到某个错误，我们认为这个问题时运行时可能为发生的，并且理论上讲，没有这个问题的话，程序将会正常执行的时候，它不强制要求调用者一定要捕获这个异常，此时抛出RuntimeException异常,举个例子，当传来一个路径的时候，需要返回一个路径对应的File对象:</div><div class="line">``` java</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    myTest.getFiles(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getFiles</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == path || <span class="string">""</span>.equals(path))&#123;</div><div class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> NullPointerException(<span class="string">"路径不能为空!"</span>);</div><div class="line">    &#125;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> file;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述例子表明，如果调用者调用getFiles(String)的时候如果path是空，那么就抛出空指针异常(它是RuntimeException的子类),调用者不用显示的进行try…catch…操作进行强制处理.这就要求调用者在调用这样的方法时先进行验证，避免发生RuntimeException.如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    String path = <span class="string">"/a/b.png"</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != path &amp;&amp; !<span class="string">""</span>.equals(path))&#123;</div><div class="line">        myTest.getFiles(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getFiles</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == path || <span class="string">""</span>.equals(path))&#123;</div><div class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> NullPointerException(<span class="string">"路径不能为空!"</span>);</div><div class="line">    &#125;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> file;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="应该选用哪种异常"><a href="#应该选用哪种异常" class="headerlink" title="应该选用哪种异常"></a>应该选用哪种异常</h4><p>通过以上的描述和举例，可以总结出一个结论，RuntimeException异常和受检异常之间的区别就是:是否强制要求调用者必须处理此异常，如果强制要求调用者必须进行处理，那么就使用受检异常，否则就选择非受检异常(RuntimeException)。一般来讲，如果没有特殊的要求，我们建议使用RuntimeException异常。</p><h3 id="场景介绍和技术选型"><a href="#场景介绍和技术选型" class="headerlink" title="场景介绍和技术选型"></a>场景介绍和技术选型</h3><h4 id="架构描述"><a href="#架构描述" class="headerlink" title="架构描述"></a>架构描述</h4><p>正如我们所知，传统的项目都是以MVC框架为基础进行开发的，本文主要从使用restful风格接口的设计来体验一下异常处理的优雅。<br>我们把关注点放在restful的api层(和web中的controller层类似)和service层，研究一下在service中如何抛出异常，然后api层如何进行捕获并且转化异常。<br>使用的技术是:spring-boot,jpa(hibernate),mysql,如果对这些技术不是太熟悉，读者需要自行阅读相关材料。</p><h4 id="业务场景描述"><a href="#业务场景描述" class="headerlink" title="业务场景描述"></a>业务场景描述</h4><p>选择一个比较简单的业务场景，以电商中的收货地址管理为例，用户在移动端进行购买商品时，需要进行收货地址管理，在项目中，提供一些给移动端进行访问的api接口，如:添加收货地址，删除收货地址，更改收货地址，默认收货地址设置，收货地址列表查询，单个收货地址查询等接口。</p><h4 id="构建约束条件"><a href="#构建约束条件" class="headerlink" title="构建约束条件"></a>构建约束条件</h4><p>ok，这个是设置好的一个很基本的业务场景，当然，无论什么样的api操作，其中都包含一些规则: </p><ul><li>添加收货地址:<br>入参:<ul><li>用户id </li><li>收货地址实体信息<br>约束:</li><li>用户id不能为空，且此用户确实是存在 的</li><li>收货地址的必要字段不能为 空</li><li>如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址 —</li></ul></li><li>删除收货地址<br>入参 :<ul><li>用户id </li><li>收货地址id<br>约束 :</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li><li>判断此收货地址是否为默认收货地址，如果是默认收货地址，那么不能进行删除</li></ul></li><li>更改收货地址:<br>入参:<ul><li>用户id <ul><li>收货地址id<br>约束:</li></ul></li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li></ul></li><li>默认地址设置:<br>入参:<ul><li>用户id </li><li>收货地址id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li></ul></li><li>收货地址列表查询:<br>入参:<ul><li>用户id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li></ul></li><li>单个收货地址查询:<br>入参:<ul><li>用户id </li><li>收货地址id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址<h4 id="约束判断和技术选型"><a href="#约束判断和技术选型" class="headerlink" title="约束判断和技术选型"></a>约束判断和技术选型</h4>对于上述列出的约束条件和功能列表，我选择几个比较典型的异常处理场景进行分析:添加收货地址，删除收货地址，获取收货地址列表。<br>那么应该有哪些必要的知识储备呢，让我们看一下收货地址这个功能:<br>添加收货地址中需要对用户id和收货地址实体信息就行校验，那么对于非空的判断，我们如何进行工具的选择呢？传统的判断如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 添加地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> address</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">addAddress</span><span class="params">(Integer uid,Address address)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != uid)&#123;</div><div class="line">        <span class="comment">//进行处理..</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul><p>上边的例子，如果只判断uid为空还好，如果再去判断address这个实体中的某些必要属性是否为空，在字段很多的情况下，这无非是灾难性的。<br>那我们应该怎么进行这些入参的判断呢，给大家介绍两个知识点:</p><ol><li>Guava中的Preconditions类实现了很多入参方法的判断</li><li>jsr 303的validation规范(目前实现比较全的是hibernate实现的hibernate-validator)如果使用了这两种推荐技术，那么入参的判断会变得简单很多。推荐大家多使用这些成熟的技术和jar工具包，他可以减少很多不必要的工作量。我们只需要把重心放到业务逻辑上。而不会因为这些入参的判断耽误更多的时间。<h3 id="如何优雅的设计java异常"><a href="#如何优雅的设计java异常" class="headerlink" title="如何优雅的设计java异常"></a>如何优雅的设计java异常</h3><h4 id="domain介绍"><a href="#domain介绍" class="headerlink" title="domain介绍"></a>domain介绍</h4>根据项目场景来看，需要两个domain模型，一个是用户实体，一个是地址实体.<br>Address domain如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String province;<span class="comment">//省</span></div><div class="line">    <span class="keyword">private</span> String city;<span class="comment">//市</span></div><div class="line">    <span class="keyword">private</span> String county;<span class="comment">//区</span></div><div class="line">    <span class="keyword">private</span> Boolean isDefault;<span class="comment">//是否是默认地址</span></div><div class="line"></div><div class="line">    <span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.ALL&#125;)</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"uid"</span>)</div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>User domain如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">   <span class="meta">@GeneratedValue</span></div><div class="line">   <span class="keyword">private</span> Integer id;</div><div class="line">   <span class="keyword">private</span> String name;<span class="comment">//姓名</span></div><div class="line"></div><div class="line">    <span class="meta">@OneToMany</span>(cascade= CascadeType.ALL,mappedBy=<span class="string">"user"</span>,fetch = FetchType.LAZY)</div><div class="line">        <span class="keyword">private</span> Set&lt;Address&gt; addresses;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ok,上边是一个模型关系，用户-收货地址的关系是1-n的关系。上边的@Data是使用了一个叫做lombok的工具，它自动生成了Setter和Getter等方法，用起来非常方便，感兴趣的读者可以自行了解一下。 </p><h4 id="dao介绍"><a href="#dao介绍" class="headerlink" title="dao介绍"></a>dao介绍</h4><p>数据连接层，我们使用了spring-data-jpa这个框架，它要求我们只需要继承框架提供的接口，并且按照约定对方法进行取名，就可以完成我们想要的数据库操作。<br>用户数据库操作如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>收货地址操作如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAddressDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Address</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>正如读者所看到的，我们的DAO只需要继承JpaRepository,它就已经帮我们完成了基本的CURD等操作，如果想了解更多关于spring-data的这个项目，请参考一下spring的官方文档，它比不方案我们对异常的研究。</p><h4 id="Service异常设计"><a href="#Service异常设计" class="headerlink" title="Service异常设计"></a>Service异常设计</h4><p>ok，终于到了我们的重点了，我们要完成service一些的部分操作:添加收货地址，删除收货地址，获取收货地址列表.<br>首先看我的service接口定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAddressService</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 创建收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> address</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">Address <span class="title">createAddress</span><span class="params">(Integer uid,Address address)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 删除收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> aid</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAddress</span><span class="params">(Integer uid,Integer aid)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 查询用户的所有收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">List&lt;Address&gt; <span class="title">listAddresses</span><span class="params">(Integer uid)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们来关注一下实现:</p><h4 id="添加收货地址"><a href="#添加收货地址" class="headerlink" title="添加收货地址"></a>添加收货地址</h4><p>首先再来看一下之前整理的约束条件:<br>入参:</p><ol><li>用户id</li><li>收货地址实体信息<br>约束: </li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址的必要字段不能为空</li><li>如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址<br>先看以下代码实现:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">createAddress</span><span class="params">(Integer uid, Address address)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    Preconditions.checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"找不到当前用户!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.收货地址的必要字段不能为空</span></div><div class="line">    BeanValidators.validateWithException(validator, address);</div><div class="line">    <span class="comment">//3.如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址</span></div><div class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(user.getAddresses()))&#123;</div><div class="line">        address.setIsDefault(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    address.setUser(user);</div><div class="line">    Address result = addressDao.save(address);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>其中，已经完成了上述所描述的三点约束条件，当三点约束条件都满足时，才可以进行正常的业务逻辑，否则将抛出异常(一般在此处建议抛出运行时异常-RuntimeException)。<br>介绍以下以上我所用到的技术:</p><ol><li>Preconfitions.checkNotNull(T t)这个是使用Guava中的com.google.common.base.Preconditions进行判断的，因为service中用到的验证较多，所以建议将Preconfitions改成静态导入的方式:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.base.Preconditions.checkNotNull;</div></pre></td></tr></table></figure></li></ol><p>当然Guava的github中的说明也建议我们这样使用。</p><ol><li>BeanValidators.validateWithException(validator, address);<br>这个使用了hibernate实现的jsr 303规范来做的，需要传入一个validator和一个需要验证的实体,那么validator是如何获取的呢,如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfigs</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="keyword">public</span> javax.validation.<span class="function">Validator <span class="title">getValidator</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalValidatorFactoryBean();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>他将获取一个Validator对象，然后我们在service中进行注入便可以使用了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Autowired</span>     </div><div class="line"><span class="keyword">private</span> Validator validator ;</div></pre></td></tr></table></figure></p><p>那么BeanValidators这个类是如何实现的？其实实现方式很简单，只要去判断jsr 303的标注注解就ok了。<br>那么jsr 303的注解写在哪里了呢？当然是写在address实体类中了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line"><span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="meta">@NotNull</span></div><div class="line"><span class="keyword">private</span> String province;<span class="comment">//省</span></div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="keyword">private</span> String city;<span class="comment">//市</span></div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="keyword">private</span> String county;<span class="comment">//区</span></div><div class="line"><span class="keyword">private</span> Boolean isDefault = <span class="keyword">false</span>;<span class="comment">//是否是默认地址</span></div><div class="line"></div><div class="line"><span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.ALL&#125;)</div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"uid"</span>)</div><div class="line"><span class="keyword">private</span> User user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>写好你需要的约束条件来进行判断，如果合理的话，才可以进行业务操作，从而对数据库进行操作。<br>这块的验证是必须的，一个最主要的原因是:这样的验证可以避免脏数据的插入。如果读者有正式上线的经验的话，就可以理解这样的一个事情，任何的代码错误都可以容忍和修改，但是如果出现了脏数据问题，那么它有可能是一个毁灭性的灾难。程序的问题可以修改，但是脏数据的出现有可能无法恢复。所以这就是为什么在service中一定要判断好约束条件，再进行业务逻辑操作的原因了。 </p><ol><li>此处的判断为业务逻辑判断，是从业务角度来进行筛选判断的，除此之外，有可能在很多场景中都会有不同的业务条件约束，只需要按照要求来做就好。<br><strong>对于约束条件的总结如下: </strong><ul><li>基本判断约束(null值等基本判断)</li><li>实体属性约束(满足jsr 303等基础判断)</li><li>业务条件约束(需求提出的不同的业务约束)<br><strong>当这个三点都满足时，才可以进行下一步操作</strong></li></ul></li></ol><p>ok,基本介绍了如何做一个基础的判断，那么再回到异常的设计问题上，上述代码已经很清楚的描述如何在适当的位置合理的判断一个异常了，那么如何合理的抛出异常呢？<br>只抛出RuntimeException就算是优雅的抛出异常吗？当然不是，对于service中的抛出异常，笔者认为大致有两种抛出的方法:</p><ol><li>抛出带状态码RumtimeException异常</li><li>抛出指定类型的RuntimeException异常</li></ol><p>相对这两种异常的方式进行结束，第一种异常指的是我所有的异常都抛RuntimeException异常，但是需要带一个状态码，调用者可以根据状态码再去查询究竟service抛出了一个什么样的异常。<br>第二种异常是指在service中抛出什么样的异常就自定义一个指定的异常错误，然后在进行抛出异常。<br>一般来讲，如果系统没有别的特殊需求的时候，在开发设计中，建议使用第二种方式。但是比如说像基础判断的异常，就可以完全使用guava给我们提供的类库进行操作。jsr 303异常也可以使用自己封装好的异常判断类进行操作，因为这两种异常都是属于基础判断，不需要为它们指定特殊的异常。但是对于第三点义务条件约束判断抛出的异常，就需要抛出指定类型的异常了。<br>对于<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"找不到当前用户!"</span>);</div></pre></td></tr></table></figure></p><p>定义一个特定的异常类来进行这个义务异常的判断<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFindUserException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">NotFindUserException</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">"找不到此用户"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">NotFindUserException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(message);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后将此处改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException(<span class="string">"找不到当前用户!"</span>);</div></pre></td></tr></table></figure></p><p>or<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException();</div></pre></td></tr></table></figure></p><p>ok,通过以上对service层的修改，代码更改如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">createAddress</span><span class="params">(Integer uid, Address address)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException(<span class="string">"找不到当前用户!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.收货地址的必要字段不能为空</span></div><div class="line">    BeanValidators.validateWithException(validator, address);</div><div class="line">    <span class="comment">//3.如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址</span></div><div class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(user.getAddresses()))&#123;</div><div class="line">        address.setIsDefault(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    address.setUser(user);</div><div class="line">    Address result = addressDao.save(address);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 这样的service就看起来稳定性和理解性就比较强了。</p><p>####删除收货地址:<br>入参:</p><ol><li>用户id</li><li>收货地址id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li><li>判断此收货地址是否为默认收货地址，如果是默认收货地址，那么不能进行删除<br>它与上述添加收货地址类似，故不再赘述，delete的service设计如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAddress</span><span class="params">(Integer uid, Integer aid)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.收货地址不能为空，且此收货地址确实是存在的</span></div><div class="line">    checkNotNull(aid);</div><div class="line">    Address address = addressDao.findOne(aid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == address)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindAddressException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//3.判断此收货地址是否是用户的收货地址</span></div><div class="line">    <span class="keyword">if</span>(!address.getUser().equals(user))&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotMatchUserAddressException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//4.判断此收货地址是否为默认收货地址，如果是默认收货地址，那么不能进行删除</span></div><div class="line">    <span class="keyword">if</span>(address.getIsDefault())&#123;</div><div class="line">       <span class="keyword">throw</span>  <span class="keyword">new</span> DefaultAddressNotDeleteException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    addressDao.delete(address);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>设计了相关的四个异常类:NotFindUserException,NotFindAddressException,NotMatchUserAddressException,DefaultAddressNotDeleteException.根据不同的业务需求抛出不同的异常。</p><h4 id="获取收货地址列表"><a href="#获取收货地址列表" class="headerlink" title="获取收货地址列表:"></a>获取收货地址列表:</h4><p>入参:</p><ol><li>用户id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的<br>代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Address&gt; <span class="title">listAddresses</span><span class="params">(Integer uid)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    User result = userDao.findOne(uid);</div><div class="line">    <span class="keyword">return</span> result.getAddresses();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="api异常设计"><a href="#api异常设计" class="headerlink" title="api异常设计"></a>api异常设计</h3><p>大致有两种抛出的方法:</p><ol><li>抛出带状态码RumtimeException异常 </li><li>抛出指定类型的RuntimeException异常<br>这个是在设计service层异常时提到的，通过对service层的介绍，我们在service层抛出异常时选择了第二种抛出的方式，不同的是，在api层抛出异常我们需要使用这两种方式进行抛出:要指定api异常的类型，并且要指定相关的状态码，然后才将异常抛出，这种异常设计的核心是让调用api的使用者更能清楚的了解发生异常的详细信息，除了抛出异常外，我们还需要将状态码对应的异常详细信息以及异常有可能发生的问题制作成一个对应的表展示给用户，方便用户的查询。（如github提供的api文档，微信提供的api文档等）,还有一个好处:如果用户需要自定义提示消息，可以根据返回的状态码进行提示的修改。<h4 id="api验证约束"><a href="#api验证约束" class="headerlink" title="api验证约束"></a>api验证约束</h4>首先对于api的设计来说，需要存在一个dto对象，这个对象负责和调用者进行数据的沟通和传递，然后dto-&gt;domain在传给service进行操作，这一点一定要注意，第二点，除了说道的service需要进行基础判断(null判断)和jsr 303验证以外，同样的，api层也需要进行相关的验证，如果验证不通过的话，直接返回给调用者，告知调用失败，不应该带着不合法的数据再进行对service的访问，那么读者可能会有些迷惑，不是service已经进行验证了，为什么api层还需要进行验证么？这里便设计到了一个概念:编程中的墨菲定律，如果api层的数据验证疏忽了，那么有可能不合法数据就带到了service层，进而讲脏数据保存到了数据库。</li></ol><p><strong>所以缜密编程的核心是:永远不要相信收到的数据是合法的。</strong></p><h4 id="api异常设计-1"><a href="#api异常设计-1" class="headerlink" title="api异常设计"></a>api异常设计</h4><p>设计api层异常时，正如我们上边所说的，需要提供错误码和错误信息，那么可以这样设计，提供一个通用的api超类异常，其他不同的api异常都继承自这个超类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line"><span class="keyword">protected</span> Long errorCode ;</div><div class="line"><span class="keyword">protected</span> Object data ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Long errorCode,String message,Object data,Throwable e)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(message,e);</div><div class="line">    <span class="keyword">this</span>.errorCode = errorCode ;</div><div class="line">    <span class="keyword">this</span>.data = data ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Long errorCode,String message,Object data)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>(errorCode,message,data,<span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Long errorCode,String message)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>(errorCode,message,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(String message,Throwable e)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>,message,<span class="keyword">null</span>,e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Throwable e)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> errorCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(Long errorCode)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.errorCode = errorCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.data = data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后分别定义api层异常：ApiDefaultAddressNotDeleteException,ApiNotFindAddressException,ApiNotFindUserException,ApiNotMatchUserAddressException。<br>以默认地址不能删除为例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiDefaultAddressNotDeleteException</span> <span class="keyword">extends</span> <span class="title">ApiException</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiDefaultAddressNotDeleteException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(AddressErrorCode.DefaultAddressNotDeleteErrorCode, message, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>AddressErrorCode.DefaultAddressNotDeleteErrorCode就是需要提供给调用者的错误码。错误码类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressErrorCode</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long DefaultAddressNotDeleteErrorCode = <span class="number">10001L</span>;<span class="comment">//默认地址不能删除</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NotFindAddressErrorCode = <span class="number">10002L</span>;<span class="comment">//找不到此收货地址</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NotFindUserErrorCode = <span class="number">10003L</span>;<span class="comment">//找不到此用户</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NotMatchUserAddressErrorCode = <span class="number">10004L</span>;<span class="comment">//用户与收货地址不匹配</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ok,那么api层的异常就已经设计完了，在此多说一句，AddressErrorCode错误码类存放了可能出现的错误码，更合理的做法是把他放到配置文件中进行管理。</p><h4 id="api处理异常"><a href="#api处理异常" class="headerlink" title="api处理异常"></a>api处理异常</h4><p>api层会调用service层，然后来处理service中出现的所有异常，首先，需要保证一点，一定要让api层非常轻，基本上做成一个转发的功能就好(接口参数，传递给service参数，返回给调用者数据,这三个基本功能)，然后就要在传递给service参数的那个方法调用上进行异常处理。<br>此处仅以添加地址为例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> IAddressService addressService;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 添加收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> addressDTO</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> AddressDTO <span class="title">add</span><span class="params">(@Valid @RequestBody AddressDTO addressDTO)</span></span>&#123;</div><div class="line">    Address address = <span class="keyword">new</span> Address();</div><div class="line">    BeanUtils.copyProperties(addressDTO,address);</div><div class="line">    Address result;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        result = addressService.createAddress(addressDTO.getUid(), address);</div><div class="line">    &#125;<span class="keyword">catch</span> (NotFindUserException e)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApiNotFindUserException(<span class="string">"找不到该用户"</span>);</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;<span class="comment">//未知错误</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApiException(e);</div><div class="line">    &#125;</div><div class="line">    AddressDTO resultDTO = <span class="keyword">new</span> AddressDTO();</div><div class="line">    BeanUtils.copyProperties(result,resultDTO);</div><div class="line">    resultDTO.setUid(result.getUser().getId());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> resultDTO;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的处理方案是调用service时，判断异常的类型，然后将任何service异常都转化成api异常，然后抛出api异常，这是常用的一种异常转化方式。相似删除收货地址和获取收货地址也类似这样处理，在此，不在赘述。</p><h4 id="api异常转化"><a href="#api异常转化" class="headerlink" title="api异常转化"></a>api异常转化</h4><p>已经讲解了如何抛出异常和何如将service异常转化为api异常，那么转化成api异常直接抛出是否就完成了异常处理呢？ 答案是否定的，当抛出api异常后，我们需要把api异常返回的数据(json or xml)让用户看懂，那么需要把api异常转化成dto对象(ErrorDTO),看如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController.class)</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiExceptionHandlerAdvice</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Handle exceptions thrown by handlers.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@ExceptionHandler</span>(value = Exception.class)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorDTO&gt; <span class="title">exception</span><span class="params">(Exception exception,HttpServletResponse response)</span> </span>&#123;</div><div class="line">    ErrorDTO errorDTO = <span class="keyword">new</span> ErrorDTO();</div><div class="line">    <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> ApiException)&#123;<span class="comment">//api异常</span></div><div class="line">        ApiException apiException = (ApiException)exception;</div><div class="line">        errorDTO.setErrorCode(apiException.getErrorCode());</div><div class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//未知异常</span></div><div class="line">        errorDTO.setErrorCode(<span class="number">0L</span>);</div><div class="line">    &#125;</div><div class="line">    errorDTO.setTip(exception.getMessage());</div><div class="line">    ResponseEntity&lt;ErrorDTO&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(errorDTO,HttpStatus.valueOf(response.getStatus()));</div><div class="line">    <span class="keyword">return</span> responseEntity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorDTO</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Long errorCode;</div><div class="line">    <span class="keyword">private</span> String tip;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ok,这样就完成了api异常转化成用户可以读懂的DTO对象了，代码中用到了@ControllerAdvice，这是spring MVC提供的一个特殊的切面处理。</p><p>当调用api接口发生异常时，用户也可以收到正常的数据格式了,比如当没有用户(uid为2)时，却为这个用户添加收货地址,postman(Google plugin 用于模拟http请求)之后的数据:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"errorCode"</span>: <span class="number">10003</span>,</div><div class="line">  <span class="string">"tip"</span>: <span class="string">"找不到该用户"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文只从如何设计异常作为重点来讲解，涉及到的api传输和service的处理，还有待优化，比如api接口访问需要使用https进行加密，api接口需要OAuth2.0授权或api接口需要签名认证等问题，文中都未曾提到，本文的重心在于异常如何处理，所以读者只需关注涉及到异常相关的问题和处理方式就可以了。希望本篇文章对你理解异常有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自 &lt;a href=&quot;http://lrwinx.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lrwinx.github.io&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;head
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>强大网页分析解析辅助xpath插件，轻松得到xpath路径采集必备</title>
    <link href="http://yoursite.com/2016/03/06/%E5%BC%BA%E5%A4%A7%E7%BD%91%E9%A1%B5%E5%88%86%E6%9E%90%E8%A7%A3%E6%9E%90%E8%BE%85%E5%8A%A9xpath%E6%8F%92%E4%BB%B6%EF%BC%8C%E8%BD%BB%E6%9D%BE%E5%BE%97%E5%88%B0xpath%E8%B7%AF%E5%BE%84%E9%87%87%E9%9B%86%E5%BF%85%E5%A4%87/"/>
    <id>http://yoursite.com/2016/03/06/强大网页分析解析辅助xpath插件，轻松得到xpath路径采集必备/</id>
    <published>2016-03-06T05:43:56.000Z</published>
    <updated>2017-11-12T10:29:25.698Z</updated>
    
    <content type="html"><![CDATA[<p>XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。</p><p>而xpath也广泛应用于采集数据，我们来看看这一款xpath怎么使用。</p><p><img src="http://www.xxindu.com/uploads2/allimg/171108/1-1G10Q43324I2.jpg" alt="Github"></p><p> 我们清楚限制条件，轻松获取到所有数据，</p><p><img src="http://www.xxindu.com/uploads2/allimg/171108/1-1G10Q4352bc.jpg" alt="Github"></p><p> 使用非常简单，及时没有学过xpath也能轻松解决问题。</p><p> 下载地址：<a href="http://www.xxindu.com/upfile/xpath-helper.zip" target="_blank" rel="external">http://www.xxindu.com/upfile/xpath-helper.zip</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;XPath 使用路径表达式来选取 XML 文档中的节点或节点集。节点是通过沿着路径 (path) 或者步 (steps) 来选取的。&lt;/p&gt;
&lt;p&gt;而xpath也广泛应用于采集数据，我们来看看这一款xpath怎么使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>javascript中Ajax的简单封装</title>
    <link href="http://yoursite.com/2016/03/06/javascript%E4%B8%ADAjax%E7%9A%84%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2016/03/06/javascript中Ajax的简单封装/</id>
    <published>2016-03-06T05:43:56.000Z</published>
    <updated>2017-11-12T10:34:18.715Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1、封裝AJAX函數</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nativeAjax</span>(<span class="params">option,success,error</span>)</span>&#123;</div><div class="line">    <span class="comment">// 定义domain,方便环境切换</span></div><div class="line">    <span class="keyword">var</span> domain=<span class="string">'https://'</span> + <span class="built_in">window</span>.location.host + <span class="string">'/'</span>;</div><div class="line">    <span class="keyword">var</span> url=domain+option.urlStr;</div><div class="line">    <span class="keyword">var</span> type=option.ajaxType;</div><div class="line">    <span class="keyword">var</span> data=option.ajaxData;</div><div class="line">    <span class="keyword">var</span> xhrRequest=<span class="literal">null</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">        xhrRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        xhrRequest = <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> str=<span class="string">""</span>;</div><div class="line">    xhrRequest.open(type,url,<span class="literal">true</span>);</div><div class="line">    <span class="keyword">if</span>(type===<span class="string">"POST"</span>&amp;&amp;data!=<span class="literal">null</span>)&#123;</div><div class="line">        xhrRequest.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded;charset=utf-8"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</div><div class="line">            str+=<span class="string">'&amp;'</span>+key+<span class="string">'='</span>+data[key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">str=str.slice(<span class="number">1</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">str=<span class="literal">null</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line">    xhrRequest.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhrRequest.readyState==<span class="number">4</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(xhrRequest.status==<span class="number">200</span>)&#123;</div><div class="line">                <span class="comment">// 1.1、格式化返回的数据</span></div><div class="line">                <span class="keyword">var</span> responseData=<span class="built_in">JSON</span>.parse(xhrRequest.responseText);</div><div class="line">                <span class="comment">// 1.2、这里操作数据--------</span></div><div class="line">                success(responseData);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">// 1.3、没成功返回HTTP状态码</span></div><div class="line">                error(xhrRequest.status);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhrRequest.send(str);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 2、POST：定義請求參數</span></div><div class="line"><span class="keyword">var</span> postOption=&#123;</div><div class="line">    ajaxType:<span class="string">"POST"</span>,</div><div class="line">    urlStr:<span class="string">"v2/html/broke/get_broke_ranked_info"</span>,</div><div class="line">    ajaxData:&#123;                                        </div><div class="line">        <span class="string">"HTTP_USER_TOKEN"</span>:token,</div><div class="line">        <span class="string">"HTTP_USER_UID"</span>:pfid, </div><div class="line">        <span class="string">"anchor_pfid"</span>:anchor_pfid,</div><div class="line">        <span class="string">"broke_pfid"</span>:pfid,</div><div class="line">        <span class="string">"date"</span>:date</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 3、调用AJAX</span></div><div class="line">nativeAjax(postOption,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// 3.1、请求成功回调</span></div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="comment">// 3.2、请求失败回调,返回HTTP状态码</span></div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//4、GET：定义请求参数</span></div><div class="line"><span class="keyword">var</span> getOption=&#123;</div><div class="line">    ajaxType:<span class="string">"GET"</span>,    </div><div class="line">    urlStr:<span class="string">"v2/html/broke/get_broke_ranked_info"</span>,</div><div class="line">    ajaxData:<span class="literal">null</span>        </div><div class="line">&#125;</div><div class="line">Ajax(getOption,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">// 成功函数</span></div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="comment">// 失败返回HTTP状态码</span></div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 使用说明</span></div><div class="line"><span class="comment">// 一、option必须</span></div><div class="line">option=&#123;</div><div class="line">    <span class="comment">//1、ajaxType必须："GET"或者"POST"</span></div><div class="line">    ajaxType:<span class="string">""</span>,</div><div class="line">    <span class="comment">//2、urlStr必须："string类型"</span></div><div class="line">    urlStr:<span class="string">""</span>,</div><div class="line">    <span class="comment">//3、必须：POST时候为object&#123;key:value&#125;，GET的时候直接为：null</span></div><div class="line">    ajaxData:<span class="literal">null</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 二、success请求成功回调必须</span></div><div class="line"><span class="comment">// 三：error请求失败回调必须</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>用CSS开启硬件加速来提高性能</title>
    <link href="http://yoursite.com/2016/03/06/%E7%94%A8CSS%E5%BC%80%E5%90%AF%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E6%9D%A5%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2016/03/06/用CSS开启硬件加速来提高性能/</id>
    <published>2016-03-06T05:43:56.000Z</published>
    <updated>2017-11-07T14:34:20.861Z</updated>
    
    <content type="html"><![CDATA[<p>现在大多数电脑的显卡都支持硬件加速。鉴于此，我们可以发挥GPU的力量，从而使我们的网站或应用表现的更为流畅。</p><h3 id="在桌面端和移动端用CSS开启硬件加速"><a href="#在桌面端和移动端用CSS开启硬件加速" class="headerlink" title="在桌面端和移动端用CSS开启硬件加速"></a>在桌面端和移动端用CSS开启硬件加速</h3><p>CSS animations, transforms 以及 transitions 不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。<br>现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(250px,250px,250px)</div><div class="line">   <span class="built_in">rotate3d</span>(250px,250px,250px,-120deg)</div><div class="line">   <span class="built_in">scale3d</span>(0.5, 0.5, 0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。<br>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">-o-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="comment">/* Other transform properties here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-backface-visibility</span>: hidden;</div><div class="line">   <span class="attribute">-moz-backface-visibility</span>: hidden;</div><div class="line">   <span class="attribute">-ms-backface-visibility</span>: hidden;</div><div class="line">   <span class="attribute">backface-visibility</span>: hidden;</div><div class="line"> </div><div class="line">   <span class="attribute">-webkit-perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="attribute">-moz-perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="attribute">-ms-perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="attribute">perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="comment">/* Other transform properties here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在webkit内核的浏览器中，另一个行之有效的方法是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">  <span class="comment">/* Other transform properties here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。</p><h3 id="通过-webkit-transform-transition3d-translateZ开启GPU硬件加速的适用范围："><a href="#通过-webkit-transform-transition3d-translateZ开启GPU硬件加速的适用范围：" class="headerlink" title="通过-webkit-transform:transition3d/translateZ开启GPU硬件加速的适用范围："></a>通过-webkit-transform:transition3d/translateZ开启GPU硬件加速的适用范围：</h3><ul><li>使用很多大尺寸图片(尤其是PNG24图)进行动画的页面。</li><li>页面有很多大尺寸图片并且进行了css缩放处理，页面可以滚动时。</li><li>使用background-size:cover设置大尺寸背景图，并且页面可以滚动时。(详见:<a href="https://coderwall.com/p/j5udlw" target="_blank" rel="external">https://coderwall.com/p/j5udlw</a>)</li><li>编写大量DOM元素进行CSS3动画时(transition/transform/keyframes/absTop&amp;Left)</li><li>使用很多PNG图片拼接成CSS Sprite时</li></ul><h3 id="如何监测动画帧速率"><a href="#如何监测动画帧速率" class="headerlink" title="如何监测动画帧速率"></a>如何监测动画帧速率</h3><p>推荐两种实时监测网页渲染帧速率的方法：</p><ol><li>Chrome的DevTool中TimeLine的Frame模块<br><img src="/img/timeline-500x303.jpg" alt="这里写图片描述"><br>2.地址栏输入”chrome:flags”搜索”fps”，将”FPS计数器”开启，浏览器重启后右上角会实时显示帧速率。<br><img src="/img/FPS_counter.png" alt="这里写图片描述"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在大多数电脑的显卡都支持硬件加速。鉴于此，我们可以发挥GPU的力量，从而使我们的网站或应用表现的更为流畅。&lt;/p&gt;
&lt;h3 id=&quot;在桌面端和移动端用CSS开启硬件加速&quot;&gt;&lt;a href=&quot;#在桌面端和移动端用CSS开启硬件加速&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Css" scheme="http://yoursite.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>CSS自适应布局</title>
    <link href="http://yoursite.com/2016/03/06/CSS%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2016/03/06/CSS自适应布局/</id>
    <published>2016-03-06T05:43:56.000Z</published>
    <updated>2017-11-07T15:06:58.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="尺寸相关"><a href="#尺寸相关" class="headerlink" title="尺寸相关"></a>尺寸相关</h3><p>为什么要先说尺寸呢？因为尺寸在布局中的作用非常核心，布局方式定位这些只是改变了元素之间的关系，没有尺寸就什么也不是。比如我们通常会用margin来控制跟其他元素的距离，这就是布局。<br>很多人都会觉得，什么width、margin太简单了，早就掌握了。这种心态我一开始学习CSS的时候也有，觉得很好理解很简单，但是后面才发现自己原来很多东西都没真正掌握。看看张鑫旭大神给我们上的政治课：<br><a href="http://www.zhangxinxu.com/wordpress/2012/07/bottleneck-css-study/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/2012/07/bottleneck-css-study/</a> </p><p>先说说百分比，百分比是相对父对象的，这里特性非常好用，很多时候会用在自适应布局上面。浏览器尺寸的改变，就是根节点html的长宽改变，我们可以用%来将浏览器尺寸和元素尺寸联系起来，做到自适应。<br>另外一个比较有意思的是auto，auto是很多尺寸值的默认值，也就是由浏览器自动计算。首先是块级元素水平方向的auto，块级元素的margin、border、padding以及content宽度之和等于父元素width。使用auto属性在父元素宽度变化的时候，该元素的宽度也会随之变化。</p><p>但是当该元素被设为浮动时，该元素的width就变成了内容的宽度了，由内容撑开，也就是所谓的有了包裹性。overflow | position:absolute | float:left/right都可以产生包裹性，替换元素也同样具有包裹性。在具有包裹性的元素上想利用width : auto；来让元素宽度自适应浏览器宽是不行的。</p><p>高度方向：外边距重叠，外边距auto为0，这两点需要注意。书写方向什么的，接触比较少就不扯了。那为什么margin：auto对不能计算垂直方向的值呢？很简单，垂直方向是被设计成可以无限扩展的，内容越多浏览器便产生滚动条来扩展，所以垂直方向都找不到一个计算基准，以此返回一个false，便成了0。用处：通过width、height控制大小，各个方向的margin值控制与边界或者其他元素的距离来定位。</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>目前PC网站大多使用float布局，从成本上考虑大改的概率很小，所以不要说浮动无用，总是会有机会让你维护的！代表网站：淘宝、腾讯、百度，好吧BAT都到齐了。</p><p>浮动听得多了，博客园上关于用浮动布局的介绍也非常的多。浮动原本用于文本环绕，但却在布局被发扬光大，这就是命！我的理解：浮动布局的核心就是让元素脱离普通流，然后使用width/height，margin/padding将元素定位。脱离普通流的元素，就像脱离地心引力一样，与普通流不在一个高度上。这个跟图层的概念类似。高度不同所以可以叠在其他元素上面产生重叠或者使用负边距跑到父元素外，理解了这一点浮动布局就很好理解了。<br>下面用个圣杯布局的例子说明一下，理解了这个之后其他布局更加简单：<br>left，宽度固定,高度可固定也可由内容撑开<br>right，宽度固定，高度可固定也可由内容撑开<br>center，可以自适应浏览器宽度，高度可固定也可由内容撑开。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>宽度自适应布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.wrap</span> &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#D66464</span>;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></div><div class="line"><span class="undefined">                content: "";</span></div><div class="line"><span class="undefined">                clear: both;</span></div><div class="line"><span class="undefined">                display: block;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">                float: left;</span></div><div class="line"><span class="undefined">                width: 100px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#00f</span>;</span></div><div class="line"><span class="undefined">                height: 180px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">                float: right;</span></div><div class="line"><span class="undefined">                width: 150px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#0f0</span>;</span></div><div class="line"><span class="undefined">                height: 200px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#FFFFFF</span>;</span></div><div class="line"><span class="undefined">                margin-left: 110px;</span></div><div class="line"><span class="undefined">                margin-right: 160px;</span></div><div class="line"><span class="undefined">                height: 150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap clearfix"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left，宽度固定，高度可固定也可以由内容撑开。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right，宽度固定，高度可固定也可以由内容撑开。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>center，可以自适应浏览器宽度，高度可固定也可以由内容撑开。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>原理非常简单，左右侧边栏定宽并浮动，中部内容区放最后不浮动、默认width：auto并设置相应外边距，让左右侧边栏浮动到上面。注意：子元素设置为浮动之后，父对象的高度就坍塌了，需要设置父对象后的元素清除浮动，这样父对象的高度才能被浮动子元素撑起来了。<br>当然，我们也要问一下，为啥父对象高度会坍塌呢？上面也说过了，浮动元素已经脱离了普通流，父对象所在的普通流比喻成地表，那浮动元素就已经上天了。但是父对象还在地表啊，从外太空看浮动元素在父对象里面，但是其实并不在，又怎么能撑开父对象呢？宽度如果我们不设置的话，其实也是为0的，因为父对象里面空空如也，所以宽高为0。<br>要撑开的办法就两个，1是让父对象也上天（。。。你咋不上天呢），2是把浮动元素的边框边界拉下来。</p><p>父对象也上天（即浮动）的话，那就不能实现宽度自适应了。因为float元素的width：auto是包裹内容的，参考前面说的！<br>办法2就是在后面的元素里加一个clear语句。说到这个问题就要扯到clear与BFC了，我就不献丑了。传送门：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear</a><br>这个三列布局还有个双飞（是双飞翼！想啥呢）的变种，就是在HTML中center部分也就是内容区提到最前面，也就是内容先行渲染。在网络不好的时候，左右双翼能不能出来不要紧，先让主体内容出来！这种想法，明显的优秀工程师思维，但，尼玛的双翼都是广告啊。广告不出来，哪能赚钱养你们这群工程师？所以提出双飞的玉伯才离开了淘宝？？？（纯属意淫，如真属实，当我扯淡，哈哈哈！）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>宽度自适应布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.wrap</span> &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#FBD570</span>;</span></div><div class="line"><span class="undefined">                margin-left: 100px;</span></div><div class="line"><span class="undefined">                margin-right: 150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></div><div class="line"><span class="undefined">                content: "";</span></div><div class="line"><span class="undefined">                clear: both;</span></div><div class="line"><span class="undefined">                display: block;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">                float: left;</span></div><div class="line"><span class="undefined">                width: 100px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#00f</span>;</span></div><div class="line"><span class="undefined">                height: 180px;</span></div><div class="line"><span class="undefined">                margin-left: calc(-100% - 100px); </span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">                float: right;</span></div><div class="line"><span class="undefined">                width: 150px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#0f0</span>;</span></div><div class="line"><span class="undefined">                height: 200px;</span></div><div class="line"><span class="undefined">                margin-right: -150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#B373DA</span>;</span></div><div class="line"><span class="undefined">                height: 150px;</span></div><div class="line"><span class="undefined">                float: left;</span></div><div class="line"><span class="undefined">                width: 100%;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap clearfix"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>center，可以自适应浏览器宽度，高度可固定也可以由内容撑开。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left，宽度固定，高度可固定也可以由内容撑开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right，宽度固定，高度可固定也可以由内容撑开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>思路：</p><p>1)既然HTML里面要让center放前面，为了让left跑到center前面，那center也必须浮动了，否则因为都是块元素他们会分两行。<br>2)浮动之后还要让center宽度自适应，那明显width只能100%，然后在父元素中设width:auto，还有两侧margin，其实也就是父对象宽度自适应，center只是继承content的宽度。<br>3)对left使用负的margin让他们浮动到上方去。<br>代码里面我用到了一个calc()，这个CSS3带来的计算函数简直酷毙了！本例里如果不使用calc函数，那么就需要wrap左边距为0，left左边距-100%，然后center多加一层子块DIV设置margin-left：100px，可以达到同样的效果！calc函数与百分比配合就足以实现自适应的要求！目前所有的自适应布局都在利用浏览器来为我们计算尺寸，但是有了calc之后我们就可以自己制定规则！单是想想都高潮了吧？<br>总结：使用浮动来进行布局，一个比较大的问题是清除浮动。这个可以使用一个after伪类来清除。更大的问题是浮动性像水一样向上流动，难以把握。在元素较多而且元素高度尺寸不一的情况下，单纯使用浮动只能实现上端对齐，这对于适应多种设备的布局就显得力不从心了。目前的做法是牺牲一部分内容，将元素做成等高排列，从美观上看也当然也是极好的，比参差不齐的排列要美观。</p><h3 id="普通流布局"><a href="#普通流布局" class="headerlink" title="普通流布局"></a>普通流布局</h3><p>普通流布局：display : inline-block！这是一个传说中取代float布局的存在。看了一些网站，PC端浮动为主，移动端的也用的不多啊，已经有些使用flex的了，说好的inline-block一统江湖呢？<br>使用inline-block之前先处理点小障碍：inline-block元素会有4px左右的空隙，这个是因为我们写代码时候的换行符所致。</p><p>解决办法很简单：在inline-block的父元素中设置样式font-size：0；letter-spacing: -4px; 然后设置inline-block的所有兄弟元素 font-size：值；letter-spacing: 值px;  恢复正常的显示。</p><p>另外还有一点需要注意的是inline-block默认是基线对齐的，而inline-block的基线又跟文本基线一致，所以在内容不同的时候并不能水平对齐。只需要用vertical-align显式声明一下top/bottom/middle对齐即可。这里补充一下基线的内容，没你想的那么简单哦。分有文字和无文字两种情况：<br>1）无文字：容器的margin-bottom下边缘。与容器内部的元素没一毛钱关系。<br>2）有文字：最后一行文字的下边缘，跟文字块（p,h等）的margin、padding没关系！注意是最后一行，无论文字在什么子对象容器内在什么位置都没关系，浏览器会找到最后一行文字对齐底部。</p><p>inline-block的基线是最后一行文字的底部，flex里面的基线是第一行文字的底部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>宽度自适应布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.wrap</span> &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#FBD570</span>;</span></div><div class="line"><span class="undefined">                font-size: 0;</span></div><div class="line"><span class="css">                <span class="selector-tag">letter-spacing</span>: <span class="selector-tag">-4px</span>;  <span class="comment">/*用于兼容safari，根据不同字体字号或许需要做一定的调整*/</span></span></div><div class="line"><span class="undefined">                margin-left: 100px;</span></div><div class="line"><span class="undefined">                margin-right: 150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.wrap</span> * &#123;</span></div><div class="line"><span class="undefined">                font-size: 1rem;</span></div><div class="line"><span class="undefined">                letter-spacing: normal;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">                display: inline-block;</span></div><div class="line"><span class="undefined">                vertical-align: top;</span></div><div class="line"><span class="undefined">                width: 100px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#00f</span>;</span></div><div class="line"><span class="undefined">                height: 180px;</span></div><div class="line"><span class="undefined">                margin-left: -100px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">                display: inline-block;</span></div><div class="line"><span class="undefined">                vertical-align: top;</span></div><div class="line"><span class="undefined">                   width: 150px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#0f0</span>;</span></div><div class="line"><span class="undefined">                height: 200px;</span></div><div class="line"><span class="undefined">                margin-right: -150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">                display: inline-block;</span></div><div class="line"><span class="undefined">                vertical-align: top;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#B373DA</span>;</span></div><div class="line"><span class="undefined">                height: 150px;</span></div><div class="line"><span class="undefined">                min-width: 150px;</span></div><div class="line"><span class="undefined">                width: 100%;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left，宽度高度固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>center，可以自适应浏览器宽度，高度固定。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right，宽度高度固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>这里也没什么好说的，用到的也是width：auto和width：100%这两点，简单知识点的简单用法。<br>双飞的话，代码跟圣杯的基本相同，注意在html的顺序变为center&gt;right&gt;left，只改左栏移动的margin-left: calc(-100% - 100px)到预定位置即可。不能用calc的话可以在center里面再加一层，跟浮动一样的处理方式。更简单的方法是使用CSS3带给我们的box-sizing属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>宽度自适应布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.wrap</span> &#123;</span></div><div class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#FBD570</span>;</span></div><div class="line"><span class="undefined">                font-size: 0;</span></div><div class="line"><span class="css">                <span class="selector-tag">letter-spacing</span>: <span class="selector-tag">-4px</span>;  <span class="comment">/*用于兼容safari，根据不同字体字号或许需要做一定的调整*/</span></span></div><div class="line"><span class="undefined">                margin-right: 150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.wrap</span> * &#123;</span></div><div class="line"><span class="undefined">                font-size: 1rem;</span></div><div class="line"><span class="undefined">                letter-spacing: normal;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">                display: inline-block;</span></div><div class="line"><span class="undefined">                vertical-align: top;</span></div><div class="line"><span class="undefined">                width: 100px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#00f</span>;</span></div><div class="line"><span class="undefined">                height: 180px;</span></div><div class="line"><span class="undefined">                margin-left: -100%;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">                display: inline-block;</span></div><div class="line"><span class="undefined">                vertical-align: top;</span></div><div class="line"><span class="undefined">                   width: 150px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#0f0</span>;</span></div><div class="line"><span class="undefined">                height: 200px;</span></div><div class="line"><span class="undefined">                margin-right: -150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">                display: inline-block;</span></div><div class="line"><span class="undefined">                vertical-align: top;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#B373DA</span>;</span></div><div class="line"><span class="undefined">                height: 150px;</span></div><div class="line"><span class="undefined">                min-width: 150px;</span></div><div class="line"><span class="undefined">                width: 100%;</span></div><div class="line"><span class="undefined">                box-sizing: border-box;</span></div><div class="line"><span class="undefined">                padding-left: 100px;</span></div><div class="line"><span class="undefined">                background-origin: content-box;</span></div><div class="line"><span class="undefined">                background-clip: content-box;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">                center，可以自适应浏览器宽度，高度固定。</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right，宽度高度固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left，宽度高度固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>相比浮动inline-block更加容易理解，也更符合我们的认知，结合盒子模型的几个控制属性就可以进行布局了。对于元素高度不同的情况，目前浮动布局的做法都是将元素做成等高元素进行展现，这从美学上看也符合整齐的要求，不过牺牲了一部分内容。但inline-block有vertical-align属性，可以很好地解决元素高度不同而带来的布局问题。用过之后，你也会喜欢上inline-block的。。。至少我会！</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>前面的浮动和普通流中其实定位都是靠盒子模型控制的，与我们常说的定位还是有差别的。而绝对定位就是我们平常所说的定位，给定参考坐标系+坐标确定位置。关于绝对定位的资料太多，我就不说了。提一点就是absolute定位的基准是最近的非static定位父对象，而fixed是相对html根节点的定位。两种定位都会脱离普通流，跟之前说的浮动一样，上天了</p><p>当然，他们跟浮动在空间中的位置还是有差别的，项目中有遇到这个问题的请参考张大婶的文章： <a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/</a>  还是要结合项目来看，否则看过也只是看过而已，并不会存到你的脑子里，毕竟还是相当抽象相当理论性的东西。借用张大神的一个总结图：</p><p>使用绝对定位（特指absolute）做自适应布局跟前面两种方式没太大差别，宽度自适应还是在auto和100%上做文章，而位置则由top/bottom/left/right等控制。还是以圣杯布局来举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>宽度自适应布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">            <span class="selector-class">.wrap</span> &#123;</span></div><div class="line"><span class="undefined">                position: relative;</span></div><div class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#FBD570</span>;</span></div><div class="line"><span class="undefined">                margin-left: 100px;</span></div><div class="line"><span class="undefined">                margin-right: 150px;</span></div><div class="line"><span class="undefined">                height: 250px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">                position: absolute;</span></div><div class="line"><span class="undefined">                top: 0;</span></div><div class="line"><span class="undefined">                left: -100px;</span></div><div class="line"><span class="undefined">                width: 100px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#00f</span>;</span></div><div class="line"><span class="undefined">                height: 180px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">                position: absolute;</span></div><div class="line"><span class="undefined">                top: 0;</span></div><div class="line"><span class="undefined">                right: 0;</span></div><div class="line"><span class="undefined">                   width: 150px;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#0f0</span>;</span></div><div class="line"><span class="undefined">                height: 200px;</span></div><div class="line"><span class="undefined">                margin-right: -150px;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="css">            <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">                position: absolute;</span></div><div class="line"><span class="undefined">                top: 0;</span></div><div class="line"><span class="undefined">                left: 0;</span></div><div class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#B373DA</span>;</span></div><div class="line"><span class="undefined">                height: 150px;</span></div><div class="line"><span class="undefined">                min-width: 150px;</span></div><div class="line"><span class="undefined">                width: 100%;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">                center，可以自适应浏览器宽度，高度固定。</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left，宽度高度固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right，宽度高度固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>父元素为relative，子元素为absolute，这样的话，又会出现跟浮动一样的问题：父对象高度坍塌，子元素不能撑起父对象。原因也跟浮动一样，解决办法的话目前我知道的只有给父对象指定一个确定height值，大家如果有更好的办法，请联系我！</p><p>总结：单纯使用绝对定位进行自适应布局的情况很少，一般绝对定位都用在尺寸固定的元素定位上。而且fixed定位的渲染效率很低，因为它会频繁触发浏览器的重排。另外提一点：CSS3的transform会对绝对定位产生影响哦~比如说让fixed定位不再固定在浏览器视窗的黑魔法：<a href="http://www.zhangxinxu.com/wordpress/2015/05/css3-transform-affect/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/2015/05/css3-transform-affect/</a> </p><h3 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h3><p>CSS3中对布局影响最大的莫过于弹性盒子模块了，这是一套区别于以往盒子模型布局的全新方案。上面几种方法你可以看到，为了实现自适应我们用的都是width：auto和100%的嵌套以及各种边距的移动定位，这套规则并不符合我们的认知。为什么不能开拓出一块区域，横竖排列都可以，内部所有元素的尺寸可以按照一个规则和这个区域的大小联系起来？终于CSS3做出了改变，引入了flex弹性布局方案，弹性盒布局有如下优势：</p><ol><li>独立的高度控制与对齐。</li><li>独立的元素顺序。</li><li>指定元素之间的关系。</li><li>灵活的尺寸与对齐方式。</li></ol><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes " target="_blank" rel="external">在MDN上有非常简单易懂的基础教程</a></p><p>上面也已经给出了圣杯布局的自适应布局方案，所以代码就不贴了不过这个例子实现的是3栏成比例缩放，左右栏如果需要固定值的话可以写成  flex: 0 0 150px; 的样式。</p><p>但是上面的教程没有给出各个属性的详细解释，建议看看阮一峰的博文，详细易懂而且配图超漂亮的有木有：<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><p>总结：弹性盒子在移动端的应用会越来越普遍，这套模型值得去好好研究。语法规则都是非常贴近人性，非常灵活，浏览器兼容性也非常好，当然国内百花齐放的移动浏览器会有哪些大坑呢？我们拭目以待~</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他包括position：relative和CSS3中的transform都可以实现定位，但是由于他们在原来的普通流中还占着一个坑，所以很少用来布局啥的。transform是个很酷炫的东西，可以用平面的素材做出很多3D的效果，而且不需要js就可以做，非常好玩。此文已经很长，就不多说了，以后会写一篇文章来专门说说她的故事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;尺寸相关&quot;&gt;&lt;a href=&quot;#尺寸相关&quot; class=&quot;headerlink&quot; title=&quot;尺寸相关&quot;&gt;&lt;/a&gt;尺寸相关&lt;/h3&gt;&lt;p&gt;为什么要先说尺寸呢？因为尺寸在布局中的作用非常核心，布局方式定位这些只是改变了元素之间的关系，没有尺寸就什么也不是。比如我们
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Css" scheme="http://yoursite.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>用CSS开启硬件加速来提高性能</title>
    <link href="http://yoursite.com/2016/03/06/Spring%20Cloud%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2016/03/06/Spring Cloud概述/</id>
    <published>2016-03-06T05:43:56.000Z</published>
    <updated>2017-11-12T10:45:25.386Z</updated>
    
    <content type="html"><![CDATA[<p>现在大多数电脑的显卡都支持硬件加速。鉴于此，我们可以发挥GPU的力量，从而使我们的网站或应用表现的更为流畅。</p><h3 id="在桌面端和移动端用CSS开启硬件加速"><a href="#在桌面端和移动端用CSS开启硬件加速" class="headerlink" title="在桌面端和移动端用CSS开启硬件加速"></a>在桌面端和移动端用CSS开启硬件加速</h3><p>CSS animations, transforms 以及 transitions 不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。<br>现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(250px,250px,250px)</div><div class="line">   <span class="built_in">rotate3d</span>(250px,250px,250px,-120deg)</div><div class="line">   <span class="built_in">scale3d</span>(0.5, 0.5, 0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。<br>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">-o-transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0);</div><div class="line">   <span class="comment">/* Other transform properties here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-backface-visibility</span>: hidden;</div><div class="line">   <span class="attribute">-moz-backface-visibility</span>: hidden;</div><div class="line">   <span class="attribute">-ms-backface-visibility</span>: hidden;</div><div class="line">   <span class="attribute">backface-visibility</span>: hidden;</div><div class="line"> </div><div class="line">   <span class="attribute">-webkit-perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="attribute">-moz-perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="attribute">-ms-perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="attribute">perspective</span>: <span class="number">1000</span>;</div><div class="line">   <span class="comment">/* Other transform properties here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在webkit内核的浏览器中，另一个行之有效的方法是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cube</span> &#123;</div><div class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">   <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</div><div class="line">  <span class="comment">/* Other transform properties here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。</p><h3 id="通过-webkit-transform-transition3d-translateZ开启GPU硬件加速的适用范围："><a href="#通过-webkit-transform-transition3d-translateZ开启GPU硬件加速的适用范围：" class="headerlink" title="通过-webkit-transform:transition3d/translateZ开启GPU硬件加速的适用范围："></a>通过-webkit-transform:transition3d/translateZ开启GPU硬件加速的适用范围：</h3><ul><li>使用很多大尺寸图片(尤其是PNG24图)进行动画的页面。</li><li>页面有很多大尺寸图片并且进行了css缩放处理，页面可以滚动时。</li><li>使用background-size:cover设置大尺寸背景图，并且页面可以滚动时。(详见:<a href="https://coderwall.com/p/j5udlw" target="_blank" rel="external">https://coderwall.com/p/j5udlw</a>)</li><li>编写大量DOM元素进行CSS3动画时(transition/transform/keyframes/absTop&amp;Left)</li><li>使用很多PNG图片拼接成CSS Sprite时</li></ul><h3 id="如何监测动画帧速率"><a href="#如何监测动画帧速率" class="headerlink" title="如何监测动画帧速率"></a>如何监测动画帧速率</h3><p>推荐两种实时监测网页渲染帧速率的方法：</p><ol><li>Chrome的DevTool中TimeLine的Frame模块<br><img src="/img/timeline-500x303.jpg" alt="这里写图片描述"><br>2.地址栏输入”chrome:flags”搜索”fps”，将”FPS计数器”开启，浏览器重启后右上角会实时显示帧速率。<br><img src="/img/FPS_counter.png" alt="这里写图片描述"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在大多数电脑的显卡都支持硬件加速。鉴于此，我们可以发挥GPU的力量，从而使我们的网站或应用表现的更为流畅。&lt;/p&gt;
&lt;h3 id=&quot;在桌面端和移动端用CSS开启硬件加速&quot;&gt;&lt;a href=&quot;#在桌面端和移动端用CSS开启硬件加速&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
