<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hanx碎片仓库</title>
  
  <subtitle>Time waits for no one</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-22T06:03:44.388Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo部署到Github完整步骤</title>
    <link href="http://yoursite.com/2017/01/17/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%AE%8C%E6%95%B4%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2017/01/17/Hexo部署到Github完整步骤/</id>
    <published>2017-01-17T09:53:50.000Z</published>
    <updated>2017-10-22T06:03:44.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><a href="https://nodejs.org/en/" target="_blank">安装Node.js</a></li><li><a href="https://git-scm.com/" target="_blank">安装Git官网</a></li><li><a href="https://hexo.io/zh-cn/" target="_blank">安装Hexo</a></li><li><a href="https://github.com/" target="_blank">注册Github账户</a></li></ol><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol><li>创建一个文件夹  <code>CD</code>  到当前目录</li><li><p>安装hexo到该文件夹。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i -g hexo</div></pre></td></tr></table></figure></li><li><p>安装完成后，将会看到如下目录结构<br><img src="http://img.blog.csdn.net/20171018203605199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="hexo目录结构"></p></li><li><p>测试是否安装成功，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure></li><li><p>打开页面 </p><pre><code>http://localhost:4000</code></pre></li></ol><h3 id="Github创建仓库"><a href="#Github创建仓库" class="headerlink" title="Github创建仓库"></a>Github创建仓库</h3><ol><li>登录Github，选择New repositor<br><img src="http://img.blog.csdn.net/20171018204044621?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Github"></li><li>填写Repositor 名`你的Github名称.github.io <strong>（注意！前缀必须是你的Github名称）</strong><br><img src="http://img.blog.csdn.net/20171018204401956?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ol><h3 id="创建SSH"><a href="#创建SSH" class="headerlink" title="创建SSH"></a>创建SSH</h3><ol><li>打开<strong>git-bash.exe</strong>，配置Github账户信息</li><li><p>在gitbash执行如下命令：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;你的电子邮箱&quot;</div></pre></td></tr></table></figure><p>接下来会提示你输入一个文件名来保存你的SSH key ，如果不输入直接回车，则会保存在默认的文件里<br>然后会提示你输入passphrases 会要求你输入两次密码</p></li><li>找到id_rsa.pub文件打开依次：<code>Ctrl+A</code>  <code>Ctrl+C</code> 复制信息</li></ol><h3 id="Github-添加-SSH"><a href="#Github-添加-SSH" class="headerlink" title="Github 添加 SSH"></a>Github 添加 SSH</h3><ol><li>点击<strong>Settings</strong><br><img src="http://img.blog.csdn.net/20171018205844760?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>依次点击左侧<strong>SSH and GPG keys</strong> 右侧 <strong>New SSH key</strong><br><img src="http://img.blog.csdn.net/20171018205805406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>Title随便填写，把刚才<strong>id_rsa.pub</strong>文件复制的信息粘贴到<strong>key</strong>中，然后点击<strong>Add SSH key</strong></li><li>在<strong>gitbash</strong>中验证是否添加成功，执行如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></li></ol><h3 id="配置Bolog"><a href="#配置Bolog" class="headerlink" title="配置Bolog"></a>配置Bolog</h3><ol><li>打开你博客文件夹找到<strong>_config.yml</strong>文件并打开</li><li>在最下面添加<div class="note default"><p>deploy:<br>type: git<br>      repo: git@github.com:hanx0610/hanx0610.github.io<br>      branch: master</p></div>（注意分号后有个空格）</li></ol><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><ol><li><p>安装组件，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></li><li><p>回到gitbash中，进入你的blog目录，分别依次执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>会提示你输入密码</p></li><li>打开页面<pre><code>http://Github用户名.github.io</code></pre></li></ol><h3 id="绑定到个人域名"><a href="#绑定到个人域名" class="headerlink" title="绑定到个人域名"></a>绑定到个人域名</h3><ol><li><p>执行如下命令得到 <code>IP</code> 地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ping http://Github用户名.github.io</div></pre></td></tr></table></figure></li><li><p>注册购买域名</p></li><li>解析DNS，<br> 添加解析记录 A (记录值为<code>IP</code>)<br> 添加解析记录 CNAME (记录值为<code>Github用户名.github.io</code>)<br><img src="http://img.blog.csdn.net/20171021215158539?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>打开博客文件夹下source目录创建一个txt文件写入你的域名，命名CNAME，保存<strong>去掉文件后缀名</strong><br> <img src="http://img.blog.csdn.net/20171021215116416?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjQxNDIyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot;&gt;安装Node.
      
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的设计java异常</title>
    <link href="http://yoursite.com/2016/04/28/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%AE%BE%E8%AE%A1java%E5%BC%82%E5%B8%B8%20/"/>
    <id>http://yoursite.com/2016/04/28/如何优雅的设计java异常 /</id>
    <published>2016-04-28T09:53:50.000Z</published>
    <updated>2017-10-22T08:29:54.593Z</updated>
    
    <content type="html"><![CDATA[<p>转自 <a href="http://lrwinx.github.io" target="_blank" rel="external">http://lrwinx.github.io</a></p><h3 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h3><div class="note default"><p>异常处理是程序开发中必不可少操作之一，但如何正确优雅的对异常进行处理确是一门学问，笔者根据自己的开发经验来谈一谈我是如何对异常进行处理的。<br>由于本文只作一些经验之谈，不涉及到基础知识部分，如果读者对异常的概念还很模糊，请先查看基础知识。</p></div><h3 id="如何选择异常类型"><a href="#如何选择异常类型" class="headerlink" title="如何选择异常类型"></a>如何选择异常类型</h3><h4 id="异常的类别"><a href="#异常的类别" class="headerlink" title="异常的类别"></a>异常的类别</h4><p>正如我们所知道的，java中的异常的超类是java.lang.Throwable(后文省略为Throwable),它有两个比较重要的子类,java.lang.Exception(后文省略为Exception)和java.lang.Error(后文省略为Error)，其中Error由JVM虚拟机进行管理,如我们所熟知的OutOfMemoryError异常等，所以我们本文不关注Error异常，那么我们细说一下Exception异常。<br>Exception异常有个比较重要的子类，叫做RuntimeException。我们将RuntimeException或其他继承自RuntimeException的子类称为非受检异常(unchecked Exception)，其他继承自Exception异常的子类称为受检异常(checked Exception)。本文重点来关注一下受检异常和非受检异常这两种异常。</p><h4 id="如何选择异常"><a href="#如何选择异常" class="headerlink" title="如何选择异常"></a>如何选择异常</h4><p>从笔者的开发经验来看，如果在一个应用中，需要开发一个方法(如某个功能的service方法)，这个方法如果中间可能出现异常，那么你需要考虑这个异常出现之后是否调用者可以处理，并且你是否希望调用者进行处理，如果调用者可以处理，并且你也希望调用者进行处理，那么就要抛出受检异常，提醒调用者在使用你的方法时，考虑到如果抛出异常时如果进行处理，相似的，如果在写某个方法时，你认为这是个偶然异常，理论上说，你觉得运行时可能会碰到什么问题，而这些问题也许不是必然发生的，也不需要调用者显示的通过异常来判断业务流程操作的，那么这时就可以使用一个RuntimeException这样的非受检异常.<br>好了，估计我上边说的这段话，你读了很多遍也依然觉得晦涩了。<br>那么，请跟着我的思路，在慢慢领会一下。</p><h4 id="什么时候才需要抛异常"><a href="#什么时候才需要抛异常" class="headerlink" title="什么时候才需要抛异常"></a>什么时候才需要抛异常</h4><p>首先我们需要了解一个问题，什么时候才需要抛异常？异常的设计是方便给开发者使用的，但不是乱用的，笔者对于什么时候抛异常这个问题也问了很多朋友，能给出准确答案的确实不多。其实这个问题很简单，如果你觉得某些”问题”解决不了了，那么你就可以抛出异常了。比如，你在写一个service,其中在写到某段代码处,你发现可能会产生问题，那么就请抛出异常吧，相信我，你此时抛出异常将是一个最佳时机。</p><h4 id="应该抛出怎样的异常"><a href="#应该抛出怎样的异常" class="headerlink" title="应该抛出怎样的异常"></a>应该抛出怎样的异常</h4><p>了解完了什么时候才需要抛出异常后，我们再思考一个问题，真的当我们抛出异常时，我们应该选用怎样的异常呢？究竟是受检异常还是非受检异常呢(RuntimeException)呢？我来举例说明一下这个问题，先从受检异常说起,比如说有这样一个业务逻辑，需要从某文件中读取某个数据，这个读取操作可能是由于文件被删除等其他问题导致无法获取从而出现读取错误，那么就要从redis或mysql数据库中再去获取此数据,参考如下代码，getKey(Integer)为入口程序. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">(Integer key)</span></span>&#123;</div><div class="line">    String  value;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        InputStream inputStream = getFiles(<span class="string">"/file/nofile"</span>);</div><div class="line">        <span class="comment">//接下来从流中读取key的value指</span></div><div class="line">        value = ...;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="comment">//如果抛出异常将从mysql或者redis进行取之</span></div><div class="line">        value = ...;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getFiles</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line">    InputStream inputStream = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        inputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"I/O读取错误"</span>,e.getCause());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inputStream;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">ok，看了以上代码以后，你也许心中有一些想法，原来受检异常可以控制义务逻辑，对，没错，通过受检异常真的可以控制业务逻辑，但是切记不要这样使用，我们应该合理的抛出异常，因为程序本身才是流程，异常的作用仅仅是当你进行不下去的时候找到的一个借口而已，它并不能当成控制程序流程的入口或出口，如果这样使用的话，是在将异常的作用扩大化，这样将会导致代码复杂程度的增加，耦合性会提高，代码可读性降低等问题。那么就一定不要使用这样的异常吗？其实也不是，在真的有这样的需求的时候，我们可以这样使用，只是切记，不要把它真的当成控制流程的工具或手段。那么究竟什么时候才要抛出这样的异常呢？要考虑，如果调用者调用出错后，一定要让调用者对此错误进行处理才可以，满足这样的要求时，我们才会考虑使用受检异常。</div><div class="line">接下来，我们来看一下非受检异常呢(RuntimeException)，对于RuntimeException这种异常，我们其实很多见，比如java.lang.NullPointerException／java.lang.IllegalArgumentException等，那么这种异常我们时候抛出呢？当我们在写某个方法的时候，可能会偶然遇到某个错误，我们认为这个问题时运行时可能为发生的，并且理论上讲，没有这个问题的话，程序将会正常执行的时候，它不强制要求调用者一定要捕获这个异常，此时抛出RuntimeException异常,举个例子，当传来一个路径的时候，需要返回一个路径对应的File对象:</div><div class="line">``` java</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    myTest.getFiles(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getFiles</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == path || <span class="string">""</span>.equals(path))&#123;</div><div class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> NullPointerException(<span class="string">"路径不能为空!"</span>);</div><div class="line">    &#125;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> file;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述例子表明，如果调用者调用getFiles(String)的时候如果path是空，那么就抛出空指针异常(它是RuntimeException的子类),调用者不用显示的进行try…catch…操作进行强制处理.这就要求调用者在调用这样的方法时先进行验证，避免发生RuntimeException.如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    String path = <span class="string">"/a/b.png"</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != path &amp;&amp; !<span class="string">""</span>.equals(path))&#123;</div><div class="line">        myTest.getFiles(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getFiles</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == path || <span class="string">""</span>.equals(path))&#123;</div><div class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> NullPointerException(<span class="string">"路径不能为空!"</span>);</div><div class="line">    &#125;</div><div class="line">    File file = <span class="keyword">new</span> File(path);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> file;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="应该选用哪种异常"><a href="#应该选用哪种异常" class="headerlink" title="应该选用哪种异常"></a>应该选用哪种异常</h4><p>通过以上的描述和举例，可以总结出一个结论，RuntimeException异常和受检异常之间的区别就是:是否强制要求调用者必须处理此异常，如果强制要求调用者必须进行处理，那么就使用受检异常，否则就选择非受检异常(RuntimeException)。一般来讲，如果没有特殊的要求，我们建议使用RuntimeException异常。</p><h3 id="场景介绍和技术选型"><a href="#场景介绍和技术选型" class="headerlink" title="场景介绍和技术选型"></a>场景介绍和技术选型</h3><h4 id="架构描述"><a href="#架构描述" class="headerlink" title="架构描述"></a>架构描述</h4><p>正如我们所知，传统的项目都是以MVC框架为基础进行开发的，本文主要从使用restful风格接口的设计来体验一下异常处理的优雅。<br>我们把关注点放在restful的api层(和web中的controller层类似)和service层，研究一下在service中如何抛出异常，然后api层如何进行捕获并且转化异常。<br>使用的技术是:spring-boot,jpa(hibernate),mysql,如果对这些技术不是太熟悉，读者需要自行阅读相关材料。</p><h4 id="业务场景描述"><a href="#业务场景描述" class="headerlink" title="业务场景描述"></a>业务场景描述</h4><p>选择一个比较简单的业务场景，以电商中的收货地址管理为例，用户在移动端进行购买商品时，需要进行收货地址管理，在项目中，提供一些给移动端进行访问的api接口，如:添加收货地址，删除收货地址，更改收货地址，默认收货地址设置，收货地址列表查询，单个收货地址查询等接口。</p><h4 id="构建约束条件"><a href="#构建约束条件" class="headerlink" title="构建约束条件"></a>构建约束条件</h4><p>ok，这个是设置好的一个很基本的业务场景，当然，无论什么样的api操作，其中都包含一些规则: </p><ul><li>添加收货地址:<br>入参:<ul><li>用户id </li><li>收货地址实体信息<br>约束:</li><li>用户id不能为空，且此用户确实是存在 的</li><li>收货地址的必要字段不能为 空</li><li>如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址 —</li></ul></li><li>删除收货地址<br>入参 :<ul><li>用户id </li><li>收货地址id<br>约束 :</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li><li>判断此收货地址是否为默认收货地址，如果是默认收货地址，那么不能进行删除</li></ul></li><li>更改收货地址:<br>入参:<ul><li>用户id <ul><li>收货地址id<br>约束:</li></ul></li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li></ul></li><li>默认地址设置:<br>入参:<ul><li>用户id </li><li>收货地址id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li></ul></li><li>收货地址列表查询:<br>入参:<ul><li>用户id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li></ul></li><li>单个收货地址查询:<br>入参:<ul><li>用户id </li><li>收货地址id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址<h4 id="约束判断和技术选型"><a href="#约束判断和技术选型" class="headerlink" title="约束判断和技术选型"></a>约束判断和技术选型</h4>对于上述列出的约束条件和功能列表，我选择几个比较典型的异常处理场景进行分析:添加收货地址，删除收货地址，获取收货地址列表。<br>那么应该有哪些必要的知识储备呢，让我们看一下收货地址这个功能:<br>添加收货地址中需要对用户id和收货地址实体信息就行校验，那么对于非空的判断，我们如何进行工具的选择呢？传统的判断如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 添加地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> address</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">addAddress</span><span class="params">(Integer uid,Address address)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != uid)&#123;</div><div class="line">        <span class="comment">//进行处理..</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul></li></ul><p>上边的例子，如果只判断uid为空还好，如果再去判断address这个实体中的某些必要属性是否为空，在字段很多的情况下，这无非是灾难性的。<br>那我们应该怎么进行这些入参的判断呢，给大家介绍两个知识点:</p><ol><li>Guava中的Preconditions类实现了很多入参方法的判断</li><li>jsr 303的validation规范(目前实现比较全的是hibernate实现的hibernate-validator)如果使用了这两种推荐技术，那么入参的判断会变得简单很多。推荐大家多使用这些成熟的技术和jar工具包，他可以减少很多不必要的工作量。我们只需要把重心放到业务逻辑上。而不会因为这些入参的判断耽误更多的时间。<h3 id="如何优雅的设计java异常"><a href="#如何优雅的设计java异常" class="headerlink" title="如何优雅的设计java异常"></a>如何优雅的设计java异常</h3><h4 id="domain介绍"><a href="#domain介绍" class="headerlink" title="domain介绍"></a>domain介绍</h4>根据项目场景来看，需要两个domain模型，一个是用户实体，一个是地址实体.<br>Address domain如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String province;<span class="comment">//省</span></div><div class="line">    <span class="keyword">private</span> String city;<span class="comment">//市</span></div><div class="line">    <span class="keyword">private</span> String county;<span class="comment">//区</span></div><div class="line">    <span class="keyword">private</span> Boolean isDefault;<span class="comment">//是否是默认地址</span></div><div class="line"></div><div class="line">    <span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.ALL&#125;)</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"uid"</span>)</div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>User domain如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">   <span class="meta">@GeneratedValue</span></div><div class="line">   <span class="keyword">private</span> Integer id;</div><div class="line">   <span class="keyword">private</span> String name;<span class="comment">//姓名</span></div><div class="line"></div><div class="line">    <span class="meta">@OneToMany</span>(cascade= CascadeType.ALL,mappedBy=<span class="string">"user"</span>,fetch = FetchType.LAZY)</div><div class="line">        <span class="keyword">private</span> Set&lt;Address&gt; addresses;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ok,上边是一个模型关系，用户-收货地址的关系是1-n的关系。上边的@Data是使用了一个叫做lombok的工具，它自动生成了Setter和Getter等方法，用起来非常方便，感兴趣的读者可以自行了解一下。 </p><h4 id="dao介绍"><a href="#dao介绍" class="headerlink" title="dao介绍"></a>dao介绍</h4><p>数据连接层，我们使用了spring-data-jpa这个框架，它要求我们只需要继承框架提供的接口，并且按照约定对方法进行取名，就可以完成我们想要的数据库操作。<br>用户数据库操作如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>收货地址操作如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAddressDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Address</span>,<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>正如读者所看到的，我们的DAO只需要继承JpaRepository,它就已经帮我们完成了基本的CURD等操作，如果想了解更多关于spring-data的这个项目，请参考一下spring的官方文档，它比不方案我们对异常的研究。</p><h4 id="Service异常设计"><a href="#Service异常设计" class="headerlink" title="Service异常设计"></a>Service异常设计</h4><p>ok，终于到了我们的重点了，我们要完成service一些的部分操作:添加收货地址，删除收货地址，获取收货地址列表.<br>首先看我的service接口定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAddressService</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 创建收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> address</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">Address <span class="title">createAddress</span><span class="params">(Integer uid,Address address)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 删除收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> aid</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAddress</span><span class="params">(Integer uid,Integer aid)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 查询用户的所有收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> uid</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">List&lt;Address&gt; <span class="title">listAddresses</span><span class="params">(Integer uid)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们来关注一下实现:</p><h4 id="添加收货地址"><a href="#添加收货地址" class="headerlink" title="添加收货地址"></a>添加收货地址</h4><p>首先再来看一下之前整理的约束条件:<br>入参:</p><ol><li>用户id</li><li>收货地址实体信息<br>约束: </li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址的必要字段不能为空</li><li>如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址<br>先看以下代码实现:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">createAddress</span><span class="params">(Integer uid, Address address)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    Preconditions.checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"找不到当前用户!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.收货地址的必要字段不能为空</span></div><div class="line">    BeanValidators.validateWithException(validator, address);</div><div class="line">    <span class="comment">//3.如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址</span></div><div class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(user.getAddresses()))&#123;</div><div class="line">        address.setIsDefault(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    address.setUser(user);</div><div class="line">    Address result = addressDao.save(address);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>其中，已经完成了上述所描述的三点约束条件，当三点约束条件都满足时，才可以进行正常的业务逻辑，否则将抛出异常(一般在此处建议抛出运行时异常-RuntimeException)。<br>介绍以下以上我所用到的技术:</p><ol><li>Preconfitions.checkNotNull(T t)这个是使用Guava中的com.google.common.base.Preconditions进行判断的，因为service中用到的验证较多，所以建议将Preconfitions改成静态导入的方式:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.base.Preconditions.checkNotNull;</div></pre></td></tr></table></figure></li></ol><p>当然Guava的github中的说明也建议我们这样使用。</p><ol><li>BeanValidators.validateWithException(validator, address);<br>这个使用了hibernate实现的jsr 303规范来做的，需要传入一个validator和一个需要验证的实体,那么validator是如何获取的呢,如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfigs</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="keyword">public</span> javax.validation.<span class="function">Validator <span class="title">getValidator</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LocalValidatorFactoryBean();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>他将获取一个Validator对象，然后我们在service中进行注入便可以使用了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Autowired</span>     </div><div class="line"><span class="keyword">private</span> Validator validator ;</div></pre></td></tr></table></figure></p><p>那么BeanValidators这个类是如何实现的？其实实现方式很简单，只要去判断jsr 303的标注注解就ok了。<br>那么jsr 303的注解写在哪里了呢？当然是写在address实体类中了:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line"><span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="meta">@NotNull</span></div><div class="line"><span class="keyword">private</span> String province;<span class="comment">//省</span></div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="keyword">private</span> String city;<span class="comment">//市</span></div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="keyword">private</span> String county;<span class="comment">//区</span></div><div class="line"><span class="keyword">private</span> Boolean isDefault = <span class="keyword">false</span>;<span class="comment">//是否是默认地址</span></div><div class="line"></div><div class="line"><span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.ALL&#125;)</div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"uid"</span>)</div><div class="line"><span class="keyword">private</span> User user;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>写好你需要的约束条件来进行判断，如果合理的话，才可以进行业务操作，从而对数据库进行操作。<br>这块的验证是必须的，一个最主要的原因是:这样的验证可以避免脏数据的插入。如果读者有正式上线的经验的话，就可以理解这样的一个事情，任何的代码错误都可以容忍和修改，但是如果出现了脏数据问题，那么它有可能是一个毁灭性的灾难。程序的问题可以修改，但是脏数据的出现有可能无法恢复。所以这就是为什么在service中一定要判断好约束条件，再进行业务逻辑操作的原因了。 </p><ol><li>此处的判断为业务逻辑判断，是从业务角度来进行筛选判断的，除此之外，有可能在很多场景中都会有不同的业务条件约束，只需要按照要求来做就好。<br><strong>对于约束条件的总结如下: </strong><ul><li>基本判断约束(null值等基本判断)</li><li>实体属性约束(满足jsr 303等基础判断)</li><li>业务条件约束(需求提出的不同的业务约束)<br><strong>当这个三点都满足时，才可以进行下一步操作</strong></li></ul></li></ol><p>ok,基本介绍了如何做一个基础的判断，那么再回到异常的设计问题上，上述代码已经很清楚的描述如何在适当的位置合理的判断一个异常了，那么如何合理的抛出异常呢？<br>只抛出RuntimeException就算是优雅的抛出异常吗？当然不是，对于service中的抛出异常，笔者认为大致有两种抛出的方法:</p><ol><li>抛出带状态码RumtimeException异常</li><li>抛出指定类型的RuntimeException异常</li></ol><p>相对这两种异常的方式进行结束，第一种异常指的是我所有的异常都抛RuntimeException异常，但是需要带一个状态码，调用者可以根据状态码再去查询究竟service抛出了一个什么样的异常。<br>第二种异常是指在service中抛出什么样的异常就自定义一个指定的异常错误，然后在进行抛出异常。<br>一般来讲，如果系统没有别的特殊需求的时候，在开发设计中，建议使用第二种方式。但是比如说像基础判断的异常，就可以完全使用guava给我们提供的类库进行操作。jsr 303异常也可以使用自己封装好的异常判断类进行操作，因为这两种异常都是属于基础判断，不需要为它们指定特殊的异常。但是对于第三点义务条件约束判断抛出的异常，就需要抛出指定类型的异常了。<br>对于<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"找不到当前用户!"</span>);</div></pre></td></tr></table></figure></p><p>定义一个特定的异常类来进行这个义务异常的判断<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotFindUserException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">NotFindUserException</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(<span class="string">"找不到此用户"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">NotFindUserException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(message);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后将此处改为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException(<span class="string">"找不到当前用户!"</span>);</div></pre></td></tr></table></figure></p><p>or<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException();</div></pre></td></tr></table></figure></p><p>ok,通过以上对service层的修改，代码更改如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Address <span class="title">createAddress</span><span class="params">(Integer uid, Address address)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException(<span class="string">"找不到当前用户!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.收货地址的必要字段不能为空</span></div><div class="line">    BeanValidators.validateWithException(validator, address);</div><div class="line">    <span class="comment">//3.如果用户还没有收货地址，当此收货地址创建时设置成默认收货地址</span></div><div class="line">    <span class="keyword">if</span>(ObjectUtils.isEmpty(user.getAddresses()))&#123;</div><div class="line">        address.setIsDefault(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    address.setUser(user);</div><div class="line">    Address result = addressDao.save(address);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p> 这样的service就看起来稳定性和理解性就比较强了。</p><p>####删除收货地址:<br>入参:</p><ol><li>用户id</li><li>收货地址id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的</li><li>收货地址不能为空，且此收货地址确实是存在的</li><li>判断此收货地址是否是用户的收货地址</li><li>判断此收货地址是否为默认收货地址，如果是默认收货地址，那么不能进行删除<br>它与上述添加收货地址类似，故不再赘述，delete的service设计如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAddress</span><span class="params">(Integer uid, Integer aid)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.收货地址不能为空，且此收货地址确实是存在的</span></div><div class="line">    checkNotNull(aid);</div><div class="line">    Address address = addressDao.findOne(aid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == address)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindAddressException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//3.判断此收货地址是否是用户的收货地址</span></div><div class="line">    <span class="keyword">if</span>(!address.getUser().equals(user))&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotMatchUserAddressException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//4.判断此收货地址是否为默认收货地址，如果是默认收货地址，那么不能进行删除</span></div><div class="line">    <span class="keyword">if</span>(address.getIsDefault())&#123;</div><div class="line">       <span class="keyword">throw</span>  <span class="keyword">new</span> DefaultAddressNotDeleteException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    addressDao.delete(address);</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>设计了相关的四个异常类:NotFindUserException,NotFindAddressException,NotMatchUserAddressException,DefaultAddressNotDeleteException.根据不同的业务需求抛出不同的异常。</p><h4 id="获取收货地址列表"><a href="#获取收货地址列表" class="headerlink" title="获取收货地址列表:"></a>获取收货地址列表:</h4><p>入参:</p><ol><li>用户id<br>约束:</li><li>用户id不能为空，且此用户确实是存在的<br>代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Address&gt; <span class="title">listAddresses</span><span class="params">(Integer uid)</span> </span>&#123;</div><div class="line">    <span class="comment">//============ 以下为约束条件   ==============</span></div><div class="line">    <span class="comment">//1.用户id不能为空，且此用户确实是存在的</span></div><div class="line">    checkNotNull(uid);</div><div class="line">    User user = userDao.findOne(uid);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == user)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFindUserException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//============ 以下为正常执行的业务逻辑   ==============</span></div><div class="line">    User result = userDao.findOne(uid);</div><div class="line">    <span class="keyword">return</span> result.getAddresses();</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="api异常设计"><a href="#api异常设计" class="headerlink" title="api异常设计"></a>api异常设计</h3><p>大致有两种抛出的方法:</p><ol><li>抛出带状态码RumtimeException异常 </li><li>抛出指定类型的RuntimeException异常<br>这个是在设计service层异常时提到的，通过对service层的介绍，我们在service层抛出异常时选择了第二种抛出的方式，不同的是，在api层抛出异常我们需要使用这两种方式进行抛出:要指定api异常的类型，并且要指定相关的状态码，然后才将异常抛出，这种异常设计的核心是让调用api的使用者更能清楚的了解发生异常的详细信息，除了抛出异常外，我们还需要将状态码对应的异常详细信息以及异常有可能发生的问题制作成一个对应的表展示给用户，方便用户的查询。（如github提供的api文档，微信提供的api文档等）,还有一个好处:如果用户需要自定义提示消息，可以根据返回的状态码进行提示的修改。<h4 id="api验证约束"><a href="#api验证约束" class="headerlink" title="api验证约束"></a>api验证约束</h4>首先对于api的设计来说，需要存在一个dto对象，这个对象负责和调用者进行数据的沟通和传递，然后dto-&gt;domain在传给service进行操作，这一点一定要注意，第二点，除了说道的service需要进行基础判断(null判断)和jsr 303验证以外，同样的，api层也需要进行相关的验证，如果验证不通过的话，直接返回给调用者，告知调用失败，不应该带着不合法的数据再进行对service的访问，那么读者可能会有些迷惑，不是service已经进行验证了，为什么api层还需要进行验证么？这里便设计到了一个概念:编程中的墨菲定律，如果api层的数据验证疏忽了，那么有可能不合法数据就带到了service层，进而讲脏数据保存到了数据库。</li></ol><p><strong>所以缜密编程的核心是:永远不要相信收到的数据是合法的。</strong></p><h4 id="api异常设计-1"><a href="#api异常设计-1" class="headerlink" title="api异常设计"></a>api异常设计</h4><p>设计api层异常时，正如我们上边所说的，需要提供错误码和错误信息，那么可以这样设计，提供一个通用的api超类异常，其他不同的api异常都继承自这个超类:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line"><span class="keyword">protected</span> Long errorCode ;</div><div class="line"><span class="keyword">protected</span> Object data ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Long errorCode,String message,Object data,Throwable e)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(message,e);</div><div class="line">    <span class="keyword">this</span>.errorCode = errorCode ;</div><div class="line">    <span class="keyword">this</span>.data = data ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Long errorCode,String message,Object data)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>(errorCode,message,data,<span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Long errorCode,String message)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>(errorCode,message,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(String message,Throwable e)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">null</span>,message,<span class="keyword">null</span>,e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiException</span><span class="params">(Throwable e)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> errorCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrorCode</span><span class="params">(Long errorCode)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.errorCode = errorCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.data = data;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后分别定义api层异常：ApiDefaultAddressNotDeleteException,ApiNotFindAddressException,ApiNotFindUserException,ApiNotMatchUserAddressException。<br>以默认地址不能删除为例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiDefaultAddressNotDeleteException</span> <span class="keyword">extends</span> <span class="title">ApiException</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ApiDefaultAddressNotDeleteException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(AddressErrorCode.DefaultAddressNotDeleteErrorCode, message, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>AddressErrorCode.DefaultAddressNotDeleteErrorCode就是需要提供给调用者的错误码。错误码类如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AddressErrorCode</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long DefaultAddressNotDeleteErrorCode = <span class="number">10001L</span>;<span class="comment">//默认地址不能删除</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NotFindAddressErrorCode = <span class="number">10002L</span>;<span class="comment">//找不到此收货地址</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NotFindUserErrorCode = <span class="number">10003L</span>;<span class="comment">//找不到此用户</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long NotMatchUserAddressErrorCode = <span class="number">10004L</span>;<span class="comment">//用户与收货地址不匹配</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ok,那么api层的异常就已经设计完了，在此多说一句，AddressErrorCode错误码类存放了可能出现的错误码，更合理的做法是把他放到配置文件中进行管理。</p><h4 id="api处理异常"><a href="#api处理异常" class="headerlink" title="api处理异常"></a>api处理异常</h4><p>api层会调用service层，然后来处理service中出现的所有异常，首先，需要保证一点，一定要让api层非常轻，基本上做成一个转发的功能就好(接口参数，传递给service参数，返回给调用者数据,这三个基本功能)，然后就要在传递给service参数的那个方法调用上进行异常处理。<br>此处仅以添加地址为例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> IAddressService addressService;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 添加收货地址</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> addressDTO</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> AddressDTO <span class="title">add</span><span class="params">(@Valid @RequestBody AddressDTO addressDTO)</span></span>&#123;</div><div class="line">    Address address = <span class="keyword">new</span> Address();</div><div class="line">    BeanUtils.copyProperties(addressDTO,address);</div><div class="line">    Address result;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        result = addressService.createAddress(addressDTO.getUid(), address);</div><div class="line">    &#125;<span class="keyword">catch</span> (NotFindUserException e)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApiNotFindUserException(<span class="string">"找不到该用户"</span>);</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;<span class="comment">//未知错误</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApiException(e);</div><div class="line">    &#125;</div><div class="line">    AddressDTO resultDTO = <span class="keyword">new</span> AddressDTO();</div><div class="line">    BeanUtils.copyProperties(result,resultDTO);</div><div class="line">    resultDTO.setUid(result.getUser().getId());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> resultDTO;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的处理方案是调用service时，判断异常的类型，然后将任何service异常都转化成api异常，然后抛出api异常，这是常用的一种异常转化方式。相似删除收货地址和获取收货地址也类似这样处理，在此，不在赘述。</p><h4 id="api异常转化"><a href="#api异常转化" class="headerlink" title="api异常转化"></a>api异常转化</h4><p>已经讲解了如何抛出异常和何如将service异常转化为api异常，那么转化成api异常直接抛出是否就完成了异常处理呢？ 答案是否定的，当抛出api异常后，我们需要把api异常返回的数据(json or xml)让用户看懂，那么需要把api异常转化成dto对象(ErrorDTO),看如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController.class)</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiExceptionHandlerAdvice</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Handle exceptions thrown by handlers.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@ExceptionHandler</span>(value = Exception.class)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;ErrorDTO&gt; <span class="title">exception</span><span class="params">(Exception exception,HttpServletResponse response)</span> </span>&#123;</div><div class="line">    ErrorDTO errorDTO = <span class="keyword">new</span> ErrorDTO();</div><div class="line">    <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> ApiException)&#123;<span class="comment">//api异常</span></div><div class="line">        ApiException apiException = (ApiException)exception;</div><div class="line">        errorDTO.setErrorCode(apiException.getErrorCode());</div><div class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//未知异常</span></div><div class="line">        errorDTO.setErrorCode(<span class="number">0L</span>);</div><div class="line">    &#125;</div><div class="line">    errorDTO.setTip(exception.getMessage());</div><div class="line">    ResponseEntity&lt;ErrorDTO&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(errorDTO,HttpStatus.valueOf(response.getStatus()));</div><div class="line">    <span class="keyword">return</span> responseEntity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorDTO</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Long errorCode;</div><div class="line">    <span class="keyword">private</span> String tip;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ok,这样就完成了api异常转化成用户可以读懂的DTO对象了，代码中用到了@ControllerAdvice，这是spring MVC提供的一个特殊的切面处理。</p><p>当调用api接口发生异常时，用户也可以收到正常的数据格式了,比如当没有用户(uid为2)时，却为这个用户添加收货地址,postman(Google plugin 用于模拟http请求)之后的数据:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"errorCode"</span>: <span class="number">10003</span>,</div><div class="line">  <span class="string">"tip"</span>: <span class="string">"找不到该用户"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文只从如何设计异常作为重点来讲解，涉及到的api传输和service的处理，还有待优化，比如api接口访问需要使用https进行加密，api接口需要OAuth2.0授权或api接口需要签名认证等问题，文中都未曾提到，本文的重心在于异常如何处理，所以读者只需关注涉及到异常相关的问题和处理方式就可以了。希望本篇文章对你理解异常有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转自 &lt;a href=&quot;http://lrwinx.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lrwinx.github.io&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;head
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现各种形状</title>
    <link href="http://yoursite.com/2016/01/22/CSS%E5%AE%9E%E7%8E%B0%E5%90%84%E7%A7%8D%E5%BD%A2%E7%8A%B6/"/>
    <id>http://yoursite.com/2016/01/22/CSS实现各种形状/</id>
    <published>2016-01-22T07:15:12.000Z</published>
    <updated>2017-10-22T08:40:29.714Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3的一个非常酷的特性是允许我们创建各种规则和不规则形状的图形，从而可以减少图片的使用。以前只能在Photoshop等图像编辑软件中制作的复杂图形现在使用CSS3就可以完成了。通过使用新的CSS属性，像transform和border-radius，我们可以创建非常漂亮和复杂的图形效果。</p><h3 id="椭圆形"><a href="#椭圆形" class="headerlink" title="椭圆形"></a>椭圆形</h3><p>椭圆形是正圆形的一个变体，设置椭圆形的CSS时，高度要设置为宽度的一半，border-radius属性也要做相应的改变：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#oval</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#e9337c</span>;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">100px</span> / <span class="number">50px</span>;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">100px</span> / <span class="number">50px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span> / <span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h3><p>要创建一个CSS三角形，需要使用border，通过设置不同边的透明效果，我们可以制作出三角形的现状。另外，在制作三角形时，宽度和高度要设置为0。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#triangle</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">140px</span> solid <span class="number">#fcf921</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">70px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">70px</span> solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>###倒三角形</p><p>与正三角形不同的是，倒三角形要设置的是border-top、border-left和border-right三条边的属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#triangle &#123;</div><div class="line">    width: 0;</div><div class="line">    height: 0;</div><div class="line">    border-top: 140px solid #20a3bf;</div><div class="line">    border-left: 70px solid transparent;</div><div class="line">    border-right: 70px solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="左三角形"><a href="#左三角形" class="headerlink" title="左三角形"></a>左三角形</h3><p>左三角形操作的是border-top、border-left和border-right三条边的属性，其中上边和下边要设置透明属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#triangle_left</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">70px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">140px</span> solid <span class="number">#6bbf20</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid transparent;</div><div class="line">&#125;      </div><div class="line">```                       </div><div class="line">### 右三角形</div><div class="line"></div><div class="line">``` <span class="selector-tag">css</span></div><div class="line">右三角形操作的是<span class="selector-tag">border-bottom</span>、<span class="selector-tag">border-left</span>和<span class="selector-tag">border-right</span>三条边的属性，其中上边和下边要设置透明属性。</div><div class="line"><span class="selector-id">#triangle_right</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">70px</span> solid transparent;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">140px</span> solid <span class="number">#ff5a00</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid transparent;</div><div class="line">&#125;</div><div class="line">```                              </div><div class="line">### 菱形</div><div class="line">制作菱形的方法有很多种。这里使用的是<span class="selector-tag">transform</span>属性和<span class="selector-tag">rotate</span>相结合，使两个正反三角形上下显示。</div><div class="line">``` <span class="selector-tag">css</span></div><div class="line"><span class="selector-id">#diamond</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">120px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#1eff00</span>;</div><div class="line"><span class="comment">/* Rotate */</span></div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line"><span class="comment">/* Rotate Origin */</span></div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-moz-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-ms-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-o-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">60px</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">310px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="梯形"><a href="#梯形" class="headerlink" title="梯形"></a>梯形</h3><p>梯形是三角形的一个变体，设置CSS梯形时，左右两条边设置为相等，并且给它设置一个宽度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#trapezium</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">120px</span> solid <span class="number">#ec3504</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">60px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">60px</span> solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="平行四边形"><a href="#平行四边形" class="headerlink" title="平行四边形"></a>平行四边形</h3><p>平行四边形的制作方式是使用transform属性使长方形倾斜一个角度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parallelogram</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">160px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#8734f7</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">skew</span>(30deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">skew</span>(30deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">skew</span>(30deg);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">skew</span>(30deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="星形"><a href="#星形" class="headerlink" title="星形"></a>星形</h3><p>星形的HTML结构同样使用一个带ID的空div。星形的实现方式比较复杂，主要是使用transform属性来旋转不同的边。仔细体会下面的代码。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#star</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fc2e5a</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid <span class="number">#fc2e5a</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(35deg);</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(35deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(35deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(35deg);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#star</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">45px</span>;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">65px</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">80px</span> solid <span class="number">#fc2e5a</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">30px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">30px</span> solid transparent;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-35deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-35deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-35deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-35deg);</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#star</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">top</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">105px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fc2e5a</span>;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid <span class="number">#fc2e5a</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-70deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-70deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-70deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-70deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="六角星形"><a href="#六角星形" class="headerlink" title="六角星形"></a>六角星形</h3><p>和五角星的制作方法不同，六角星形状的制作方法是操纵border属性来制作两半图形，然后合并它们。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#star_six_points</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid <span class="number">#de34f7</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#star_six_points</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid <span class="number">#de34f7</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="五边形"><a href="#五边形" class="headerlink" title="五边形"></a>五边形</h3><p>创建CSS五边形需要结合两个图形：一个梯形，然后在它的上面放一个三角形，共同组成一个五边形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#pentagon</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">54px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">border-width</span>: <span class="number">50px</span> <span class="number">18px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-style</span>: solid;</div><div class="line">    <span class="attribute">border-color</span>: <span class="number">#277bab</span> transparent;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#pentagon</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">85px</span>;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">18px</span>;</div><div class="line">    <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">45px</span> <span class="number">35px</span>;</div><div class="line">    <span class="attribute">border-style</span>: solid;</div><div class="line">    <span class="attribute">border-color</span>: transparent transparent <span class="number">#277bab</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="六边形"><a href="#六边形" class="headerlink" title="六边形"></a>六边形</h3><p>六边形的制作方法可以有很多种，可以像五边形一样，先制作一个长方形，然后在它的上面和下面各放置一个三角形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#hexagon</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">55px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fc5e5e</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#hexagon</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">25px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">25px</span> solid <span class="number">#fc5e5e</span>;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#hexagon</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">bottom</span>: -<span class="number">25px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">25px</span> solid <span class="number">#fc5e5e</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="八角形"><a href="#八角形" class="headerlink" title="八角形"></a>八角形</h3><p>八角形的制作方法也有多种方式，这里使用的是先制作两个相同的梯形，然后在两边分别放置一个三角形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#octagon</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ac60ec</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#octagon</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">42px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">29px</span> solid <span class="number">#ac60ec</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">29px</span> solid <span class="number">#f4f4f4</span>;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">29px</span> solid <span class="number">#f4f4f4</span>;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#octagon</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">42px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">29px</span> solid <span class="number">#ac60ec</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">29px</span> solid <span class="number">#f4f4f4</span>;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">29px</span> solid <span class="number">#f4f4f4</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="心形"><a href="#心形" class="headerlink" title="心形"></a>心形</h3><p>心形的制作是非常复杂的，可以使用伪元素来制作，分别将伪元素旋转不同的角度，并修改transform-origin属性来元素的旋转中心点。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#heart</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">115px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">background</span>: red;</div><div class="line">    <span class="attribute">left</span>: <span class="number">70px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-moz-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-ms-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-o-transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-moz-transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-ms-transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">-o-transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="蛋形"><a href="#蛋形" class="headerlink" title="蛋形"></a>蛋形</h3><p>蛋形时椭圆形的一个变体，它的高度要比宽度稍大，并且设置正确的border-radius属性即可以制作出一个蛋形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#egg</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">136px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">190px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ffc000</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">63px</span> <span class="number">63px</span> <span class="number">63px</span> <span class="number">63px</span> / <span class="number">108px</span> <span class="number">108px</span> <span class="number">72px</span> <span class="number">72px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> / <span class="number">60%</span> <span class="number">60%</span> <span class="number">40%</span> <span class="number">40%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="无穷符号"><a href="#无穷符号" class="headerlink" title="无穷符号"></a>无穷符号</h3><p>无穷符号可以通过border属性和设置伪元素的角度来实现。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#infinity</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#infinity</span><span class="selector-pseudo">:before</span>,<span class="selector-id">#infinity</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">20px</span> solid <span class="number">#06c999</span>;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">50px</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#infinity</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">left</span>: auto;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="消息提示框"><a href="#消息提示框" class="headerlink" title="消息提示框"></a>消息提示框</h3><p>消息提示框可以先制作一个圆角矩形，然后在需要的地方放置一个三角形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#comment_bubble</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">140px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#088cb7</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="selector-id">#comment_bubble</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">38px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">13px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">26px</span> solid <span class="number">#088cb7</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">13px</span> solid transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="吃豆人"><a href="#吃豆人" class="headerlink" title="吃豆人"></a>吃豆人</h3><p>吃豆人的制作方法是先在一个圆形里面制作一个透明的三角形。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#pacman</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">70px</span> solid transparent;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">70px</span> solid <span class="number">#ffde00</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">70px</span> solid <span class="number">#ffde00</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">70px</span> solid <span class="number">#ffde00</span>;</div><div class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">70px</span>;</div><div class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">70px</span>;</div><div class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">70px</span>;</div><div class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">70px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS3的一个非常酷的特性是允许我们创建各种规则和不规则形状的图形，从而可以减少图片的使用。以前只能在Photoshop等图像编辑软件中制作的复杂图形现在使用CSS3就可以完成了。通过使用新的CSS属性，像transform和border-radius，我们可以创建非常漂亮
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Oracle数据库基础语法</title>
    <link href="http://yoursite.com/2015/12/08/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2015/12/08/Oracle数据库基础语法/</id>
    <published>2015-12-08T09:53:50.000Z</published>
    <updated>2017-10-22T08:03:50.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据完整性-四种类型的约束"><a href="#数据完整性-四种类型的约束" class="headerlink" title="数据完整性-四种类型的约束"></a>数据完整性-四种类型的约束</h3><ol><li><p>实体完整性约束：主键约束，唯一约束等方式实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--添加主键约束：</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 PRIMARY <span class="keyword">KEY</span>(字段名);</div><div class="line"><span class="comment">--添加唯一约束：</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 <span class="keyword">UNIQUE</span>(字段名);</div></pre></td></tr></table></figure></li><li><p>域完整性约束：通过数据类型、检查约束、默认值、非空约束等方式实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--添加域完整性约束：</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 <span class="keyword">CHECK</span>(条件);</div></pre></td></tr></table></figure></li><li><p>引用完整性约束：通过主键和外键之间的引用关系实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--添加引用完整性约束：</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 子表表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 FOREIGN <span class="keyword">KEY</span>(子表外键)</div><div class="line"><span class="keyword">REFERENCES</span> 主表名称(主表主键);</div></pre></td></tr></table></figure></li><li><p>自定义完整性约束:借助于数据库规则，存储过程，触发器对象进行约束</p></li></ol><h3 id="SQL-三种语言与函数"><a href="#SQL-三种语言与函数" class="headerlink" title="SQL-三种语言与函数"></a>SQL-三种语言与函数</h3><ol><li><p>DDL：数据定义语言，创建数据库，创建数据库表，创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--创建表空间：</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLESPACE</span> 表空间名称</div><div class="line"><span class="keyword">DATAFILE</span> <span class="string">'表空间数据文件路径和名称'</span> <span class="keyword">size</span>[K|M]文件大小</div><div class="line"><span class="keyword">AUTOEXTEND</span> [<span class="keyword">OFF</span>|<span class="keyword">ON</span>]启动用或禁用文件扩展);</div><div class="line"><span class="comment">--创建用户</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 <span class="keyword">BY</span> 口令</div><div class="line"><span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> 表空间名</div><div class="line"><span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> 临时表空间名</div><div class="line"><span class="keyword">QUOTA</span>  空间大小 <span class="keyword">ON</span> 空间名称;</div><div class="line"><span class="comment">--授予权限</span></div><div class="line"><span class="keyword">GRANT</span> 角色 <span class="keyword">TO</span> 用户名;</div><div class="line"><span class="comment">--取消授权</span></div><div class="line"><span class="keyword">REVOKE</span> 角色 <span class="keyword">FROM</span> 用户名;</div><div class="line">##(常用角色:CONNECT,RESOURCE,DBA)</div><div class="line">##(授予所有权限：ALL PRIVILEGES)</div><div class="line"><span class="comment">--创建表</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(字段名称 字段类型,字段名称 字段类型);</div><div class="line"><span class="comment">--查看表结构</span></div><div class="line">DESC 表名;</div></pre></td></tr></table></figure></li><li><p>DML：数据操作语言，操作数据库对象所包括的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--插入数据</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (列名,列名,列名...) <span class="keyword">VALUES</span> (数据值,数据值,数据值...);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(数值,数值,数值);</div><div class="line"><span class="comment">--修改数据</span></div><div class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名=数值,列名=数值 <span class="keyword">WHERE</span> 条件;</div><div class="line"><span class="comment">--删除数据</span></div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件</div><div class="line"><span class="comment">--查询数据</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 </div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件 <span class="keyword">AND</span> 条件</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件 <span class="keyword">OR</span>  条件</div><div class="line"><span class="comment">--查询字段为空</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名 <span class="keyword">IS</span> <span class="literal">NULL</span></div><div class="line"><span class="comment">--查询列中不重复的值</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 列名 <span class="keyword">FROM</span> 表名</div><div class="line"><span class="comment">--模糊查询</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名 <span class="keyword">like</span> <span class="string">'李%'</span>; (任意匹配多个字符)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名 <span class="keyword">like</span> <span class="string">'李_'</span>; (任意匹配单个字符)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名 <span class="keyword">BETWEEN</span> 数值 <span class="keyword">AND</span> 数值; (在之间的数值)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 列名 <span class="keyword">IN</span>（<span class="string">'数值'</span>,<span class="string">'数值'</span>,<span class="string">'数值'</span>）;(查询指定)</div><div class="line"><span class="comment">--对表和列指定别名</span></div><div class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">AS</span> 别名,列名 <span class="keyword">AS</span> 别名 <span class="keyword">FROM</span> 表名 <span class="keyword">AS</span> 别名; (AS可以不写)</div><div class="line"><span class="comment">--排序</span></div><div class="line">ORDER BY 依据字段 ASC|DESC;升序|降序排列 (默认就是升序)</div></pre></td></tr></table></figure></li><li><p>DCL：数据控制语言，用户角色授权，事务控制</p></li><li>Oracle常用函数<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--字符函数</span></div><div class="line">CONCAT(参数1，参数2)函数</div><div class="line"><span class="comment">--接收两个参数，将第一个参数连接到第一个参数末尾，也可以是使用'||'符号表示。</span></div><div class="line"><span class="comment">--第一个参数为null则返回第二个，第二个参数为null则返回第一个，都为null则返回null。</span></div><div class="line">例：<span class="keyword">SELECT</span> <span class="keyword">NAME</span>,<span class="keyword">CONCAT</span>(PRICE,<span class="string">'元'</span>) <span class="keyword">FROM</span> 表;</div><div class="line"></div><div class="line"></div><div class="line">NVL(参数1，参数2)函数</div><div class="line"><span class="comment">--第一个个参数为空时，返回第二个参数</span></div><div class="line">例：<span class="keyword">SELECT</span> <span class="keyword">NAME</span>,NVL(<span class="keyword">CONTENT</span><span class="string">'暂无信息'</span>) <span class="keyword">FROM</span> 表;</div><div class="line"></div><div class="line"><span class="comment">--数字函数</span></div><div class="line">TRUNC(数值，截取的位数)函数</div><div class="line"><span class="comment">--截取为负时往小数点前截取 为正往小数点后截取,可以只有数值参数，且截取位数为0。</span></div><div class="line">例：<span class="keyword">SELECT</span> TRUNC(<span class="number">45.926</span>,<span class="number">2</span>) <span class="keyword">FROM</span> 表;</div><div class="line">返回结果45.92</div><div class="line"></div><div class="line">ROUND(参数，位数)函数</div><div class="line"><span class="comment">--四舍五入 不设位数取整</span></div><div class="line">例：<span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">45.926</span>,<span class="number">2</span>) <span class="keyword">FROM</span> 表;</div><div class="line">返回结果45.93</div><div class="line"></div><div class="line"><span class="comment">--日期函数</span></div><div class="line">SYSDATE函数</div><div class="line"><span class="comment">--返回当前系统时间</span></div><div class="line">例：<span class="keyword">SELECT</span> <span class="keyword">SYSDATE</span> <span class="keyword">FROM</span> 表</div><div class="line">返回结果：当前时间</div><div class="line"></div><div class="line"><span class="keyword">EXTRACT</span>(<span class="keyword">YEAR</span> <span class="keyword">FROM</span> <span class="keyword">SYSDATE</span>)函数</div><div class="line"><span class="comment">--返回日期中的部分日期值</span></div><div class="line">例：<span class="keyword">SELECT</span> <span class="keyword">EXTRACT</span>(DAT <span class="keyword">FROM</span> 列)<span class="keyword">FORM</span> 表;</div><div class="line">返回结果：列中日期中的日</div><div class="line"></div><div class="line"><span class="comment">--转换函数</span></div><div class="line">TO_CHAR(日期数据,日期格式)函数</div><div class="line"><span class="comment">--转换日期为字符串</span></div><div class="line"></div><div class="line">TO_DATE(日期类型日期，日期类型)函数</div><div class="line"><span class="comment">--日期字符串转日期格式</span></div><div class="line">例：<span class="keyword">SELECT</span> TO_CHAR(列,<span class="string">'YYYY-MM-DD'</span>)<span class="keyword">FORM</span> 表；</div><div class="line">返回结果：格式化的日期字符串</div><div class="line"></div><div class="line"><span class="keyword">TO_DATE</span>(字符串类型日期,<span class="string">'日期类型'</span>)</div><div class="line"><span class="comment">--日期字符串转为日期类型</span></div><div class="line">例：<span class="keyword">SELECT</span> TO_CHAR(日期,<span class="string">'YYYY-MM-DD'</span>)<span class="keyword">FORM</span> 表；</div><div class="line">返回结果：日期类型日期</div><div class="line"></div><div class="line"><span class="comment">--分组(以指定列分组，分组单独使用无实际意义，一般搭配聚合函数使用)</span></div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名 </div><div class="line"></div><div class="line"><span class="comment">--聚合函数</span></div><div class="line"><span class="keyword">sum</span>(列名)函数</div><div class="line"><span class="comment">--求和</span></div><div class="line"><span class="keyword">count</span>(列名)函数</div><div class="line"><span class="comment">--列总行数</span></div><div class="line"><span class="keyword">MAX</span>(列名)</div><div class="line"><span class="comment">--列中最大值</span></div><div class="line"></div><div class="line">例：<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(PRICE),<span class="keyword">ID</span> <span class="keyword">FORM</span> 表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">ID</span></div></pre></td></tr></table></figure></li></ol><h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><ol><li><p>子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--单行子查询</span></div><div class="line"><span class="keyword">SELECT</span> UNAME,SEX <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> PHONE = (<span class="keyword">SELECT</span> PHONE <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> CITY=‘<span class="keyword">NEW</span> YORK’);</div><div class="line"><span class="comment">--多行子查询</span></div><div class="line"><span class="keyword">SELECT</span> UNAME,SEX <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> PHONE <span class="keyword">IN</span> (<span class="keyword">SELECT</span> PHONE <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> CITY <span class="keyword">LIKE</span> ‘A%’)；</div><div class="line"><span class="comment">--多列子查询</span></div><div class="line"><span class="keyword">SELECT</span> UNAME,SEX <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> PHONE <span class="keyword">WHERE</span> (DEPTNO,SAL) <span class="keyword">IN</span> (<span class="keyword">SELECT</span> DEPTNO,<span class="keyword">MAX</span>(SAL) <span class="keyword">FROM</span> 表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> DEPTNO);</div><div class="line"><span class="comment">--1.内联视图子查询</span></div><div class="line"><span class="keyword">SELECT</span> UNAME,SEX <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> UNAME,JOB,SAL <span class="keyword">FROM</span> 表 <span class="keyword">ORDER</span> <span class="keyword">BY</span> SAL)</div><div class="line"><span class="comment">--2.内联视图子查询</span></div><div class="line"><span class="keyword">SELECT</span> UNAME,SEX <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> UNAME,JOB,SAL <span class="keyword">FROM</span> 表 <span class="keyword">ORDER</span> <span class="keyword">BY</span> SAL <span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span>==<span class="number">5</span>);</div><div class="line"><span class="comment">--在HAVING子句中使用子查询</span></div><div class="line"><span class="keyword">SELECT</span> UNAME,JOB,<span class="keyword">AVG</span>(SAL) <span class="keyword">FROM</span> 表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> JOB <span class="keyword">HAVING</span> <span class="keyword">AVG</span>(SAL)=(<span class="keyword">SELECT</span> SAL <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=‘MARTIN’);   </div><div class="line"><span class="comment">--使用ROWNUM查询</span></div><div class="line"><span class="keyword">SELECT</span> UNAME,JOB <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span>=<span class="number">6</span>;</div></pre></td></tr></table></figure></li><li><p>分页查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--使用内连接查询</span></div><div class="line"><span class="keyword">SELECT</span> A.UID,A.UNAME,B.UNAME <span class="keyword">FROM</span> 表 A,表<span class="number">2</span> B <span class="keyword">WHERE</span> A.UID=B.UID <span class="keyword">AND</span> B.UNAME=<span class="string">'图书'</span>;</div><div class="line"></div><div class="line"><span class="comment">--使用外连接查询</span></div><div class="line"><span class="comment">--左外连接(以左表记录为基准，右表记录和左表记录根据连接条件匹配，匹配上追加右表记录，匹配不上右边为空填充)</span></div><div class="line"><span class="keyword">SELECT</span> A.UNAME,.B.TEL,B.UID,CREATEETIME <span class="keyword">FROM</span> 表 A <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> B <span class="keyword">ON</span> A.UID=B.UID;</div><div class="line"><span class="comment">--左外连接用'+'符号代替关键字Oracle写法</span></div><div class="line"><span class="keyword">SELECT</span> A.UNAME,.B.TEL,B.UID,CREATEETIME <span class="keyword">FROM</span> 表 A,表<span class="number">2</span> B <span class="keyword">WHERE</span> A.UID=B.UID(+);</div><div class="line"><span class="comment">--右外连接</span></div><div class="line"><span class="keyword">SELECT</span> A.UNAME,.B.TEL,B.UID,CREATEETIME <span class="keyword">FROM</span> 表 A <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> B <span class="keyword">ON</span> A.UID=B.UID;</div><div class="line"><span class="comment">--右外连接用'+'符号代替关键字Oracle写法</span></div><div class="line"><span class="keyword">SELECT</span> A.UNAME,.B.TEL,B.UID,CREATEETIME <span class="keyword">FROM</span> 表 A,表<span class="number">2</span> B <span class="keyword">WHERE</span> A.UID(+)=B.UID;</div></pre></td></tr></table></figure></li><li><p>集合查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--交集（返回俩个查询共有的记录）</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">WHERE</span> 表 <span class="built_in">NUMBER</span>&gt;<span class="number">200</span> </div><div class="line"><span class="keyword">INTERSECT</span> </div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> USER_ID <span class="keyword">HAVING</span> <span class="keyword">SUM</span>(<span class="built_in">NUMBER</span>)&gt;<span class="number">500</span>;</div><div class="line"><span class="comment">--并集（返回查询的所有记录，UNION会去除重复同时按第一个查询第一列升序排列，而UNION ALL则没有）</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">WHERE</span> 表 <span class="built_in">NUMBER</span>&gt;<span class="number">200</span> </div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> USER_ID <span class="keyword">HAVING</span> <span class="keyword">SUM</span>(<span class="built_in">NUMBER</span>)&gt;<span class="number">500</span>;</div><div class="line"><span class="comment">--补给（返回第一个查询减速出的记录减去第二个查询检索出的记录之后所剩余的记录）</span></div><div class="line"><span class="keyword">SELECT</span> UID <span class="keyword">FROM</span> 表</div><div class="line"><span class="keyword">MINUS</span></div><div class="line"><span class="keyword">SELECT</span> PROD_ID <span class="keyword">FROM</span> 表<span class="number">2</span></div></pre></td></tr></table></figure></li></ol><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--显式游标</span></div><div class="line">CURSOR 游标名 IS <span class="keyword">SELECT</span>语句;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="comment">--打开游标</span></div><div class="line">    <span class="keyword">OPEN</span> 游标名</div><div class="line">    <span class="comment">--提取游标</span></div><div class="line">    <span class="keyword">FETCH</span> 游标名 <span class="keyword">INTO</span> 变量列表</div><div class="line">    <span class="comment">--关闭游标</span></div><div class="line">    <span class="keyword">CLOSE</span> 游标名</div><div class="line"><span class="keyword">END</span>;</div><div class="line"><span class="comment">--使用循环游标简化游标读取</span></div><div class="line"><span class="keyword">DECLARE</span> <span class="comment">--1.声明</span></div><div class="line"><span class="keyword">CURSOR</span> 游标名 <span class="keyword">IS</span> <span class="keyword">SELECT</span>语句; <span class="comment">--2.定义游标绑定结果集</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">FOR</span> 自定变量 <span class="keyword">IN</span> 游标名 <span class="keyword">LOOP</span> <span class="comment">--3.自定义记录类型的变量</span></div><div class="line">    DBMS_OUTPUT.PUT_LINE(变量.字段名) <span class="comment">--4.输出显示</span></div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">--隐式游标</span></div><div class="line"><span class="comment">--(和显式相比</span></div><div class="line"><span class="comment">--1.不用声明游标 </span></div><div class="line"><span class="comment">--2.不用打开和关闭游标 </span></div><div class="line"><span class="comment">--3.必须使用INTO子句，</span></div><div class="line"><span class="comment">--4.结果只能是一条)</span></div><div class="line">例：</div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">uname VARCHAR2(<span class="number">20</span>) <span class="comment">--定义变量</span></div><div class="line">department_name VARCHAR2(<span class="number">20</span>);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">SELECT</span> uname,department_name <span class="keyword">into</span> uname,department_name <span class="keyword">FROM</span> 表<span class="number">1</span> e,表<span class="number">2</span> d <span class="keyword">WHERE</span> e.dep_id=a.dep_id <span class="keyword">AND</span> e.id=<span class="number">1</span>;</div><div class="line">DBMS_OUTPUT.PUT_LINE(uname||'在'||department_name); <span class="comment">--输出</span></div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">--强类型REF动态游标(关联的查询必须与返回相同)</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line"><span class="keyword">TYPE</span> 类型名 <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>; <span class="comment">--1.定义动态游标类型</span></div><div class="line">RETURN 返回类型%ROWTYPE; <span class="comment">--2.返回表结构类型</span></div><div class="line">游标名 游标类型名 <span class="comment">--3.根号有动态游标类型定义动态游标</span></div><div class="line">变量 返回类型%ROWTYPE; <span class="comment">--4.定义变量设为表结构类型</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">OPEN</span> 游标名 <span class="keyword">FOR</span> <span class="keyword">SELECT</span>语句; <span class="comment">--5.关联查询语句</span></div><div class="line">LOOP</div><div class="line">FETCH 游标名 INTO 变量; <span class="comment">--6.提取游标数据并逐条赋值,游标指针向后移动给变量</span></div><div class="line">EXIT WHEN 游标名%NOTFOUND;<span class="comment">--7.设置退出循环条件</span></div><div class="line">DBMS_OUTPUT.PUT_LINE(游标名%ROWCOUNT||''||变量.字段名); <span class="comment">--8.如果不为空则输出</span></div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"><span class="comment">--弱类型REF动态游标(可以为任何查询语句所打开)    </span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line"><span class="keyword">TYPE</span> 类型名 <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>; <span class="comment">--定义动态游标类型</span></div><div class="line">游标名 游标类型名; <span class="comment">--根号有动态游标类型定义动态游标</span></div><div class="line">变量 VARCHAR2(20);</div><div class="line">变量 NUMBER;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">OPEN</span> 游标名 <span class="keyword">FOR</span> <span class="keyword">SELECT</span> uid,uname <span class="keyword">FROM</span> 表;</div><div class="line">FETCH 游标名 INTO 变量1,变量2;    </div><div class="line">WHILE 游标名%FOUND LOOP <span class="comment">--循环读取游标</span></div><div class="line">DBMS_OUTPUT.PUT_LINE('#'||变量1||':'||变量2); --输出</div><div class="line">FETCH  游标名 INTO 变量1,变量2; <span class="comment">--提取第二条内容</span></div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line">CLOSE 游标名;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure><h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--动态查询</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">sql_stmt VARCHAR2(<span class="number">200</span>); <span class="comment">--定义变量存储查询语句</span></div><div class="line">emp_id NUMBER(10):='&amp;emp_id';</div><div class="line">emp_rec employees%ROWTYPE;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">sql_stmt:=<span class="string">'SELECT * FROM employees WHERE id=:id'</span>;</div><div class="line"><span class="keyword">EXECUTE</span> <span class="keyword">IMMEDIATE</span> sql_stmt <span class="keyword">INTO</span> emp_rec <span class="keyword">USING</span> emp_id; <span class="comment">--执行查询语句</span></div><div class="line">DBMS_OUTPUT.PUT_LINE(emp_rec.字段); <span class="comment">--输出</span></div><div class="line"><span class="keyword">END</span>;</div><div class="line"><span class="comment">--动态插入</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">sql_stmt VARCHAR2(<span class="number">200</span>);</div><div class="line">emp_id NUMBER(10):='&amp;emp_id';</div><div class="line">emp_rec employees%ROWTYPE;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">sql_stmt:=<span class="string">'INSERT INTO employees(id) values(:id)'</span>;</div><div class="line"><span class="keyword">EXECUTE</span> <span class="keyword">IMMEDIATE</span> sql_stmt <span class="keyword">USING</span> emp_id; <span class="comment">--执行查询语句</span></div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">--使用动态游标使用动态SQL,返回多条记录</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">e_id <span class="built_in">NUMBER</span>(<span class="number">10</span>);<span class="comment">--定义变量</span></div><div class="line">    e_name VARCHARE2(50);</div><div class="line">    S_SALARY NUMBER(8);</div><div class="line">    type c_type IS REF CURSOR; <span class="comment">--定义游标类型</span></div><div class="line">    cur c_type; <span class="comment">--定义游标</span></div><div class="line">    p_salary NUMBER;='&amp;p_salary';</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">OPEN</span> cur <span class="keyword">FOR</span></div><div class="line"><span class="string">'SELECT e.id,e.name,e.salaryvalue FROM employees e,salary s WHERE e.id=s.employeeid AND s.salaryvalue&gt;:sal ORDER BY id ASC'</span> </div><div class="line"><span class="keyword">USING</span> p_salary;</div><div class="line">DBMS_OUTPUT.PUT_LINE('薪水大于'||p_salary||'的员工有:');</div><div class="line">LOOP</div><div class="line">FETCH cur INTO e_id,e_name,s_salary;</div><div class="line">EXIT WHEN cur%NOTFOUND;</div><div class="line">DBMS_OUTPUT.PUT_LINE('编号:'||e_id||'姓名'||e_name||'薪水'||s_salary);</div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line">CLOSE cur;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"><span class="comment">--动态创建返回多行的SQL语句</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">t_name VARCHAR2(<span class="number">10</span>);</div><div class="line">t_course1 NUMBER;</div><div class="line">t_course2 NUMBER;</div><div class="line">t_course3 NUMBER;</div><div class="line">type c_type IS REF CURSOR;</div><div class="line">cur c_type;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">OPEN</span> cur <span class="keyword">FOR</span></div><div class="line"><span class="string">'SELECT t_name,</span></div><div class="line"><span class="string">sum(case t_course WHEN'''</span>||<span class="string">'语文'</span>||<span class="string">''' THEN t_score ELSE 0 END);</span></div><div class="line"><span class="string">sum(case t_course WHEN'''</span>||<span class="string">'数学'</span>||<span class="string">''' THEN t_score ELSE 0 END);</span></div><div class="line"><span class="string">sum(case t_course WHEN'''</span>||<span class="string">'物理'</span>||<span class="string">''' THEN t_score ELSE 0 END)</span></div><div class="line"><span class="string">FROM tb GROUP BY t_name'</span>;</div><div class="line">LOOP</div><div class="line">FETCH cur INTO t_name,t_course1,t_course2,t_course3;</div><div class="line">EXIT WHEN cur%NOTFOUND;</div><div class="line">DBMS_OUTPUT.PUT_LINE(t_name||'语文't_course1||'数学't_course2||'物理'||t_course3);</div><div class="line"><span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line">CLOSE cur;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><ol><li><p>ACID<br>事务处理是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行，一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性和持久性）属性。</p><ul><li><strong>原子性(Atomicity)</strong>：事务是一个完整的操作，事务的各步骤操作是不可分的，要么都执行要么都不执行。</li><li><strong>一致性(Consistency)</strong>：在事务操作前后，数据必须处于一致状态。</li><li><strong>隔离性(Isolation)</strong>：对数据进行修改的所有并发事务是彼此隔离的，这表明事务必须是独立的，它不应该以任何方式依赖于或影响其他事务</li><li><strong>持久性(Durability)</strong>：事务完成后，它对数据库的修改被永久保持。<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">例：</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">UPDATE</span> 表 <span class="keyword">SET</span> 列=列+<span class="number">1000</span> <span class="keyword">WHERE</span> UID=<span class="string">'1001'</span>;</div><div class="line"><span class="keyword">UPDATE</span> 表 <span class="keyword">SET</span> 列=列<span class="number">-1000</span> <span class="keyword">WHERE</span> UID=<span class="string">'1002'</span>;</div><div class="line"><span class="keyword">COMMIT</span>; <span class="comment">--提交事务</span></div><div class="line">EXCEPTION <span class="comment">--处理异常</span></div><div class="line">WHEN OTHERS THEN </div><div class="line">DBMS_OUTPUT.PUT.LINE('转账异常,停止转账'); <span class="comment">--输出提示</span></div><div class="line"><span class="keyword">ROLLBACK</span>; <span class="comment">--事务回滚</span></div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></li></ul></li><li><p>读取异常情况</p><ul><li><strong>脏读</strong>：一个事务读取了另一个事务未提交的数据。<br>不可重复读：一个事务再次读取之前曾读取过的数据时，发现数据已经被另一个已提交的事务修改。</li><li><strong>幻读</strong>：一个事务根据相同德尔查询条件，重新执行查询，返回的记录中包含前一次执行查询的返回的记录不同的行。<br><img src="/img/oracle_001001.jpg" alt="这里写图片描述"><br>Oracle数据库支持Read Committed和Serializable两种隔离级别</li></ul></li><li><p>事务控制语句</p><ul><li><strong>COMMIT</strong> ：提交事务，既把事务中对数据库的修改进行永久保存。</li><li><strong>ROLLBACK</strong> ：回滚事务，既取消对数据库所做的任何修改</li><li><strong>SAVEPOINT</strong> ：在事务中创建存储点</li><li><strong>ROLLBACK TO</strong> ：将事务回滚到存储点。</li><li><strong>SET TRANSACTION</strong> ：设置事务的属性,设置事务属性只能在第一行<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--设置事务隔离级别属性</span></div><div class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">READ</span> <span class="keyword">ONLY</span></div><div class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> COMMITTED</div><div class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">SERIALIZABLE</span></div><div class="line"></div><div class="line">例：</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">UPDATE</span> 表 <span class="keyword">SET</span> 列=列+<span class="number">1000</span> <span class="keyword">WHERE</span> UID=<span class="string">'1001'</span>;</div><div class="line"><span class="keyword">SAVEPOINT</span> add_account_a; <span class="comment">--创建存储点</span></div><div class="line"><span class="keyword">UPDATE</span> 表 <span class="keyword">SET</span> 列=列<span class="number">-1000</span> <span class="keyword">WHERE</span> UID=<span class="string">'1002'</span>;</div><div class="line"><span class="keyword">COMMIT</span>; <span class="comment">--提交事务</span></div><div class="line">EXCEPTION <span class="comment">--处理异常</span></div><div class="line">WHEN OTHERS THEN </div><div class="line">DBMS_OUTPUT.PUT.LINE('转账异常,停止转账'); <span class="comment">--输出提示</span></div><div class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> add_account_a; <span class="comment">--事务回滚到存储点</span></div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line">例：</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> 存储过程名(参数<span class="number">1</span> <span class="keyword">IN</span> VARCHAR2,参数<span class="number">2</span> <span class="keyword">IN</span> VARCHAR2,参数<span class="number">3</span> <span class="keyword">IN</span> <span class="built_in">NUMBER</span>);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">DBMS_OUTPUT.PUT.LINE(<span class="string">'转账开始'</span>);</div><div class="line"><span class="keyword">UPDATE</span> 表 <span class="keyword">SET</span> 列=列-参数<span class="number">3</span> <span class="keyword">WHERE</span> UID=参数<span class="number">1</span>;</div><div class="line"><span class="keyword">UPDATE</span> 表 <span class="keyword">SET</span> 列=列+参数<span class="number">3</span> <span class="keyword">WHERE</span> UID=参数<span class="number">2</span>;</div><div class="line"><span class="keyword">COMMIT</span>;</div><div class="line">DBMS_OUTPUT.PUT.LINE('转账成功');</div><div class="line">EXCEPTION <span class="comment">--处理异常</span></div><div class="line">WHEN OTHERS THEN </div><div class="line">DBMS_OUTPUT.PUT.LINE('转账异常,停止转账');</div><div class="line"><span class="keyword">ROLLBACK</span>;</div><div class="line"><span class="keyword">END</span> 存储过程名;</div><div class="line"></div><div class="line"><span class="comment">--调用存储过程</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">存储过程名(<span class="string">'参数1'</span>,<span class="string">'参数2'</span>,参数<span class="number">3</span>);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></li></ul></li></ol><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>1.Oracle锁的基本分为两类：</p><ul><li><strong>共享锁(也称读锁,s锁)</strong></li><li><strong>排他锁(也称写锁,x锁)</strong> : 按保护内容来分分为DDL锁和DML锁以及内部所和闩</li><li><strong>DML</strong> : 锁用来保护数据的完整性和一致性，包括TX锁,和TM锁，</li><li><strong>TX锁(事务锁)</strong> ：事务发起第一个修改数据的语句时会自动获得TX锁，而且会一直持续这个锁，直到书屋执行提交或回滚，TX锁用作一种排队机制，使得其他会话可以等待这个事务执行，事务中修改或通过悲观锁选择的每一行都会指向该事务的一个相关TX锁。</li><li><strong>TM锁(表级锁)</strong> ： TM锁用于确保在修改表的内容时，表的结构不会改变当一个会话开始更新一个表时，会自动获得这个表的TM锁，这样能防止另一个会话在该表上执行DROP或者ALTER语句，删除该表或更改表的结构。</li><li><strong>DDL锁</strong> : 用来保护数据对象结构定义,在Oracle中DDL语句包装在隐式提交中来执行<br>内部所用来保护数据库内部数据结构，闩是一种锁，设计为只保持极短的时间，用于保护某些内存结构<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--悲观锁使用(本次事务提交之前，外界无法修改这些记录)。</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> UID=<span class="string">'101'</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</div></pre></td></tr></table></figure></li></ul><h3 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h3><ol><li><p><strong>创建储存过程</strong><br>存储过程是一个预编译的SQL语句，是执行特定任务的子程序，优点是模块化，重用性，可维护性，安全性，执行速度要比单纯SQL语句快。<br>调用程序是通过参数向被调用存储程序传值的，参数模式有三种<code>IN</code>、<code>OUT</code>、<code>IN OUT</code>。默认是IN未指定则为IN模式，返回调用环境之前必须先给OUT或IN OUT赋值，可以在参数列表给IN赋默认值，但是不能给OUT和IN OUT赋默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--创建存储过程</span></div><div class="line"><span class="comment">--IN参数模式</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> </div><div class="line">存储过程名(参数 <span class="built_in">NUMBER</span>)</div><div class="line"><span class="keyword">AS</span></div><div class="line">变量 VARCHAR2(<span class="number">20</span>);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">SELECT</span> UNAME <span class="keyword">INTO</span> 变量 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> UID=<span class="number">1</span>; <span class="comment">--找到的信息存入变量中</span></div><div class="line">DBMS_OUTPUT.PUT_LINE('员工的姓名是'||变量);</div><div class="line">EXCEPTION <span class="comment">--异常处理</span></div><div class="line">WHEN NO_DATA_FOUND THEN <span class="comment">--如果未找到记录</span></div><div class="line">DBMS_OUTPUT.PUT_LINE('员工编号未找到');</div><div class="line"><span class="keyword">END</span> 存储过程名;</div><div class="line"></div><div class="line"><span class="comment">--OUT参数模式</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> </div><div class="line">存储过程名(参数 <span class="keyword">OUT</span> <span class="built_in">NUMBER</span>)</div><div class="line"><span class="keyword">AS</span></div><div class="line">变量 VARCHAR2(<span class="number">20</span>);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">参数:=<span class="number">0</span>;</div><div class="line"><span class="keyword">SELECT</span> UNAME <span class="keyword">INTO</span> 变量 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> UID=<span class="number">1</span>;</div><div class="line">参数:=1+参数;</div><div class="line"><span class="keyword">END</span> 存储过程名;</div><div class="line"><span class="comment">--调用</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">aa <span class="built_in">NUMBER</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">aa:=<span class="number">0</span>;</div><div class="line">存储过程(aa);</div><div class="line">DEMS_OUTPUT.PUT_LINE(aa);</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">--IN OUT参数模式</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">PROCEDURE</span> </div><div class="line">存储过程名(参数 <span class="built_in">NUMBER</span>,参数<span class="number">2</span> <span class="keyword">OUT</span> <span class="built_in">NUMBER</span>)</div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(参数<span class="number">2</span>) <span class="keyword">INTO</span> 参数<span class="number">2</span> <span class="keyword">FROM</span> 表；</div><div class="line">DBMS_OUTPUT.PUT_LINE(<span class="string">'总数为:'</span>||参数<span class="number">2</span>);</div><div class="line"><span class="keyword">END</span> 存储过程名;</div><div class="line"><span class="comment">--调用</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">x <span class="built_in">NUMBER</span>;<span class="comment">--定义变量获取存储过程输出参数</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">x:=<span class="number">0</span>;</div><div class="line">存储过程(输入参数,x(出处参数));</div><div class="line">DBMS_OUTPUT.OUT_LINE(t);</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">--在窗口显示服务器输出结果    </span></div><div class="line"><span class="keyword">SET</span> SERVEROUTPUT <span class="keyword">ON</span>;</div><div class="line"><span class="comment">--调用存储过程</span></div><div class="line"><span class="keyword">EXECUTE</span> 存储过程名(参数);</div><div class="line"><span class="comment">--存储过程的授权</span></div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> 存储过程名 <span class="keyword">TO</span> 用户; <span class="comment">--被授权用户无权授予别人</span></div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">EXECUTE</span> <span class="keyword">ON</span> 存储过程名 <span class="keyword">TO</span> 用户 <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>; <span class="comment">--被授权用户有权授予别人</span></div><div class="line"><span class="comment">--跟踪调试存储过程</span></div><div class="line"><span class="keyword">SHOW</span> <span class="keyword">ERRORS</span> <span class="keyword">PROCEDURE</span>(模块类型) 模块名称;</div></pre></td></tr></table></figure></li><li><p><strong>创建函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--无参函数创建</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> 函数名</div><div class="line"><span class="keyword">RETURN</span> VARCHAR2 <span class="comment">--指定输出参数类型</span></div><div class="line"><span class="keyword">IS</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">RETURN</span> TO_CHAR(<span class="keyword">sysdate</span>,<span class="string">'yyyy"年"MM"月"DD"日"'</span>);</div><div class="line"><span class="keyword">END</span></div><div class="line"><span class="comment">--无参数函数调用</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">函数名;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"><span class="comment">--无参数函数调用</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">函数名;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">--创建有输入参数函数</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> 函数名(参数 <span class="built_in">DATE</span>)</div><div class="line"><span class="keyword">RETURN</span> <span class="built_in">INTEGER</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">weekday</span> <span class="built_in">INTEGER</span>:=<span class="number">-1</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">SELECT</span> TO_CHAR(p_date,<span class="string">'D'</span>) <span class="keyword">INTO</span> <span class="keyword">weekday</span> <span class="keyword">FROM</span> DUAL;</div><div class="line">    IF weekday=1 OR weekday=7 THEN</div><div class="line">RETURN 1;</div><div class="line">ELSE</div><div class="line">    RETURN 0;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span></div><div class="line"><span class="comment">--有输入参数函数调用</span></div><div class="line"><span class="keyword">DECLARE</span> </div><div class="line">vday <span class="built_in">DATE</span>:=<span class="built_in">DATE</span> <span class="string">'2010-11-12'</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">DBMS_OUTPUT.PUT_LINE(func_isholiday(vday));</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="comment">--创建输出参数函数</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> 函数名(参数 <span class="built_in">NUMBER</span>,参数<span class="number">2</span> <span class="keyword">OUT</span> VARCHAR2)</div><div class="line"><span class="keyword">RETURN</span> VARCHAR2</div><div class="line"><span class="keyword">AS</span></div><div class="line">uname employees.uname%<span class="keyword">type</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">SELECT</span> uname,postname <span class="keyword">INTO</span> uname,postname <span class="keyword">FROM</span> 表;</div><div class="line">    RETURN uname;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"><span class="comment">--输入参数函数调用</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">v_name employees.uname%<span class="keyword">type</span>;</div><div class="line">    v_post post.postname%type;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">v_name:=FUNC_GETINFO(<span class="number">2</span>,v_post);</div><div class="line">    DBMS_OUTPUT.PUT_LINE('姓名:'||v_name);</div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure></li></ol><p>存储过程和函数的区别:<br><img src="/img/oracle_001002.jpg" alt="这里写图片描述"><br>存储过程使用限制少，功能强大，不能直接引用返回值 函数限制多，功能少，可以直接引用返回值， 函数用于负责的数据计算，函数则更为模块化</p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">TRIGGER</span> 触发器名</div><div class="line"><span class="comment">--↓ 触发器语句</span></div><div class="line"><span class="keyword">BEFORE</span> <span class="comment">--(BEFORE | AFTER | INSTEAD OF)事件发生之前还是之后触发</span></div><div class="line"><span class="keyword">INSERT</span> <span class="comment">--(INSERT | DELETE | UPDATE)指定构成触发器事件的数据库操作类型 </span></div><div class="line"><span class="keyword">OR</span> <span class="keyword">UPDATE</span> <span class="keyword">OF</span> 字段 <span class="keyword">ON</span> employees</div><div class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="comment">--行级触发器(指定是否对受影响的每行都执行触发器,不使用则为语句触发器)</span></div><div class="line"><span class="comment">--↑ 触发器语句</span></div><div class="line"><span class="comment">--↓ 限制条件</span></div><div class="line"><span class="keyword">WHEN</span> (New.字段 &lt;&gt;<span class="number">5</span>) <span class="comment">--条件</span></div><div class="line"><span class="comment">--↓ 触发器操作</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">:New.manager_id:=<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> 触发器名;</div></pre></td></tr></table></figure><ol><li><p>触发器的类型</p><ul><li><strong>行级触发器</strong> ： 对DML语句影响的每一行执行一次</li><li><strong>语句级触发器</strong> ： 对每个DML语句执行一次</li><li><strong>INSTEAD OF触发器</strong> ： 是在视图上定义的触发器而不是表上，是用来替换所使用实际语句的触发器，可以允许用户修改不能直接使用DML语句修改的视图</li><li><strong>模式触发器</strong> ： 是在模式级的操作上建立的触发器，如CREATE、ALTER、DROP、GRANT、REVOKE和RUNCATE等DDL语句</li><li><strong>数据库触发器</strong> ： 创建在数据库事件上的触发器，包括启动、关闭、服务器错误、登陆和主线等。这些事件都是实例范围的，不予特定的表或视图关联</li></ul></li><li><p>触发器的管理<br>Oracle的触发器有两种状态<code>DISABLED</code>为非启用状态，<code>ENABLED</code>已启用状态，触发器创建会立即生效</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--启动关闭触发器</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TRIGGER</span> 触发器名称 触发器状态(<span class="keyword">ENABLE</span> | <span class="keyword">DISABLE</span>);</div><div class="line"><span class="comment">--触发器删除</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> 触发器名称</div><div class="line"><span class="comment">--查看触发器信息</span></div><div class="line"><span class="keyword">DESC</span> USER_TRIGGERS;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据完整性-四种类型的约束&quot;&gt;&lt;a href=&quot;#数据完整性-四种类型的约束&quot; class=&quot;headerlink&quot; title=&quot;数据完整性-四种类型的约束&quot;&gt;&lt;/a&gt;数据完整性-四种类型的约束&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;实体完整性约束：主键约束，唯一约束
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript的HTML特殊符号转义</title>
    <link href="http://yoursite.com/2015/12/08/%E4%BD%BF%E7%94%A8JavaScript%E7%9A%84HTML%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E8%BD%AC%E4%B9%89/"/>
    <id>http://yoursite.com/2015/12/08/使用JavaScript的HTML特殊符号转义/</id>
    <published>2015-12-08T07:15:12.000Z</published>
    <updated>2017-10-22T07:23:24.258Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以下列出三种转义HTML特殊符号的方法"><a href="#以下列出三种转义HTML特殊符号的方法" class="headerlink" title="以下列出三种转义HTML特殊符号的方法"></a>以下列出三种转义HTML特殊符号的方法</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="comment">//编码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> $(<span class="string">'&lt;div/&gt;'</span>).text(value).html();</div><div class="line">&#125;</div><div class="line"><span class="comment">//解码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlDecode</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> $(<span class="string">'&lt;div/&gt;'</span>).html(value).text();</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="comment">//编码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span>(<span class="params"> html </span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.createElement( <span class="string">'a'</span> ).appendChild( </div><div class="line">         <span class="built_in">document</span>.createTextNode( html ) ).parentNode.innerHTML;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//解码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlDecode</span>(<span class="params"> html </span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement( <span class="string">'a'</span> ); a.innerHTML = html;</div><div class="line">  <span class="keyword">return</span> a.textContent;</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h4 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="comment">//编码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span>(<span class="params">str</span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> s = <span class="string">""</span>; </div><div class="line">    <span class="keyword">if</span> (str.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>; </div><div class="line">    s = str.replace(<span class="regexp">/&amp;amp;/g</span>, <span class="string">"&amp;amp;"</span>); </div><div class="line">    s = s.replace(<span class="comment">//g, "&amp;gt;"); </span></div><div class="line">    s = s.replace(<span class="regexp">/ /g</span>, <span class="string">"&amp;nbsp;"</span>); </div><div class="line">    s = s.replace(<span class="regexp">/\'/g</span>, <span class="string">"'"</span>);</div><div class="line">    s = s.replace(<span class="regexp">/\"/g</span>, <span class="string">""</span><span class="string">"); </span></div><div class="line"><span class="string">    s = s.replace(/\n/g, "</span>&lt;br&gt;<span class="string">"); </span></div><div class="line"><span class="string">    return s; </span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">//解码</span></div><div class="line"><span class="string">function htmlDecode(str)&#123;</span></div><div class="line"><span class="string">var s = "</span><span class="string">";</span></div><div class="line"><span class="string">if (str.length == 0) return "</span><span class="string">";</span></div><div class="line"><span class="string">s = str.replace(/&amp;gt;/g, "</span>&amp;amp;<span class="string">");</span></div><div class="line"><span class="string">s = s.replace(//g, "</span>&amp;gt;<span class="string">");</span></div><div class="line"><span class="string">s = s.replace(/&amp;nbsp;/g, "</span> <span class="string">");</span></div><div class="line"><span class="string">s = s.replace(/'/g, "</span>\<span class="string">'");</span></div><div class="line"><span class="string">s = s.replace(/"/g, "\"");</span></div><div class="line"><span class="string">s = s.replace(/&lt;br&gt;/g, "\n");</span></div><div class="line"><span class="string">return s;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&lt;/script&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;以下列出三种转义HTML特殊符号的方法&quot;&gt;&lt;a href=&quot;#以下列出三种转义HTML特殊符号的方法&quot; class=&quot;headerlink&quot; title=&quot;以下列出三种转义HTML特殊符号的方法&quot;&gt;&lt;/a&gt;以下列出三种转义HTML特殊符号的方法&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS判断单、多张图片加载完成</title>
    <link href="http://yoursite.com/2015/12/08/JS%E5%88%A4%E6%96%AD%E5%8D%95%E3%80%81%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90/"/>
    <id>http://yoursite.com/2015/12/08/JS判断单、多张图片加载完成/</id>
    <published>2015-12-08T07:15:12.000Z</published>
    <updated>2017-10-22T08:01:37.593Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的运用中有这样一种场景，某资源加载完成后再执行某个操作，例如在做导出时，后端通过打开模板页生成PDF，并返回下载地址。这时前后端通常需要约定一个flag，用以标识模板准备就绪，可以生成PDF了。</p><p>试想，如果模板中有图片，此时如何判断图片是否加载完成？</p><p>在此之前来了解一下jquery的ready与window.onload的区别，ready只是dom结构加载完毕，便视为加载完成。(此时图片没有加载完毕)，onload是指dom的生成和资源完全加载（比如flash、图片）出来后才执行。接下来回到正题，先从单张图片说起。</p><h3 id="单张图片（图片在文档中）"><a href="#单张图片（图片在文档中）" class="headerlink" title="单张图片（图片在文档中）"></a>单张图片（图片在文档中）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HTML</span></div><div class="line">&lt;img id=<span class="string">'xiu'</span> src=<span class="string">"http://www.daqianduan.com/wp-content/uploads/2014/11/hs-xiu.jpg"</span>&gt;  </div><div class="line"></div><div class="line"><span class="comment">//js</span></div><div class="line"> $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//jquery</span></div><div class="line">    $(<span class="string">'#xiu'</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="comment">// 加载完成 </span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">   <span class="comment">//原生  onload</span></div><div class="line">    <span class="keyword">var</span> xiu = <span class="built_in">document</span>.getElementById(<span class="string">'xiu'</span>)</div><div class="line">    xiu.onload = xiu.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">if</span>(!<span class="keyword">this</span>.readyState||<span class="keyword">this</span>.readyState==<span class="string">'loaded'</span>||<span class="keyword">this</span>.readyState==<span class="string">'complete'</span>)&#123;</div><div class="line">           <span class="comment">// 加载完成 </span></div><div class="line">       &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>注：</p><ul><li>IE8及以下版本不支持onload事件，但支持onreadystatechange事件；</li><li>readyState是onreadystatechange事件的一个状态，值为loaded或complete的时候，表示已经加载完毕。</li><li>以下内容省略兼容</li></ul><h3 id="单张图片（图片动态生成）"><a href="#单张图片（图片动态生成）" class="headerlink" title="单张图片（图片动态生成）"></a>单张图片（图片动态生成）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line"> <span class="keyword">var</span> xiu = <span class="keyword">new</span> Image()</div><div class="line"> xiu.src = <span class="string">'http://www.daqianduan.com/wp-content/uploads/2014/11/hs-xiu.jpg'</span></div><div class="line"> xiu.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 加载完成 </span></div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="单张图片（结合ES6-Promise）"><a href="#单张图片（结合ES6-Promise）" class="headerlink" title="单张图片（结合ES6 Promise）"></a>单张图片（结合ES6 Promise）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line"> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">let</span> xiu = <span class="keyword">new</span> Image()</div><div class="line">    xiu.src = <span class="string">'http://www.daqianduan.com/wp-content/uploads/2014/11/hs-xiu.jpg'</span></div><div class="line">    xiu.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="comment">// 加载完成 </span></div><div class="line">       resolve(xiu)</div><div class="line">    &#125;</div><div class="line"> &#125;).then(<span class="function">(<span class="params">xiu</span>)=&gt;</span>&#123;</div><div class="line"> <span class="comment">//code</span></div><div class="line"> &#125;)</div></pre></td></tr></table></figure><h3 id="多张图片"><a href="#多张图片" class="headerlink" title="多张图片"></a>多张图片</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = [],  </div><div class="line">    flag = <span class="number">0</span>, </div><div class="line">    mulitImg = [</div><div class="line">    <span class="string">'http://www.daqianduan.com/wp-content/uploads/2017/03/IMG_0119.jpg'</span>,</div><div class="line">    <span class="string">'http://www.daqianduan.com/wp-content/uploads/2017/01/1.jpg'</span>,</div><div class="line">    <span class="string">'http://www.daqianduan.com/wp-content/uploads/2015/11/jquery.jpg'</span>,</div><div class="line">    <span class="string">'http://www.daqianduan.com/wp-content/uploads/2015/10/maid.jpg'</span></div><div class="line"> ];</div><div class="line"> <span class="keyword">var</span> imgTotal = mulitImg.length;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; imgTotal ; i++)&#123;</div><div class="line">    img[i] = <span class="keyword">new</span> Image()</div><div class="line">    img[i].src = mulitImg[i]</div><div class="line">    img[i].onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="comment">//第i张图片加载完成</span></div><div class="line">       flag++</div><div class="line">       <span class="keyword">if</span>( flag == imgTotal )&#123;</div><div class="line">          <span class="comment">//全部加载完成</span></div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h3 id="多张图片（结合ES6-Promise-all-）"><a href="#多张图片（结合ES6-Promise-all-）" class="headerlink" title="多张图片（结合ES6 Promise.all()）"></a>多张图片（结合ES6 Promise.all()）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mulitImg = [</div><div class="line"> <span class="string">'http://www.daqianduan.com/wp-content/uploads/2017/03/IMG_0119.jpg'</span>,</div><div class="line"> <span class="string">'http://www.daqianduan.com/wp-content/uploads/2017/01/1.jpg'</span>,</div><div class="line"> <span class="string">'http://www.daqianduan.com/wp-content/uploads/2015/11/jquery.jpg'</span>,</div><div class="line"> <span class="string">'http://www.daqianduan.com/wp-content/uploads/2015/10/maid.jpg'</span></div><div class="line">];</div><div class="line"><span class="keyword">let</span> promiseAll = [], img = [], imgTotal = mulitImg.length;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; imgTotal ; i++)&#123;</div><div class="line"> promiseAll[i] = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</div><div class="line"> img[i] = <span class="keyword">new</span> Image()</div><div class="line"> img[i].src = mulitImg[i]</div><div class="line"> img[i].onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//第i张加载完成</span></div><div class="line">  resolve(img[i])</div><div class="line"> &#125;</div><div class="line"> &#125;)</div><div class="line">&#125;</div><div class="line"><span class="built_in">Promise</span>.all(promiseAll).then(<span class="function">(<span class="params">img</span>)=&gt;</span>&#123;</div><div class="line"> <span class="comment">//全部加载完成</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际的运用中有这样一种场景，某资源加载完成后再执行某个操作，例如在做导出时，后端通过打开模板页生成PDF，并返回下载地址。这时前后端通常需要约定一个flag，用以标识模板准备就绪，可以生成PDF了。&lt;/p&gt;
&lt;p&gt;试想，如果模板中有图片，此时如何判断图片是否加载完成？&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
